-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'profiles', —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
CREATE TABLE IF NOT EXISTS public.profiles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    telegram_id BIGINT UNIQUE NOT NULL,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    chat_id BIGINT NOT NULL,
    gender TEXT CHECK (gender IN ('male', 'female')),
    age INT,
    height_cm INT,
    weight_kg NUMERIC(5, 2),
    goal TEXT CHECK (goal IN ('lose_weight', 'maintain_weight', 'gain_mass')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'meals', —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
CREATE TABLE IF NOT EXISTS public.meals (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    description TEXT NOT NULL,
    calories INT NOT NULL,
    protein NUMERIC(5, 2),
    fat NUMERIC(5, 2),
    carbs NUMERIC(5, 2),
    meal_type TEXT, -- e.g., 'photo', 'manual'
    photo_url TEXT, -- Link to the photo if available
    eaten_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'weight_g' –≤ —Ç–∞–±–ª–∏—Ü—É 'meals', –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
ALTER TABLE public.meals ADD COLUMN IF NOT EXISTS weight_g INT;

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'ingredients' –≤ —Ç–∞–±–ª–∏—Ü—É 'meals', –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
ALTER TABLE public.meals ADD COLUMN IF NOT EXISTS ingredients TEXT[];

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –ö–ë–ñ–£ –≤ —Ç–∞–±–ª–∏—Ü—É 'profiles', –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS daily_calories NUMERIC;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS daily_protein NUMERIC;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS daily_fat NUMERIC;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS daily_carbs NUMERIC;

    SELECT
        con.conname AS constraint_name,
        ccu.table_schema AS table_schema,
        ccu.table_name,
        ccu.column_name,
        pg_get_constraintdef(con.oid) AS definition
    FROM
        pg_constraint AS con
    JOIN
        pg_namespace AS n ON n.oid = con.connamespace
    JOIN
        information_schema.constraint_column_usage AS ccu ON con.conname = ccu.constraint_name AND n.nspname = ccu.table_schema
    WHERE
        con.contype = 'c' AND ccu.table_name = 'profiles';

SELECT * FROM pg_policies WHERE tablename = 'meals';

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
CREATE TABLE IF NOT EXISTS public.workout_plan_data (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    experience TEXT NOT NULL, -- beginner, intermediate, advanced
    goal TEXT NOT NULL, -- weightloss, muscle, maintain, health
    priority_zones TEXT[], -- –º–∞—Å—Å–∏–≤ –∑–æ–Ω: back, chest, legs, shoulders, core
    injuries TEXT, -- –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–≤–º –∏–ª–∏ 'none'
    location TEXT NOT NULL, -- home, gym, outdoor
    frequency_per_week INT NOT NULL, -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é
    duration_minutes INT NOT NULL, -- –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    preferred_types TEXT[], -- –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤: strength, cardio, hiit, yoga, stretching
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
CREATE TABLE IF NOT EXISTS public.nutrition_plan_data (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    activity_level TEXT NOT NULL, -- sedentary, light, active, heavy
    calorie_goal TEXT NOT NULL, -- deficit, surplus, maintain
    allergies TEXT[], -- –º–∞—Å—Å–∏–≤ –∞–ª–ª–µ—Ä–≥–∏–π –∏–ª–∏ ['none']
    diet_type TEXT NOT NULL, -- regular, vegetarian, vegan, keto
    meals_per_day TEXT NOT NULL, -- three_main, five_six_small
    product_limitations TEXT, -- –æ–ø–∏—Å–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏–ª–∏ 'none'
    supplements_interest TEXT NOT NULL, -- yes, no
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
CREATE POLICY "Allow public all operations on workout_plan_data" 
ON workout_plan_data FOR ALL 
TO public 
USING (true) 
WITH CHECK (true);

CREATE POLICY "Allow public all operations on nutrition_plan_data" 
ON nutrition_plan_data FOR ALL 
TO public 
USING (true) 
WITH CHECK (true);

-- –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É water_intake —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
CREATE TABLE water_intake (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    amount_ml INTEGER NOT NULL CHECK (amount_ml > 0),
    recorded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã
CREATE INDEX idx_water_intake_user_id ON water_intake(user_id);
CREATE INDEX idx_water_intake_recorded_at ON water_intake(recorded_at);

-- –í–∫–ª—é—á–∞–µ–º RLS
ALTER TABLE water_intake ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ RLS
CREATE POLICY "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏" ON water_intake
    FOR ALL USING (true);

    CREATE TABLE workout_records (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    telegram_id TEXT NOT NULL,
    workout_type TEXT DEFAULT 'general',
    duration_minutes INTEGER DEFAULT 30,
    exercises TEXT,
    intensity TEXT,
    calories_burned INTEGER DEFAULT 0,
    notes TEXT,
    date DATE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- –î–æ–±–∞–≤–ª—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏
ALTER TABLE workout_records ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è)
CREATE POLICY "Allow read access" ON workout_records FOR SELECT USING (true);

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π  
CREATE POLICY "Allow insert access" ON workout_records FOR INSERT WITH CHECK (true);

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞
ALTER TABLE public.profiles
ADD COLUMN target_weight_kg NUMERIC;

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –≤ –º–µ—Å—è—Ü–∞—Ö
ALTER TABLE public.profiles
ADD COLUMN timeframe_months INT;

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ALTER TABLE public.profiles
ADD COLUMN timezone TEXT DEFAULT 'Europe/Moscow';

-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ (—Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
COMMENT ON COLUMN public.profiles.target_weight_kg IS '–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.';
COMMENT ON COLUMN public.profiles.timeframe_months IS '–°—Ä–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –≤ –º–µ—Å—è—Ü–∞—Ö.';
COMMENT ON COLUMN public.profiles.timezone IS '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.';

-- üèÜ –°–ò–°–¢–ï–ú–ê –ß–ï–õ–õ–ï–ù–î–ñ–ï–ô - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è SQL –¥–ª—è Supabase
-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–æ—â–µ–Ω—ã –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

-- 1. –¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
CREATE TABLE IF NOT EXISTS weekly_challenges (
    id BIGSERIAL PRIMARY KEY,
    week_start TIMESTAMPTZ NOT NULL UNIQUE, -- –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    title TEXT NOT NULL,                    -- –ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
    description TEXT NOT NULL,              -- –û–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
    target_value INTEGER NOT NULL,          -- –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70000 —à–∞–≥–æ–≤)
    unit TEXT NOT NULL,                     -- –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (—à–∞–≥–æ–≤, –ª–∏—Ç—Ä–æ–≤, –º–∏–Ω—É—Ç, –∫–º, —Ä–∞–∑)
    type TEXT NOT NULL,                     -- –¢–∏–ø —á–µ–ª–ª–µ–Ω–¥–∂–∞ (steps, water, workout_time, distance, exercises)
    motivation TEXT NOT NULL,               -- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    created_at TIMESTAMPTZ DEFAULT NOW()   -- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
);

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
CREATE INDEX IF NOT EXISTS idx_weekly_challenges_week_start ON weekly_challenges(week_start);
CREATE INDEX IF NOT EXISTS idx_weekly_challenges_type ON weekly_challenges(type);

-- 2. –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —à–∞–≥–æ–≤
CREATE TABLE IF NOT EXISTS steps_tracking (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    date DATE NOT NULL,                     -- –î–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    steps INTEGER NOT NULL DEFAULT 0,       -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å
    updated_at TIMESTAMPTZ DEFAULT NOW(),   -- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    
    -- –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∞—Ç—É
    UNIQUE(user_id, date)
);

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
CREATE INDEX IF NOT EXISTS idx_steps_tracking_user_date ON steps_tracking(user_id, date);
CREATE INDEX IF NOT EXISTS idx_steps_tracking_date ON steps_tracking(date);

-- 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É profiles (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)
ALTER TABLE profiles 
ADD COLUMN IF NOT EXISTS notifications_enabled BOOLEAN DEFAULT true;

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
CREATE INDEX IF NOT EXISTS idx_profiles_notifications ON profiles(notifications_enabled) WHERE notifications_enabled = true;

-- 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at –≤ steps_tracking
DROP TRIGGER IF EXISTS update_steps_tracking_updated_at ON steps_tracking;
CREATE TRIGGER update_steps_tracking_updated_at
    BEFORE UPDATE ON steps_tracking
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 5. –í–∫–ª—é—á–∞–µ–º Row Level Security (RLS) - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
ALTER TABLE weekly_challenges ENABLE ROW LEVEL SECURITY;
ALTER TABLE steps_tracking ENABLE ROW LEVEL SECURITY;

-- 6. –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è weekly_challenges
DROP POLICY IF EXISTS "Allow all read access to weekly_challenges" ON weekly_challenges;
CREATE POLICY "Allow all read access to weekly_challenges" ON weekly_challenges
    FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow service role full access to weekly_challenges" ON weekly_challenges;
CREATE POLICY "Allow service role full access to weekly_challenges" ON weekly_challenges
    FOR ALL USING (auth.role() = 'service_role');

-- 7. –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è steps_tracking
DROP POLICY IF EXISTS "Allow all read access to steps_tracking" ON steps_tracking;
CREATE POLICY "Allow all read access to steps_tracking" ON steps_tracking
    FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow service role full access to steps_tracking" ON steps_tracking;
CREATE POLICY "Allow service role full access to steps_tracking" ON steps_tracking
    FOR ALL USING (auth.role() = 'service_role');

-- 8. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
COMMENT ON TABLE weekly_challenges IS '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
COMMENT ON TABLE steps_tracking IS '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º';

COMMENT ON COLUMN weekly_challenges.week_start IS '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞';
COMMENT ON COLUMN weekly_challenges.target_value IS '–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞';
COMMENT ON COLUMN weekly_challenges.type IS '–¢–∏–ø —á–µ–ª–ª–µ–Ω–¥–∂–∞: steps, water, workout_time, distance, exercises';

COMMENT ON COLUMN steps_tracking.date IS '–î–∞—Ç–∞ —É—á–µ—Ç–∞ —à–∞–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)';
COMMENT ON COLUMN steps_tracking.steps IS '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É';

-- 9. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
INSERT INTO weekly_challenges (week_start, title, description, target_value, unit, type, motivation) 
VALUES 
    (
        date_trunc('week', NOW() AT TIME ZONE 'Europe/Moscow') + INTERVAL '1 day',
        '–ü—Ä–æ–π—Ç–∏ 70,000 —à–∞–≥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é!',
        '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è! –î–≤–∏–≥–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 70,000 —à–∞–≥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é. –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 10,000 —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å.',
        70000,
        '—à–∞–≥–æ–≤',
        'steps',
        '–ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏! –í—ã —Å–º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å! üí™'
    )
ON CONFLICT (week_start) DO NOTHING;

-- –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
SELECT '–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —á–µ–ª–ª–µ–Ω–¥–∂–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã! üéâ' as result; 

ALTER TABLE weekly_challenges DISABLE ROW LEVEL SECURITY;
ALTER TABLE steps_tracking DISABLE ROW LEVEL SECURITY;

-- üìä –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–ê–Ø SQL –°–•–ï–ú–ê –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò –í–ï–°–ê
-- –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

-- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É)
CREATE TABLE IF NOT EXISTS public.user_subscriptions (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    plan VARCHAR(20) NOT NULL DEFAULT 'free', -- 'free', 'premium', 'vip'
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE, -- NULL –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    payment_id VARCHAR(255), -- ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id)
);

-- –¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ)
CREATE TABLE IF NOT EXISTS public.daily_usage (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    photos_analyzed INTEGER NOT NULL DEFAULT 0,
    ai_questions_asked INTEGER NOT NULL DEFAULT 0,
    workouts_generated INTEGER NOT NULL DEFAULT 0,
    manual_entries INTEGER NOT NULL DEFAULT 0, -- —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –µ–¥—ã
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id, date)
);

-- –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
CREATE TABLE IF NOT EXISTS public.weight_history (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    weight_kg DECIMAL(5,2) NOT NULL, -- –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å profiles.weight_kg
    notes TEXT, -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    source VARCHAR(20) DEFAULT 'manual', -- 'manual', 'profile_update', 'weekly_check'
    recorded_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–µ—Å–µ
CREATE TABLE IF NOT EXISTS public.weight_reminders (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    reminder_date DATE NOT NULL,
    reminder_type VARCHAR(20) DEFAULT 'weekly', -- 'weekly', 'monthly', 'custom'
    is_sent BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id, reminder_date)
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_user_subscriptions_user_id ON public.user_subscriptions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_subscriptions_plan ON public.user_subscriptions(plan);
CREATE INDEX IF NOT EXISTS idx_user_subscriptions_active ON public.user_subscriptions(is_active);

CREATE INDEX IF NOT EXISTS idx_daily_usage_user_id ON public.daily_usage(user_id);
CREATE INDEX IF NOT EXISTS idx_daily_usage_date ON public.daily_usage(date);
CREATE INDEX IF NOT EXISTS idx_daily_usage_user_date ON public.daily_usage(user_id, date);

CREATE INDEX IF NOT EXISTS idx_weight_history_user_id ON public.weight_history(user_id);
CREATE INDEX IF NOT EXISTS idx_weight_history_recorded_at ON public.weight_history(recorded_at);
CREATE INDEX IF NOT EXISTS idx_weight_history_user_recorded ON public.weight_history(user_id, recorded_at);

CREATE INDEX IF NOT EXISTS idx_weight_reminders_user_id ON public.weight_reminders(user_id);
CREATE INDEX IF NOT EXISTS idx_weight_reminders_date ON public.weight_reminders(reminder_date);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
CREATE OR REPLACE FUNCTION increment_usage(
    p_user_id BIGINT,
    p_date DATE,
    p_field VARCHAR(50)
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO public.daily_usage (user_id, date, photos_analyzed, ai_questions_asked, workouts_generated, manual_entries)
    VALUES (p_user_id, p_date, 
            CASE WHEN p_field = 'photos_analyzed' THEN 1 ELSE 0 END,
            CASE WHEN p_field = 'ai_questions_asked' THEN 1 ELSE 0 END,
            CASE WHEN p_field = 'workouts_generated' THEN 1 ELSE 0 END,
            CASE WHEN p_field = 'manual_entries' THEN 1 ELSE 0 END)
    ON CONFLICT (user_id, date) 
    DO UPDATE SET
        photos_analyzed = CASE WHEN p_field = 'photos_analyzed' THEN daily_usage.photos_analyzed + 1 ELSE daily_usage.photos_analyzed END,
        ai_questions_asked = CASE WHEN p_field = 'ai_questions_asked' THEN daily_usage.ai_questions_asked + 1 ELSE daily_usage.ai_questions_asked END,
        workouts_generated = CASE WHEN p_field = 'workouts_generated' THEN daily_usage.workouts_generated + 1 ELSE daily_usage.workouts_generated END,
        manual_entries = CASE WHEN p_field = 'manual_entries' THEN daily_usage.manual_entries + 1 ELSE daily_usage.manual_entries END,
        updated_at = timezone('utc'::text, now());
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
CREATE OR REPLACE FUNCTION get_user_profile_by_telegram_id(p_telegram_id BIGINT)
RETURNS TABLE(
    id BIGINT,
    telegram_id BIGINT,
    username TEXT,
    first_name TEXT,
    gender TEXT,
    age INT,
    height_cm INT,
    weight_kg NUMERIC(5,2),
    target_weight_kg NUMERIC,
    goal TEXT,
    timeframe_months INT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        p.id,
        p.telegram_id,
        p.username,
        p.first_name,
        p.gender,
        p.age,
        p.height_cm,
        p.weight_kg,
        p.target_weight_kg,
        p.goal,
        p.timeframe_months
    FROM public.profiles p
    WHERE p.telegram_id = p_telegram_id;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
CREATE OR REPLACE FUNCTION get_user_usage_stats(p_user_id BIGINT)
RETURNS TABLE(
    today_photos INTEGER,
    today_questions INTEGER,
    today_manual_entries INTEGER,
    month_workouts INTEGER,
    total_weight_records INTEGER,
    last_weight DECIMAL(5,2),
    weight_trend VARCHAR(20),
    current_weight DECIMAL(5,2)
) AS $$
DECLARE
    this_month_start DATE := DATE_TRUNC('month', CURRENT_DATE)::DATE;
    today DATE := CURRENT_DATE;
BEGIN
    RETURN QUERY
    SELECT 
        COALESCE(du.photos_analyzed, 0) as today_photos,
        COALESCE(du.ai_questions_asked, 0) as today_questions,
        COALESCE(du.manual_entries, 0) as today_manual_entries,
        COALESCE(monthly.total_workouts, 0)::INTEGER as month_workouts,
        COALESCE(weight_stats.total_records, 0)::INTEGER as total_weight_records,
        weight_stats.last_weight,
        weight_stats.trend,
        profile_weight.current_weight
    FROM (
        SELECT p_user_id as user_id
    ) u
    LEFT JOIN public.daily_usage du ON du.user_id = u.user_id AND du.date = today
    LEFT JOIN (
        SELECT 
            user_id,
            SUM(workouts_generated) as total_workouts
        FROM public.daily_usage 
        WHERE user_id = p_user_id 
        AND date >= this_month_start
        GROUP BY user_id
    ) monthly ON monthly.user_id = u.user_id
    LEFT JOIN (
        SELECT 
            user_id,
            COUNT(*) as total_records,
            (SELECT weight_kg FROM public.weight_history WHERE user_id = p_user_id ORDER BY recorded_at DESC LIMIT 1) as last_weight,
            CASE 
                WHEN COUNT(*) < 2 THEN 'insufficient_data'
                WHEN (SELECT weight_kg FROM public.weight_history WHERE user_id = p_user_id ORDER BY recorded_at DESC LIMIT 1) > 
                     (SELECT weight_kg FROM public.weight_history WHERE user_id = p_user_id ORDER BY recorded_at DESC LIMIT 1 OFFSET 1) 
                THEN 'increasing'
                WHEN (SELECT weight_kg FROM public.weight_history WHERE user_id = p_user_id ORDER BY recorded_at DESC LIMIT 1) < 
                     (SELECT weight_kg FROM public.weight_history WHERE user_id = p_user_id ORDER BY recorded_at DESC LIMIT 1 OFFSET 1) 
                THEN 'decreasing'
                ELSE 'stable'
            END as trend
        FROM public.weight_history 
        WHERE user_id = p_user_id
        GROUP BY user_id
    ) weight_stats ON weight_stats.user_id = u.user_id
    LEFT JOIN (
        SELECT 
            id as user_id,
            weight_kg as current_weight
        FROM public.profiles
        WHERE id = p_user_id
    ) profile_weight ON profile_weight.user_id = u.user_id;
END;
$$ LANGUAGE plpgsql;

-- –í–∫–ª—é—á–∞–µ–º Row Level Security
ALTER TABLE public.user_subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.daily_usage ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.weight_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.weight_reminders ENABLE ROW LEVEL SECURITY;

-- –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–¥—Ö–æ–¥–æ–º)
CREATE POLICY "Allow public all operations on user_subscriptions" 
ON public.user_subscriptions FOR ALL 
TO public 
USING (true) 
WITH CHECK (true);

CREATE POLICY "Allow public all operations on daily_usage" 
ON public.daily_usage FOR ALL 
TO public 
USING (true) 
WITH CHECK (true);

CREATE POLICY "Allow public all operations on weight_history" 
ON public.weight_history FOR ALL 
TO public 
USING (true) 
WITH CHECK (true);

CREATE POLICY "Allow public all operations on weight_reminders" 
ON public.weight_reminders FOR ALL 
TO public 
USING (true) 
WITH CHECK (true);

-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
COMMENT ON TABLE public.user_subscriptions IS '–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (free, premium, vip) - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É';
COMMENT ON TABLE public.daily_usage IS '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ';
COMMENT ON TABLE public.weight_history IS '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –¥–æ–ø–æ–ª–Ω—è–µ—Ç profiles.weight_kg';
COMMENT ON TABLE public.weight_reminders IS '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞';

COMMENT ON COLUMN public.weight_history.weight_kg IS '–í–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å profiles.weight_kg)';
COMMENT ON COLUMN public.weight_history.source IS '–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø–∏—Å–∏: manual, profile_update, weekly_check';
COMMENT ON COLUMN public.user_subscriptions.expires_at IS '–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (NULL –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π)';

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Å–∞ –∏–∑ profiles –≤ weight_history –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
CREATE OR REPLACE FUNCTION sync_weight_to_history()
RETURNS TRIGGER AS $$
BEGIN
    -- –ï—Å–ª–∏ –≤–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    IF OLD.weight_kg IS DISTINCT FROM NEW.weight_kg AND NEW.weight_kg IS NOT NULL THEN
        INSERT INTO public.weight_history (user_id, weight_kg, source, recorded_at)
        VALUES (NEW.id, NEW.weight_kg, 'profile_update', timezone('utc'::text, now()));
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
DROP TRIGGER IF EXISTS trigger_sync_weight_to_history ON public.profiles;
CREATE TRIGGER trigger_sync_weight_to_history
    AFTER UPDATE OF weight_kg ON public.profiles
    FOR EACH ROW
    EXECUTE FUNCTION sync_weight_to_history();

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
ALTER TABLE public.profiles 
ADD COLUMN IF NOT EXISTS notifications_enabled BOOLEAN DEFAULT true;

-- –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
/*
INSERT INTO public.user_subscriptions (user_id, plan, is_active) 
SELECT id, 'vip', true FROM public.profiles WHERE telegram_id = YOUR_TELEGRAM_ID
ON CONFLICT (user_id) DO NOTHING;
*/

-- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
SELECT '–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É –ë–î! üéâ' as result; 

ALTER TABLE public.user_subscriptions
ADD COLUMN IF NOT EXISTS promo_activated_at TIMESTAMPTZ,
ADD COLUMN IF NOT EXISTS promo_expires_at TIMESTAMPTZ;

COMMENT ON COLUMN public.user_subscriptions.promo_activated_at IS '–í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ-–ø–µ—Ä–∏–æ–¥';
COMMENT ON COLUMN public.user_subscriptions.promo_expires_at IS '–í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø—Ä–æ–º–æ-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç';


ALTER TABLE public.user_subscriptions
ADD COLUMN IF NOT EXISTS promo_activated_at TIMESTAMPTZ,
ADD COLUMN IF NOT EXISTS promo_expires_at TIMESTAMPTZ;

COMMENT ON COLUMN public.user_subscriptions.promo_activated_at IS '–í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ-–ø–µ—Ä–∏–æ–¥';
COMMENT ON COLUMN public.user_subscriptions.promo_expires_at IS '–í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø—Ä–æ–º–æ-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç';


-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
CREATE TABLE IF NOT EXISTS public.daily_usage (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    date DATE NOT NULL,
    photos_processed INTEGER DEFAULT 0,
    ai_questions INTEGER DEFAULT 0,
    meal_logs INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(telegram_id, date)
);

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS public.user_actions (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    action_type VARCHAR(50) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    data JSONB
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_daily_usage_telegram_id ON public.daily_usage(telegram_id);
CREATE INDEX IF NOT EXISTS idx_daily_usage_date ON public.daily_usage(date);
CREATE INDEX IF NOT EXISTS idx_user_actions_telegram_id ON public.user_actions(telegram_id);
CREATE INDEX IF NOT EXISTS idx_user_actions_type ON public.user_actions(action_type);
CREATE INDEX IF NOT EXISTS idx_user_actions_created_at ON public.user_actions(created_at);

-- –í–∫–ª—é—á–µ–Ω–∏–µ RLS
ALTER TABLE public.daily_usage ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_actions ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
CREATE POLICY "Allow public all operations on daily_usage"
ON public.daily_usage FOR ALL
TO public
USING (true);

CREATE POLICY "Allow public all operations on user_actions"
ON public.user_actions FOR ALL
TO public
USING (true);

-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
COMMENT ON TABLE public.daily_usage IS '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏';
COMMENT ON COLUMN public.daily_usage.telegram_id IS 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram';
COMMENT ON COLUMN public.daily_usage.date IS '–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è';
COMMENT ON COLUMN public.daily_usage.photos_processed IS '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –∑–∞ –¥–µ–Ω—å';
COMMENT ON COLUMN public.daily_usage.ai_questions IS '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò –∑–∞ –¥–µ–Ω—å';
COMMENT ON COLUMN public.daily_usage.meal_logs IS '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ –∑–∞ –¥–µ–Ω—å';

COMMENT ON TABLE public.user_actions IS '–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
COMMENT ON COLUMN public.user_actions.telegram_id IS 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram';
COMMENT ON COLUMN public.user_actions.action_type IS '–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è';
COMMENT ON COLUMN public.user_actions.data IS '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏';

-- üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –ü–û–î–ü–ò–°–û–ö –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ü–†–û–ú–û

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ-—Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
ALTER TABLE public.user_subscriptions 
ADD COLUMN IF NOT EXISTS promo_activated_at TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS promo_expires_at TIMESTAMP WITH TIME ZONE;

-- –û–±–Ω–æ–≤–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
UPDATE public.user_subscriptions 
SET plan = 'free' 
WHERE plan IS NULL;

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_user_subscriptions_promo_expires 
ON public.user_subscriptions(promo_expires_at) 
WHERE promo_expires_at IS NOT NULL;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE OR REPLACE FUNCTION get_user_subscription_by_telegram_id(p_telegram_id BIGINT)
RETURNS TABLE(
    tier TEXT,
    expires_at TIMESTAMP WITH TIME ZONE,
    promo_activated_at TIMESTAMP WITH TIME ZONE,
    promo_expires_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        us.plan as tier,
        us.expires_at,
        us.promo_activated_at,
        us.promo_expires_at
    FROM public.user_subscriptions us
    JOIN public.profiles p ON p.id = us.user_id
    WHERE p.telegram_id = p_telegram_id;
END;
$$ LANGUAGE plpgsql;

-- === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ÆKASSA ===

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –ÆKassa
CREATE TABLE IF NOT EXISTS public.yukassa_payments (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    telegram_id BIGINT NOT NULL,
    payment_id UUID NOT NULL UNIQUE, -- ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ÆKassa
    amount DECIMAL(10,2) NOT NULL, -- –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
    currency VARCHAR(3) NOT NULL DEFAULT 'RUB',
    subscription_tier VARCHAR(20) NOT NULL, -- 'progress' –∏–ª–∏ 'maximum'
    status VARCHAR(20) NOT NULL DEFAULT 'pending', -- pending, succeeded, failed, canceled
    payment_url TEXT, -- –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    confirmation_token TEXT, -- –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ÆKassa
    paid_at TIMESTAMP WITH TIME ZONE, -- –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL, -- –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
    metadata JSONB, -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ÆKassa
    webhook_received_at TIMESTAMP WITH TIME ZONE, -- –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è webhook
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
CREATE INDEX IF NOT EXISTS idx_yukassa_payments_user_id ON public.yukassa_payments(user_id);
CREATE INDEX IF NOT EXISTS idx_yukassa_payments_telegram_id ON public.yukassa_payments(telegram_id);
CREATE INDEX IF NOT EXISTS idx_yukassa_payments_payment_id ON public.yukassa_payments(payment_id);
CREATE INDEX IF NOT EXISTS idx_yukassa_payments_status ON public.yukassa_payments(status);
CREATE INDEX IF NOT EXISTS idx_yukassa_payments_created_at ON public.yukassa_payments(created_at);

-- –í–∫–ª—é—á–∞–µ–º Row Level Security
ALTER TABLE public.yukassa_payments ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
CREATE POLICY "Allow public all operations on yukassa_payments" 
ON public.yukassa_payments FOR ALL 
TO public 
USING (true) 
WITH CHECK (true);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
CREATE OR REPLACE FUNCTION activate_subscription_after_payment(
    p_telegram_id BIGINT,
    p_subscription_tier VARCHAR(20),
    p_payment_id UUID
)
RETURNS BOOLEAN AS $$
DECLARE
    v_user_id BIGINT;
    v_expires_at TIMESTAMP WITH TIME ZONE;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
    SELECT id INTO v_user_id 
    FROM public.profiles 
    WHERE telegram_id = p_telegram_id;
    
    IF v_user_id IS NULL THEN
        RETURN FALSE;
    END IF;
    
    -- –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (30 –¥–Ω–µ–π)
    v_expires_at := timezone('utc'::text, now()) + INTERVAL '30 days';
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏
    INSERT INTO public.user_subscriptions (user_id, plan, tier, is_active, expires_at, payment_id, updated_at)
    VALUES (v_user_id, p_subscription_tier, p_subscription_tier, TRUE, v_expires_at, p_payment_id::TEXT, timezone('utc'::text, now()))
    ON CONFLICT (user_id) 
    DO UPDATE SET
        plan = p_subscription_tier,
        tier = p_subscription_tier,
        is_active = TRUE,
        expires_at = v_expires_at,
        payment_id = p_payment_id::TEXT,
        updated_at = timezone('utc'::text, now());
    
    -- –û—Ç–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
    UPDATE public.yukassa_payments
    SET 
        status = 'succeeded',
        paid_at = timezone('utc'::text, now()),
        webhook_received_at = timezone('utc'::text, now()),
        updated_at = timezone('utc'::text, now())
    WHERE payment_id = p_payment_id;
    
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ
COMMENT ON TABLE public.yukassa_payments IS '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –ÆKassa API';
COMMENT ON COLUMN public.yukassa_payments.payment_id IS '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ÆKassa';
COMMENT ON COLUMN public.yukassa_payments.amount IS '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö';
COMMENT ON COLUMN public.yukassa_payments.subscription_tier IS '–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: progress (199‚ÇΩ) –∏–ª–∏ maximum (349‚ÇΩ)';
COMMENT ON COLUMN public.yukassa_payments.status IS '–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: pending, succeeded, failed, canceled';
COMMENT ON COLUMN public.yukassa_payments.confirmation_token IS '–¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
COMMENT ON COLUMN public.yukassa_payments.metadata IS '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ÆKassa –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON';
