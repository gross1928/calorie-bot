const TelegramBot = require('node-telegram-bot-api');
const supabase = require('./supabaseClient');
const OpenAI = require('openai');

require('dotenv').config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
    throw new Error('Telegram Bot Token or OpenAI API Key is not defined in .env file');
}

const bot = new TelegramBot(token);
const openai = new OpenAI({ apiKey: openaiApiKey });

// In-memory state for registration process
// { telegram_id: { step: 'ask_gender', data: { name: 'John' } } }
const registrationState = {};
const manualAddState = {};

// --- OpenAI Image Recognition ---
const recognizeFoodFromPhoto = async (photoUrl) => {
    console.log('Sending image to OpenAI for recognition...');
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "dish_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
  "ingredients": ["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2", "..."],
  "weight_g": –≤–µ—Å –±–ª—é–¥–∞ –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
  "calories": –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ),
  "protein": "–±–µ–ª–∫–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)",
  "fat": "–∂–∏—Ä—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)",
  "carbs": "—É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)",
  "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ, –∫–∞–∫ —Ç—ã –ø—Ä–∏—à–µ–ª –∫ —Ç–∞–∫–æ–º—É –≤—ã–≤–æ–¥—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
}
–ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON-–æ–±—ä–µ–∫—Ç–∞. –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –µ–¥–∞, –≤–µ—Ä–Ω–∏ JSON —Å "dish_name": "–Ω–µ –µ–¥–∞".`
                },
                {
                    role: 'user',
                    content: [
                        { type: 'text', text: '–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏? –û—Ü–µ–Ω–∏ —Å–æ—Å—Ç–∞–≤ –∏ –ö–ë–ñ–£.' },
                        {
                            type: 'image_url',
                            image_url: {
                                url: photoUrl,
                            },
                        },
                    ],
                },
            ],
            max_tokens: 500,
        });

        const content = response.choices[0].message.content;
        // Sometimes the model might return the JSON inside a code block
        const jsonString = content.replace(/```json/g, '').replace(/```/g, '').trim();
        const parsedContent = JSON.parse(jsonString);

        if (parsedContent.dish_name === '–Ω–µ –µ–¥–∞') {
            return { success: false, reason: '–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É.' };
        }

        return { success: true, data: parsedContent };

    } catch (error) {
        console.error('Error with OpenAI API:', error);
        return { success: false, reason: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.' };
    }
};

const setupBot = (app) => {
    const url = process.env.SERVER_URL;
    if (!url) {
        throw new Error('SERVER_URL is not defined in .env file');
    }
    const webhookPath = `/api/telegram-webhook`;
    bot.setWebHook(`${url}${webhookPath}`);

    app.post(webhookPath, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });

    console.log('Telegram bot webhook is set up.');

    // --- Command Handlers ---

    bot.onText(/\/start/, async (msg) => {
        const { id: telegram_id, username, first_name, last_name } = msg.from;
        const chat_id = msg.chat.id;

        try {
            const { data, error } = await supabase
                .from('profiles')
                .select('telegram_id')
                .eq('telegram_id', telegram_id)
                .single();

            if (error && error.code !== 'PGRST116') { // PGRST116 = 'Not a single row was found'
                throw error;
            }

            if (data) {
                // User exists
                bot.sendMessage(chat_id, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`, {
                    reply_markup: {
                        inline_keyboard: [
                             [{ text: 'üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –ø–æ —Ñ–æ—Ç–æ', callback_data: 'photo_food' }],
                             [{ text: '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É –≤—Ä—É—á–Ω—É—é', callback_data: 'add_manual' }]
                        ]
                    }
                });
            } else {
                // New user - start registration
                registrationState[telegram_id] = { step: 'ask_name', data: { telegram_id, username, first_name, last_name, chat_id } };
                bot.sendMessage(chat_id, '–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π. –î–∞–≤–∞–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?');
            }
        } catch (dbError) {
            console.error('Error checking user profile:', dbError.message);
            bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    bot.onText(/\/photo/, (msg) => {
        bot.sendMessage(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π –µ–¥—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å.');
    });

    // --- Message Handler for Registration & Photos ---

    bot.on('message', async (msg) => {
        const telegram_id = msg.from.id;
        const chat_id = msg.chat.id;

        // Photo handler
        if (msg.photo) {
            const thinkingMessage = await bot.sendMessage(chat_id, '–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ñ–æ—Ç–æ! üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...');

            try {
                // Get the highest resolution photo
                const photo = msg.photo[msg.photo.length - 1];
                const fileInfo = await bot.getFile(photo.file_id);
                const photoUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.filePath}`;
                
                const recognitionResult = await recognizeFoodFromPhoto(photoUrl);

                if (recognitionResult.success) {
                    const { dish_name, calories, protein, fat, carbs, ingredients, weight_g, reasoning } = recognitionResult.data;
                    
                    // Prepare data for callback query. It has a 64-byte limit.
                    // We can't pass all the data. We'll pass the essentials and re-use the text from the message.
                    const callback_data = `meal_save_photo_${calories}_${protein}_${fat}_${carbs}_${weight_g}`;
                    const ingredientsString = ingredients.join(', ');

                    const responseText = `*${dish_name}* (–ü—Ä–∏–º–µ—Ä–Ω–æ ${weight_g} –≥)

*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:* ${ingredientsString}
*–ö–ë–ñ–£:*
- –ö–∞–ª–æ—Ä–∏–∏: ${calories} –∫–∫–∞–ª
- –ë–µ–ª–∫–∏: ${protein} –≥
- –ñ–∏—Ä—ã: ${fat} –≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${carbs} –≥

*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ò–ò:* _${reasoning}_

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏?`;

                    await bot.editMessageText(responseText, {
                        chat_id: thinkingMessage.chat.id,
                        message_id: thinkingMessage.message_id,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                     { text: '‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data },
                                     { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'meal_cancel' }
                                ]
                            ]
                        }
                    });

                } else {
                    await bot.editMessageText(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ. –ü—Ä–∏—á–∏–Ω–∞: ${recognitionResult.reason}`, {
                        chat_id: thinkingMessage.chat.id,
                        message_id: thinkingMessage.message_id
                    });
                }
            } catch (error) {
                console.error('Error processing photo:', error);
                 await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
                    chat_id: thinkingMessage.chat.id,
                    message_id: thinkingMessage.message_id
                });
            }
            return; // Stop further processing
        }

        // Check if the user is in the middle of registration
        if (registrationState[telegram_id] && !msg.text.startsWith('/')) {
            const state = registrationState[telegram_id];
            const text = msg.text;

            switch (state.step) {
                case 'ask_name':
                    state.data.name = text;
                    state.step = 'ask_gender';
                    bot.sendMessage(chat_id, '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ú—É–∂—Å–∫–æ–π üë®', callback_data: 'register_gender_male' }],
                                [{ text: '–ñ–µ–Ω—Å–∫–∏–π üë©', callback_data: 'register_gender_female' }]
                            ]
                        }
                    });
                    break;
                case 'ask_age':
                    const age = parseInt(text, 10);
                    if (isNaN(age) || age < 10 || age > 100) {
                        bot.sendMessage(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç).');
                        return;
                    }
                    state.data.age = age;
                    state.step = 'ask_height';
                    bot.sendMessage(chat_id, '–ü—Ä–∏–Ω—è—Ç–æ. –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?');
                    break;
                case 'ask_height':
                    const height = parseInt(text, 10);
                    if (isNaN(height) || height < 100 || height > 250) {
                        bot.sendMessage(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º).');
                        return;
                    }
                    state.data.height_cm = height;
                    state.step = 'ask_weight';
                    bot.sendMessage(chat_id, '–°—É–ø–µ—Ä. –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?');
                    break;
                case 'ask_weight':
                    const weight = parseFloat(text.replace(',', '.'));
                    if (isNaN(weight) || weight < 30 || weight > 200) {
                        bot.sendMessage(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 200 –∫–≥).');
                        return;
                    }
                    state.data.weight_kg = weight;
                    state.step = 'ask_goal';
                     bot.sendMessage(chat_id, '–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–∞—è —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å', callback_data: 'register_goal_lose_weight' }],
                                [{ text: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å', callback_data: 'register_goal_maintain_weight' }],
                                [{ text: '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É', callback_data: 'register_goal_gain_mass' }]
                            ]
                        }
                    });
                    break;
            }
        }
    });

    // --- Callback Query Handler for Registration & Meals ---

    bot.on('callback_query', async (callbackQuery) => {
        const msg = callbackQuery.message;
        const telegram_id = callbackQuery.from.id;
        const chat_id = msg.chat.id;
        const [action, subject, ...params] = callbackQuery.data.split('_');
        
        if (action === 'meal') {
            await bot.answerCallbackQuery(callbackQuery.id);
            if (subject === 'save' && params[0] === 'photo') {
                const [calories, protein, fat, carbs, weight_g] = params.slice(1);
                
                // Extracting dish_name and ingredients from the message text itself to overcome callback_data limit
                const messageText = msg.text;
                const dish_name = messageText.match(/^\*(.*?)\*/)[1];
                const ingredientsMatch = messageText.match(/\*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\* (.*?)\n/);
                const ingredients = ingredientsMatch ? ingredientsMatch[1].split(', ') : [];

                try {
                    // 1. Get user's internal ID from profiles table
                    const { data: profile, error: profileError } = await supabase
                        .from('profiles')
                        .select('id')
                        .eq('telegram_id', telegram_id)
                        .single();
                    
                    if (profileError || !profile) throw new Error('User profile not found.');

                    // 2. Insert into meals table
                    const mealData = {
                        user_id: profile.id,
                        description: dish_name,
                        calories: parseInt(calories),
                        protein: parseFloat(protein),
                        fat: parseFloat(fat),
                        carbs: parseFloat(carbs),
                        weight_g: parseInt(weight_g),
                        ingredients: ingredients,
                        meal_type: 'photo'
                    };
                    const { error: mealError } = await supabase.from('meals').insert(mealData);

                    if (mealError) throw mealError;

                    bot.editMessageText(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${dish_name} (${calories} –∫–∫–∞–ª).`, {
                        chat_id,
                        message_id: msg.message_id,
                        reply_markup: null
                    });

                } catch (dbError) {
                    console.error('Error saving meal:', dbError.message);
                    bot.sendMessage(chat_id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }
            } else if (subject === 'cancel') {
                bot.editMessageText('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
                    chat_id,
                    message_id: msg.message_id,
                    reply_markup: null
                });
            }
             return;
        }

        if (action === 'register' && registrationState[telegram_id]) {
            const state = registrationState[telegram_id];
            
            switch (state.step) {
                case 'ask_gender':
                    if (subject === 'gender') {
                        state.data.gender = value; // 'male' or 'female'
                        state.step = 'ask_age';
                        bot.editMessageText('–û—Ç–ª–∏—á–Ω–æ. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?', { chat_id, message_id: msg.message_id });
                    }
                    break;
                case 'ask_goal':
                    if (subject === 'goal') {
                        state.data.goal = value;
                        
                        // End of registration, save to DB
                        try {
                             const profileData = {
                                telegram_id: state.data.telegram_id,
                                username: state.data.username,
                                first_name: state.data.name, // Use the name they provided
                                last_name: state.data.last_name,
                                chat_id: state.data.chat_id,
                                gender: state.data.gender,
                                age: state.data.age,
                                height_cm: state.data.height_cm,
                                weight_kg: state.data.weight_kg,
                                goal: state.data.goal
                            };

                            const { error } = await supabase.from('profiles').insert(profileData);
                            if (error) throw error;

                            await bot.editMessageText(`üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
- –ò–º—è: ${profileData.first_name}
- –ü–æ–ª: ${profileData.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
- –í–æ–∑—Ä–∞—Å—Ç: ${profileData.age}
- –†–æ—Å—Ç: ${profileData.height_cm} —Å–º
- –í–µ—Å: ${profileData.weight_kg} –∫–≥
- –¶–µ–ª—å: ${profileData.goal.replace('_', ' ')}

–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏—ë–º—ã –ø–∏—â–∏. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`, { chat_id, message_id: msg.message_id });
                            
                            // Clean up state
                            delete registrationState[telegram_id];

                        } catch (dbError) {
                            console.error('Error saving user profile:', dbError.message);
                            bot.sendMessage(chat_id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π /start –µ—â–µ —Ä–∞–∑.');
                        }
                    }
                    break;
            }
        }
         bot.answerCallbackQuery(callbackQuery.id);
    });

};

module.exports = { setupBot }; 