const TelegramBot = require('node-telegram-bot-api');
const supabase = require('./supabaseClient');
const OpenAI = require('openai');
const crypto = require('crypto');
const cron = require('node-cron');
const { USER_WORKOUT_PROGRAMS } = require('./user_workout_programs');

require('dotenv').config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
    throw new Error('Telegram Bot Token or OpenAI API Key is not defined in .env file');
}

// ü§ñ Telegram Bot —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const bot = new TelegramBot(token, {
    polling: false // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è setupBot()
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    logEvent('error', 'Telegram polling error', { 
        error: error.message,
        code: error.code 
    });
});

const openai = new OpenAI({ apiKey: openaiApiKey });

// === üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ú–û–î–£–õ–ò ===

// üö® 1. ERROR HANDLING & STABILITY
const withErrorHandling = async (apiCall, fallbackMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.') => {
    try {
        return await apiCall();
    } catch (error) {
        console.error('API Error:', error);
        return { success: false, error: fallbackMessage, details: error.message };
    }
};

const withTimeout = (promise, timeoutMs = 30000) => {
    return Promise.race([
        promise,
        new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Request timeout')), timeoutMs)
        )
    ]);
};

// üö´ 2. RATE LIMITING (Anti-spam protection)
const userRateLimits = new Map();
const RATE_LIMIT_WINDOW = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
const RATE_LIMIT_MAX_REQUESTS = 30; // 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

const checkRateLimit = (userId) => {
    const now = Date.now();
    const userRequests = userRateLimits.get(userId) || [];
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const recentRequests = userRequests.filter(timestamp => now - timestamp < RATE_LIMIT_WINDOW);
    
    if (recentRequests.length >= RATE_LIMIT_MAX_REQUESTS) {
        return false; // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    }
    
    recentRequests.push(now);
    userRateLimits.set(userId, recentRequests);
    return true; // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
};

// ‚úÖ 3. DATA VALIDATION
const validateUserInput = {
    weight: (value) => {
        const num = parseFloat(value);
        return !isNaN(num) && num > 0 && num < 300;
    },
    height: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 100 && num < 250;
    },
    age: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 120;
    },
    waterAmount: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 5000;
    },
    calories: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 10000;
    },
    name: (value) => {
        return typeof value === 'string' && value.length >= 2 && value.length <= 50 && /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/.test(value);
    }
};

// üìù 4. LOGGING SYSTEM
const logEvent = (level, message, meta = {}) => {
    const timestamp = new Date().toISOString();
    const logEntry = {
        timestamp,
        level,
        message,
        ...meta
    };
    
    console.log(`[${timestamp}] ${level.toUpperCase()}: ${message}`, meta);
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–∞–π–ª –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
};

// üóÑÔ∏è 5. DATABASE ERROR HANDLING
const withDatabaseErrorHandling = async (operation, fallbackMessage = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.') => {
    try {
        const result = await operation();
        if (result.error) {
            logEvent('error', 'Database operation failed', { 
                error: result.error.message, 
                code: result.error.code 
            });
            return { success: false, error: fallbackMessage, details: result.error };
        }
        return { success: true, data: result.data };
    } catch (error) {
        logEvent('error', 'Database exception', { error: error.toString() });
        return { success: false, error: fallbackMessage, details: error };
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    logEvent('error', 'Unhandled Rejection', { reason: reason.toString(), promise });
});

process.on('uncaughtException', (error) => {
    logEvent('error', 'Uncaught Exception', { error: error.toString(), stack: error.stack });
});

// üöÄ GRACEFUL SHUTDOWN –¥–ª—è Railway
process.on('SIGTERM', () => {
    logEvent('info', 'Received SIGTERM, shutting down gracefully');
    console.log('üîÑ Railway –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    setTimeout(() => {
        process.exit(0);
    }, 5000);
});

process.on('SIGINT', () => {
    logEvent('info', 'Received SIGINT, shutting down gracefully');
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    process.exit(0);
});

// üìä 6. HEALTH CHECK ENDPOINT
const performHealthCheck = async () => {
    const healthStatus = {
        timestamp: new Date().toISOString(),
        status: 'healthy',
        services: {}
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
    try {
        await withTimeout(openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [{ role: 'user', content: 'test' }],
            max_tokens: 1
        }), 5000);
        healthStatus.services.openai = 'healthy';
    } catch (error) {
        healthStatus.services.openai = 'unhealthy';
        healthStatus.status = 'degraded';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
    try {
        const { error } = await supabase.from('profiles').select('count').limit(1);
        healthStatus.services.database = error ? 'unhealthy' : 'healthy';
        if (error) healthStatus.status = 'degraded';
    } catch (error) {
        healthStatus.services.database = 'unhealthy';
        healthStatus.status = 'degraded';
    }

    logEvent('info', 'Health check completed', healthStatus);
    return healthStatus;
};

// In-memory states
const registrationState = {};
const manualAddState = {};
const mealConfirmationCache = {};
const workoutPlanState = {};
const nutritionPlanState = {};
const waterInputState = {};
const profileEditState = {};
const challengeStepsState = {};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const questionState = {};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const medicalAnalysisState = {};

// üíé –°–ò–°–¢–ï–ú–ê –ü–û–î–ü–ò–°–û–ö –ò –õ–ò–ú–ò–¢–û–í
const SUBSCRIPTION_PLANS = {
    free: {
        name: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è',
        daily_photos: 1,
        daily_ai_questions: 3,
        monthly_workouts: 1,
        priority_support: false,
        features: ['–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', '–†—É—á–Ω–æ–π –≤–≤–æ–¥ (–¥–æ 7 –¥–Ω–µ–π)', '–ò—Å—Ç–æ—Ä–∏—è —Ç–æ–ª—å–∫–æ 7 –¥–Ω–µ–π']
    },
    premium: {
        name: '–ü—Ä–µ–º–∏—É–º',
        daily_photos: -1,
        daily_ai_questions: 100,
        monthly_workouts: -1,
        priority_support: false,
        price: 199,
        features: [
            '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ',
            '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            '–ü–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è',
            '–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
            '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
            '–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è'
        ]
    },
    vip: {
        name: 'VIP',
        daily_photos: -1,
        daily_ai_questions: -1,
        monthly_workouts: -1,
        priority_support: true,
        price: 349,
        features: [
            '–í—Å–µ –∏–∑ Premium',
            '–ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫)',
            '–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
            '–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
            '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–µ—Å–∞',
            '–û—Ç—á–µ—Ç—ã –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü',
            '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ]
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É)
const getUserSubscription = async (telegramId) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ profiles
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegramId)
            .single();

        if (profileError || !profile) {
            logEvent('error', 'Profile not found for subscription check', { error: profileError?.toString(), telegramId });
            return { plan: 'free', is_active: true, user_id: null };
        }

        const { data, error } = await supabase
            .from('user_subscriptions')
            .select('*')
            .eq('user_id', profile.id)
            .single();
        
        if (error || !data) {
            // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é
            const newSubscription = {
                user_id: profile.id,
                plan: 'free',
                expires_at: null,
                is_active: true
            };
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
            await supabase
                .from('user_subscriptions')
                .insert(newSubscription)
                .select()
                .single();
            
            return newSubscription;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        if (data.expires_at && new Date(data.expires_at) < new Date()) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π
            await supabase
                .from('user_subscriptions')
                .update({ plan: 'free', is_active: false })
                .eq('user_id', profile.id);
            
            return { ...data, plan: 'free', is_active: false };
        }
        
        return data;
        
    } catch (error) {
        logEvent('error', 'Error getting user subscription', { error: error.toString(), telegramId });
        return { plan: 'free', expires_at: null, is_active: true, user_id: null };
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ)
const getTodayUsage = async (telegramId) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegramId)
            .single();

        if (profileError || !profile) {
            logEvent('error', 'Profile not found for usage check', { error: profileError?.toString(), telegramId });
            return {
                photos_analyzed: 0,
                ai_questions_asked: 0,
                workouts_generated: 0,
                manual_entries: 0
            };
        }

        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
        
        const { data, error } = await supabase
            .from('daily_usage')
            .select('*')
            .eq('user_id', profile.id)
            .eq('date', today)
            .single();
        
        if (error || !data) {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
            const newUsage = {
                user_id: profile.id,
                date: today,
                photos_analyzed: 0,
                ai_questions_asked: 0,
                workouts_generated: 0,
                manual_entries: 0
            };
            
            await supabase
                .from('daily_usage')
                .insert(newUsage);
            
            return newUsage;
        }
        
        return data;
        
    } catch (error) {
        logEvent('error', 'Error getting today usage', { error: error.toString(), telegramId });
        return {
            photos_analyzed: 0,
            ai_questions_asked: 0,
            workouts_generated: 0,
            manual_entries: 0
        };
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ)
const checkActionLimit = async (telegramId, action) => {
    try {
        const subscription = await getUserSubscription(telegramId);
        const usage = await getTodayUsage(telegramId);
        const limits = SUBSCRIPTION_PLANS[subscription.plan];
        
        switch (action) {
            case 'photo_analysis':
                if (limits.daily_photos === -1) return { allowed: true }; // –±–µ–∑–ª–∏–º–∏—Ç
                if (usage.photos_analyzed >= limits.daily_photos) {
                    return {
                        allowed: false,
                        message: `üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ (${limits.daily_photos}/–¥–µ–Ω—å).\n\nüíé –ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π –∑–∞ 199‚ÇΩ/–º–µ—Å—è—Ü!`,
                        upgrade_needed: true
                    };
                }
                break;
                
            case 'ai_question':
                if (limits.daily_ai_questions === -1) return { allowed: true }; // –±–µ–∑–ª–∏–º–∏—Ç
                if (usage.ai_questions_asked >= limits.daily_ai_questions) {
                    return {
                        allowed: false,
                        message: `üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ò–ò (${limits.daily_ai_questions}/–¥–µ–Ω—å).\n\nüíé –ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π –∑–∞ 199‚ÇΩ/–º–µ—Å—è—Ü!`,
                        upgrade_needed: true
                    };
                }
                break;
                
            case 'workout_generation':
                // –î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç
                if (!subscription.user_id) {
                    return { allowed: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' };
                }
                
                const thisMonth = new Date().toISOString().substring(0, 7); // YYYY-MM
                const { data: monthlyUsage } = await supabase
                    .from('daily_usage')
                    .select('workouts_generated')
                    .eq('user_id', subscription.user_id)
                    .gte('date', `${thisMonth}-01`)
                    .lt('date', `${thisMonth}-32`);
                
                const totalWorkouts = monthlyUsage?.reduce((sum, day) => sum + day.workouts_generated, 0) || 0;
                
                if (limits.monthly_workouts === -1) return { allowed: true }; // –±–µ–∑–ª–∏–º–∏—Ç
                if (totalWorkouts >= limits.monthly_workouts) {
                    return {
                        allowed: false,
                        message: `üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (${limits.monthly_workouts}/–º–µ—Å—è—Ü).\n\nüíé –ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π –∑–∞ 199‚ÇΩ/–º–µ—Å—è—Ü!`,
                        upgrade_needed: true
                    };
                }
                break;
        }
        
        return { allowed: true };
        
            } catch (error) {
        logEvent('error', 'Error checking action limit', { error: error.toString(), telegramId, action });
        return { allowed: true }; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    }
};

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ)
const incrementUsage = async (telegramId, action) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegramId)
            .single();

        if (profileError || !profile) {
            logEvent('error', 'Profile not found for usage increment', { error: profileError?.toString(), telegramId });
            return;
        }

        const today = new Date().toISOString().split('T')[0];
        
        let updateField = '';
        switch (action) {
            case 'photo_analysis':
                updateField = 'photos_analyzed';
                break;
            case 'ai_question':
                updateField = 'ai_questions_asked';
                break;
            case 'workout_generation':
                updateField = 'workouts_generated';
                break;
            case 'manual_entry':
                updateField = 'manual_entries';
                break;
            default:
                return;
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await supabase.rpc('increment_usage', {
            p_user_id: profile.id,
            p_date: today,
            p_field: updateField
        });
        
        logEvent('info', 'Usage incremented', { telegramId, userId: profile.id, action, field: updateField });
        
    } catch (error) {
        logEvent('error', 'Error incrementing usage', { error: error.toString(), telegramId, action });
    }
};

// üìä –°–ò–°–¢–ï–ú–ê –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò –í–ï–°–ê (VIP —Ñ–∏—á–∞)
const weightTrackingState = {};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ)
const saveWeightRecord = async (telegramId, weight, notes = '') => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegramId)
            .single();

        if (profileError || !profile) {
            logEvent('error', 'Profile not found for weight record', { error: profileError?.toString(), telegramId });
            return false;
        }

        const { data, error } = await supabase
            .from('weight_history')
            .insert({
                user_id: profile.id,
                weight_kg: parseFloat(weight),
                notes: notes,
                source: 'weekly_check',
                recorded_at: new Date().toISOString()
            });
        
        if (error) {
            logEvent('error', 'Error saving weight record', { error: error.toString(), telegramId, userId: profile.id });
            return false;
        }
        
        logEvent('info', 'Weight record saved', { telegramId, userId: profile.id, weight });
        return true;
        
    } catch (error) {
        logEvent('error', 'Exception saving weight record', { error: error.toString(), telegramId });
        return false;
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ)
const getWeightHistory = async (telegramId, limit = 10) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegramId)
            .single();

        if (profileError || !profile) {
            logEvent('error', 'Profile not found for weight history', { error: profileError?.toString(), telegramId });
            return [];
        }

        const { data, error } = await supabase
            .from('weight_history')
            .select('*')
            .eq('user_id', profile.id)
            .order('recorded_at', { ascending: false })
            .limit(limit);
        
        if (error) {
            logEvent('error', 'Error getting weight history', { error: error.toString(), telegramId, userId: profile.id });
            return [];
        }
        
        return data || [];
        
    } catch (error) {
        logEvent('error', 'Exception getting weight history', { error: error.toString(), telegramId });
        return [];
    }
};

// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–µ—Å–∞ —Å –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
const analyzeWeightProgress = async (telegramId, currentWeight) => {
    try {
        const weightHistory = await getWeightHistory(telegramId, 8); // 8 –Ω–µ–¥–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏
        const userProfile = await getUserProfile(telegramId);
        
        if (weightHistory.length < 2) {
            return `üéØ **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ê–ù–ê–õ–ò–¢–ò–ö–£ –í–ï–°–ê!**

–¢–µ–∫—É—â–∏–π –≤–µ—Å: **${currentWeight} –∫–≥**

–≠—Ç–æ –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–∑–≤–µ—à–∏–≤–∞—Ç—å—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ, –∏ —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.

üí° **–°–æ–≤–µ—Ç:** –í–∑–≤–µ—à–∏–≤–∞–π—Ç–µ—Å—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏.`;
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
        const weightData = weightHistory.map((record, index) => ({
            week: index + 1,
            weight: record.weight_kg,
            date: new Date(record.recorded_at).toLocaleDateString('ru-RU'),
            change: index === 0 ? 0 : (record.weight_kg - weightHistory[index - 1].weight_kg).toFixed(1)
        }));
        
        const prompt = `
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–Ω–∞–º–∏–∫—É –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ò–º—è: ${userProfile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ü–æ–ª: ${userProfile?.gender || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –í–æ–∑—Ä–∞—Å—Ç: ${userProfile?.age || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –ª–µ—Ç
- –†–æ—Å—Ç: ${userProfile?.height || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —Å–º
- –¶–µ–ª—å: ${userProfile?.goal || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–ò–°–¢–û–†–ò–Ø –í–ï–°–ê (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º):
${weightData.map(w => `–ù–µ–¥–µ–ª—è ${w.week}: ${w.weight} –∫–≥ (${w.change > 0 ? '+' : ''}${w.change} –∫–≥) - ${w.date}`).join('\n')}

–¢–ï–ö–£–©–ò–ô –í–ï–°: ${currentWeight} –∫–≥

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–Ω–¥ (—Ä–∞—Å—Ç–µ—Ç/–ø–∞–¥–∞–µ—Ç/—Å—Ç–∞–±–∏–ª–µ–Ω)
2. –û—Ü–µ–Ω–∏ —Ç–µ–º–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π/–±—ã—Å—Ç—Ä—ã–π/–º–µ–¥–ª–µ–Ω–Ω—ã–π)
3. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
4. –£–∫–∞–∂–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—è–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏
5. –ú–æ—Ç–∏–≤–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üìä **–ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –ó–ê ${weightHistory.length} –ù–ï–î–ï–õ–¨**

**–î–∏–Ω–∞–º–∏–∫–∞:** [–æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞]
**–¢–µ–º–ø:** [–æ—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–∏:** [–¥–∞/–Ω–µ—Ç –∏ –ø–æ—á–µ–º—É]

üéØ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
- [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é]
- [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏]
- [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã]

üí™ **–ú–û–¢–ò–í–ê–¶–ò–Ø:** [–æ–±–æ–¥—Ä—è—é—â–∏–µ —Å–ª–æ–≤–∞ –∏ –ø–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é]

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –∑–∞–±–æ—Ç–ª–∏–≤—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º!
`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const systemPrompt = '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —Ç—Ä–µ–Ω–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ –∏ –¥–∞–µ—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.';
        
        const analysis = await cachedOpenAICall(prompt, 'gpt-4o-mini', 1000, systemPrompt);
        
        return analysis;
        
    } catch (error) {
        logEvent('error', 'Error analyzing weight progress', { error: error.toString(), telegramId });
        return `üìä **–ê–ù–ê–õ–ò–ó –í–ï–°–ê**

–¢–µ–∫—É—â–∏–π –≤–µ—Å: **${currentWeight} –∫–≥**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–µ—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!`;
    }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –æ –≤–µ—Å–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è VIP)
const sendWeeklyWeightCheck = async (telegramId) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const subscription = await getUserSubscription(telegramId);
        if (subscription.plan !== 'vip') {
            logEvent('info', 'Skipping weight check for non-VIP user', { telegramId });
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        const today = new Date();
        const weekStart = new Date(today.setDate(today.getDate() - today.getDay()));
        const weekStartStr = weekStart.toISOString().split('T')[0];
        
        const { data: recentCheck } = await supabase
            .from('weight_history')
            .select('*')
            .eq('user_id', telegramId)
            .gte('recorded_at', weekStartStr)
            .limit(1);
        
        if (recentCheck && recentCheck.length > 0) {
            logEvent('info', 'User already recorded weight this week', { telegramId });
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚öñÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å', callback_data: 'record_weight' },
                        { text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: 'view_weight_history' }
                    ],
                    [
                        { text: '‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞', callback_data: 'weight_remind_tomorrow' }
                    ]
                ]
            }
        };
        
        const message = `üëë **VIP –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê**

üéØ –í—Ä–µ–º—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è!

–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∑–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å.

üí° **–°–æ–≤–µ—Ç:** –í–∑–≤–µ—à–∏–≤–∞–π—Ç–µ—Å—å —É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.

–ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
üí™ –ü–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é`;
        
        await smartSendMessage(telegramId, message, keyboard);
        
        logEvent('info', 'Weekly weight check sent', { telegramId });
        
    } catch (error) {
        logEvent('error', 'Error sending weekly weight check', { error: error.toString(), telegramId });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
const getAllVIPUsers = async () => {
    try {
        const { data, error } = await supabase
            .from('user_subscriptions')
            .select('user_id')
            .eq('plan', 'vip')
            .eq('is_active', true);
        
        if (error) {
            logEvent('error', 'Error getting VIP users', { error: error.toString() });
            return [];
        }
        
        return data.map(row => row.user_id);
        
    } catch (error) {
        logEvent('error', 'Exception getting VIP users', { error: error.toString() });
        return [];
    }
};

// –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
const sendWeeklyWeightChecksToAll = async () => {
    try {
        const vipUsers = await getAllVIPUsers();
        
        logEvent('info', 'Starting weekly weight checks for VIP users', { count: vipUsers.length });
        
        for (const userId of vipUsers) {
            await sendWeeklyWeightCheck(userId);
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å API
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        logEvent('info', 'Weekly weight checks completed', { sent: vipUsers.length });
        
    } catch (error) {
        logEvent('error', 'Error in mass weekly weight checks', { error: error.toString() });
    }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron job –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00)
cron.schedule('0 10 * * 0', async () => {
    logEvent('info', 'Starting scheduled weekly weight checks');
    await sendWeeklyWeightChecksToAll();
}, {
    timezone: "Europe/Moscow"
});

// üí∞ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï OpenAI –ó–ê–ü–†–û–°–û–í –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ 60-80%
const openaiCache = new Map();
const CACHE_EXPIRY_HOURS = 24; // –ö—ç—à –∂–∏–≤–µ—Ç 24 —á–∞—Å–∞
const MAX_CACHE_SIZE = 1000; // –ú–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
const createCacheKey = (prompt, model, maxTokens) => {
    // –°–æ–∑–¥–∞–µ–º —Ö—ç—à –∏–∑ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    const hash = crypto.createHash('md5').update(JSON.stringify({prompt, model, maxTokens})).digest('hex');
    return hash;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
const cleanExpiredCache = () => {
    const now = Date.now();
    const expiredKeys = [];
    
    openaiCache.forEach((value, key) => {
        if (now - value.timestamp > CACHE_EXPIRY_HOURS * 60 * 60 * 1000) {
            expiredKeys.push(key);
        }
    });
    
    expiredKeys.forEach(key => openaiCache.delete(key));
    
    // –ï—Å–ª–∏ –∫—ç—à —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (openaiCache.size > MAX_CACHE_SIZE) {
        const sortedEntries = Array.from(openaiCache.entries())
            .sort((a, b) => a[1].timestamp - b[1].timestamp);
        
        const toDelete = sortedEntries.slice(0, openaiCache.size - MAX_CACHE_SIZE);
        toDelete.forEach(([key]) => openaiCache.delete(key));
    }
    
    logEvent('info', 'Cache cleanup completed', { 
        cacheSize: openaiCache.size, 
        deletedExpired: expiredKeys.length 
    });
};

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI
const cachedOpenAICall = async (prompt, model = 'gpt-4o-mini', maxTokens = 1500, systemPrompt = '') => {
    try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
        const cacheKey = createCacheKey(`${systemPrompt}|${prompt}`, model, maxTokens);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cached = openaiCache.get(cacheKey);
        if (cached && Date.now() - cached.timestamp < CACHE_EXPIRY_HOURS * 60 * 60 * 1000) {
            logEvent('info', 'OpenAI cache hit', { cacheKey: cacheKey.substring(0, 8) });
            return cached.response;
        }
        
        // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        const messages = [];
        if (systemPrompt) {
            messages.push({ role: 'system', content: systemPrompt });
        }
        messages.push({ role: 'user', content: prompt });
        
        const response = await withTimeout(
            openai.chat.completions.create({
                model: model,
                messages: messages,
                max_tokens: maxTokens,
                temperature: 0.7
            }),
            15000
        );
        
        const result = response.choices[0].message.content;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        openaiCache.set(cacheKey, {
            response: result,
            timestamp: Date.now()
        });
        
        logEvent('info', 'OpenAI API call and cache save', { 
            cacheKey: cacheKey.substring(0, 8),
            cacheSize: openaiCache.size 
        });
        
        return result;
        
    } catch (error) {
        logEvent('error', 'Cached OpenAI call failed', { error: error.toString() });
        throw error;
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(cleanExpiredCache, 60 * 60 * 1000);

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å OpenAI Vision
const cachedImageAnalysis = async (imageUrl, prompt, model = 'gpt-4o-mini', maxTokens = 1500) => {
    try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–º–ø—Ç–∞
        const cacheKey = createCacheKey(`image:${imageUrl}|${prompt}`, model, maxTokens);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cached = openaiCache.get(cacheKey);
        if (cached && Date.now() - cached.timestamp < CACHE_EXPIRY_HOURS * 60 * 60 * 1000) {
            logEvent('info', 'Image analysis cache hit', { cacheKey: cacheKey.substring(0, 8) });
            return cached.response;
        }
        
        // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI Vision
        const response = await withTimeout(
            openai.chat.completions.create({
                model: model,
                messages: [
                    {
                        role: 'user',
                        content: [
                            { type: 'text', text: prompt },
                            { type: 'image_url', image_url: { url: imageUrl } }
                        ]
                    }
                ],
                max_tokens: maxTokens,
                temperature: 0.3 // –ú–µ–Ω—å—à–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã
            }),
            20000 // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        );
        
        const result = response.choices[0].message.content;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        openaiCache.set(cacheKey, {
            response: result,
            timestamp: Date.now()
        });
        
        logEvent('info', 'Image analysis API call and cache save', { 
            cacheKey: cacheKey.substring(0, 8),
            cacheSize: openaiCache.size 
        });
        
        return result;
        
    } catch (error) {
        logEvent('error', 'Cached image analysis failed', { error: error.toString() });
        throw error;
    }
};

// --- Typing Indicator and Streaming Functions ---
const showTyping = async (chat_id, duration = 3000) => {
    try {
        await bot.sendChatAction(chat_id, 'typing');
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ typing action –∏—Å—Ç–µ–∫–∞–µ—Ç
        const interval = setInterval(() => {
            bot.sendChatAction(chat_id, 'typing');
        }, 4000);
        
        setTimeout(() => {
            clearInterval(interval);
        }, duration);
    } catch (error) {
        console.error('Error showing typing indicator:', error);
    }
};

const streamMessage = async (chat_id, fullText, options = {}) => {
    try {
        const chars = fullText.trim().split('');
        if (chars.length <= 15) { // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            return await bot.sendMessage(chat_id, fullText, options);
        }

        // üöÄ –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î: –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è + —É–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        const UPDATE_INTERVAL_MS = 75; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 75–º—Å
        let lastUpdateTime = 0;
        let accumulatedText = '';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const sentMessage = await bot.sendMessage(chat_id, '‚úçÔ∏è', options);
        accumulatedText = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞

        for (let i = 0; i < chars.length; i++) {
            accumulatedText += chars[i];
            const now = Date.now();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
            if (now - lastUpdateTime > UPDATE_INTERVAL_MS || i === chars.length - 1) {
                try {
                    await bot.editMessageText(accumulatedText, {
                        chat_id: chat_id,
                        message_id: sentMessage.message_id,
                        ...options
                    });
                    lastUpdateTime = now; // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                } catch (editError) {
                    if (!editError.message.includes('message is not modified')) {
                        console.warn('Stream hybrid update error:', editError.message);
                    }
                }
            }
             // –ú–∏–∫—Ä–æ-–ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ –±—ã–ª —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –¥–ª—è CPU.
            await new Promise(resolve => setTimeout(resolve, 1));
        }

        return sentMessage;
    } catch (error) {
        console.error('Error in streamMessage:', error);
        return await bot.sendMessage(chat_id, fullText, options);
    }
};

// –£–±—Ä–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è streamLongMessage - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ streamMessage –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

const shouldUseStreaming = (text) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º streaming –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤ (–≥–∏–±—Ä–∏–¥–Ω—ã–π –≤—ã–≤–æ–¥)
    return text && typeof text === 'string' && text.trim().length > 15;
};

const smartSendMessage = async (chat_id, text, options = {}) => {
    if (shouldUseStreaming(text)) {
        return await streamMessage(chat_id, text, options);
    } else {
        return await bot.sendMessage(chat_id, text, options);
    }
};

// –§—É–Ω–∫—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
const formatAIResponse = (text) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let formatted = text;
    
    // –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    formatted = formatted.replace(/\n([–ê-–Ø])/g, '\n\n$1');
    
    // –í—ã–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    formatted = formatted.replace(/([0-9,]+\s*(–∫–∫–∞–ª|–∫–≥|–≥|–º–ª|–∫–º|–º–∏–Ω|—Ä–∞–∑|–ø–æ–¥—Ö–æ–¥|–¥–µ–Ω—å|–Ω–µ–¥–µ–ª—è|–º–µ—Å—è—Ü))/gi, '`$1`');
    formatted = formatted.replace(/(–∫–∞–ª–æ—Ä–∏—è|–∫–∞–ª–æ—Ä–∏–∏|–∫–∞–ª–æ—Ä–∏–π|–±–µ–ª–∫–∏|–∂–∏—Ä—ã|—É–≥–ª–µ–≤–æ–¥—ã|–ö–ë–ñ–£|–ë–ñ–£)/gi, '`$1`');
    formatted = formatted.replace(/(–∑–∞–≤—Ç—Ä–∞–∫|–æ–±–µ–¥|—É–∂–∏–Ω|–ø–µ—Ä–µ–∫—É—Å)/gi, '`$1`');
    
    // –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    formatted = formatted.replace(/^([–ê-–Ø][^:]*:)/gm, '**$1**');
    
    // –£–ª—É—á—à–∞–µ–º —Å–ø–∏—Å–∫–∏
    formatted = formatted.replace(/^- /gm, '‚Ä¢ ');
    formatted = formatted.replace(/^(\d+)\. /gm, '**$1.** ');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    formatted = formatted.replace(/\*\*(–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–°–æ–≤–µ—Ç—ã|–í–∞–∂–Ω–æ|–í–Ω–∏–º–∞–Ω–∏–µ)\*\*/gi, 'üí° **$1**');
    formatted = formatted.replace(/\*\*(–ü–∏—Ç–∞–Ω–∏–µ|–†–∞—Ü–∏–æ–Ω|–î–∏–µ—Ç–∞)\*\*/gi, 'üçΩÔ∏è **$1**');
    formatted = formatted.replace(/\*\*(–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏|–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è|–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)\*\*/gi, 'üí™ **$1**');
    formatted = formatted.replace(/\*\*(–ó–¥–æ—Ä–æ–≤—å–µ|–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)\*\*/gi, 'üè• **$1**');
    formatted = formatted.replace(/\*\*(–†–µ–∑—É–ª—å—Ç–∞—Ç|–ò—Ç–æ–≥|–ó–∞–∫–ª—é—á–µ–Ω–∏–µ)\*\*/gi, 'üéØ **$1**');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ä–∞–º–∫—É –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
    if (formatted.length > 200) {
        formatted = `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  ü§ñ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢**  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${formatted}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüí¨ *–ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã? –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!*`;
    }
    
    return formatted;
};

const getUserProfile = async (telegramId) => {
    const { data, error } = await withDatabaseErrorHandling(() => 
        supabase.from('profiles').select('*').eq('telegram_id', telegramId).single()
    );
    return data;
};

const formatUserProgramToMarkdown = (program) => {
    let markdown = `*${program.title}*\n\n`;
    markdown += `_${program.description}_\n\n`;

    if (program.weeks) {
        program.weeks.forEach(weekData => {
            markdown += `*–ù–µ–¥–µ–ª—è ${weekData.week}*\n`;
            weekData.days.forEach(day => {
                markdown += `*${day.title}*\n`;
                day.exercises.forEach(ex => {
                    markdown += `  - ${ex.name}: ${ex.sets_reps}${ex.weight ? ` (${ex.weight})` : ''}\n`;
                });
            });
            markdown += '\n';
        });
    }

    if (program.blocks) {
        program.blocks.forEach(blockData => {
            markdown += `*–ë–ª–æ–∫ ${blockData.block}*\n`;
            blockData.trainings.forEach(training => {
                markdown += `*${training.title}*\n`;
                training.exercises.forEach(ex => {
                    markdown += `  - ${ex.name}: ${ex.sets_reps} (${ex.intensity})\n`;
                });
            });
            markdown += '\n';
        });
    }
    
    if (program.week_7) {
        markdown += `*${program.week_7.title}*\n`;
        program.week_7.days.forEach(day => {
            markdown += `*${day.title}*\n`;
            day.exercises.forEach(ex => {
                markdown += `  - ${ex.name}: ${ex.sets_reps} (${ex.weight})\n`;
            });
        });
        markdown += '\n';
    }

    return markdown;
};

const generatePersonalizedWorkoutPlan = async (userProfile, goal, experience) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        const allExercises = [];
        
        Object.values(USER_WORKOUT_PROGRAMS).forEach(category => {
            Object.values(category).forEach(gender => {
                Object.values(gender).forEach(program => {
                    if (program.weeks) {
                        program.weeks.forEach(week => {
                            week.days.forEach(day => {
                                allExercises.push(...day.exercises);
                            });
                        });
                    }
                    if (program.blocks) {
                        program.blocks.forEach(block => {
                            block.trainings.forEach(training => {
                                allExercises.push(...training.exercises);
                            });
                        });
                    }
                });
            });
        });

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        const uniqueExercises = allExercises.filter((exercise, index, self) => 
            index === self.findIndex(e => e.name === exercise.name)
        );

        const prompt = `
–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä. –°–æ—Å—Ç–∞–≤—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ:

–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ò–º—è: ${userProfile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ü–æ–ª: ${userProfile?.gender || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –í–æ–∑—Ä–∞—Å—Ç: ${userProfile?.age || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –í–µ—Å: ${userProfile?.weight || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–≥
- –†–æ—Å—Ç: ${userProfile?.height || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —Å–º
- –¶–µ–ª—å: ${goal}
- –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: ${experience}

–î–û–°–¢–£–ü–ù–´–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø (–≤—ã–±–µ—Ä–∏ —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ):
${uniqueExercises.slice(0, 50).map(ex => `- ${ex.name}: ${ex.sets_reps || ''} ${ex.intensity ? `(${ex.intensity})` : ''}`).join('\n')}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ—Å—Ç–∞–≤—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ 3-4 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é
2. –£—á—Ç–∏ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
4. –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
5. –î–æ–±–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–¥—ã—Ö—É –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏
6. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
**–ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –¢–†–ï–ù–ò–†–û–í–û–ö**

**–î–µ–Ω—å 1 - [–ù–∞–∑–≤–∞–Ω–∏–µ]**
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –ø–æ–¥—Ö–æ–¥—ã x –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–æ—Ç–¥—ã—Ö)
- ...

**–î–µ–Ω—å 2 - –û—Ç–¥—ã—Ö**

**–î–µ–Ω—å 3 - [–ù–∞–∑–≤–∞–Ω–∏–µ]**
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –ø–æ–¥—Ö–æ–¥—ã x –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–æ—Ç–¥—ã—Ö)
- ...

**–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
- –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
- –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
- –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ç–µ—Ö–Ω–∏–∫–∏
`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI
        const systemPrompt = '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–µ—à—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.';
        
        return await cachedOpenAICall(prompt, 'gpt-4o-mini', 1500, systemPrompt);
    } catch (error) {
        logEvent('error', 'Error generating personalized workout plan', { error: error.toString() });
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
};

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    try {
        if (text === '/start') {
            // ... existing code ...
        } else if (msg.entities && msg.entities[0].type === 'bot_command') {
            // ... existing code ...
        } else if (msg.text && msg.text.startsWith('/')) {
            
            // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–µ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            if (text === '/test_weight_analytics') {
                const subscription = await getUserSubscription(userId);
                if (subscription.plan !== 'vip') {
                    await bot.sendMessage(chatId, 'üëë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\nüíé –ü–æ–¥–∫–ª—é—á–∏—Ç–µ VIP –∑–∞ 349‚ÇΩ/–º–µ—Å—è—Ü –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –≤–µ—Å–∞!');
                    return;
                }
                
                await sendWeeklyWeightCheck(userId);
                await bot.sendMessage(chatId, 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                return;
            }
            
            // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if (text === '/my_plan' || text === '/subscription') {
                const subscription = await getUserSubscription(userId);
                const usage = await getTodayUsage(userId);
                const plan = SUBSCRIPTION_PLANS[subscription.plan];
                
                let message = `üíé **–í–ê–® –¢–ê–†–ò–§–ù–´–ô –ü–õ–ê–ù**\n\n`;
                message += `üéØ **–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:** ${plan.name}\n`;
                
                if (subscription.plan !== 'free') {
                    message += `üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${plan.price}‚ÇΩ/–º–µ—Å—è—Ü\n`;
                    if (subscription.expires_at) {
                        const expiryDate = new Date(subscription.expires_at).toLocaleDateString('ru-RU');
                        message += `üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** ${expiryDate}\n`;
                    }
                }
                
                message += `\nüìä **–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –°–ï–ì–û–î–ù–Ø:**\n`;
                message += `üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ: ${usage.photos_analyzed}/${plan.daily_photos === -1 ? '‚àû' : plan.daily_photos}\n`;
                message += `ü§ñ –í–æ–ø—Ä–æ—Å—ã –ò–ò: ${usage.ai_questions_asked}/${plan.daily_ai_questions === -1 ? '‚àû' : plan.daily_ai_questions}\n`;
                
                message += `\n‚ú® **–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –¢–ê–†–ò–§–ê:**\n`;
                plan.features.forEach(feature => {
                    message += `‚Ä¢ ${feature}\n`;
                });
                
                if (subscription.plan === 'free') {
                    message += `\nüöÄ **–£–õ–£–ß–®–ò–¢–¨ –ü–õ–ê–ù:**\n`;
                    message += `üí∞ Premium (199‚ÇΩ/–º–µ—Å) - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n`;
                    message += `üëë VIP (349‚ÇΩ/–º–µ—Å) - –ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–µ—Å–∞, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`;
                }
                
                await smartSendMessage(chatId, message, { parse_mode: 'Markdown' });
                return;
            }
            
            // ... existing code ...
            
        } else if (msg.text) {
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –¥–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (weightTrackingState[userId]?.step === 'waiting_weight') {
                const weightInput = msg.text.trim().replace(',', '.');
                const weight = parseFloat(weightInput);
                
                if (!validateUserInput.weight(weight)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 300 –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5)');
                    return;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
                const saved = await saveWeightRecord(userId, weight);
                if (!saved) {
                    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                    return;
                }
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                delete weightTrackingState[userId];
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞
                await showTyping(chatId, 5000);
                await bot.sendMessage(chatId, 'ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...');
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                const analysis = await analyzeWeightProgress(userId, weight);
                
                await smartSendMessage(chatId, analysis, { parse_mode: 'Markdown' });
                
                logEvent('info', 'Weight recorded and analyzed', { userId, weight });
                return;
            }
            
            // ... existing code for other text messages ...
            
        } else if (msg.callback_query) {
            const callbackQuery = msg.callback_query;
            
            if (callbackQuery.data.startsWith('get_workout_plan_')) {
                const [_, goal, gender, experience] = callbackQuery.data.split('_');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                const limitCheck = await checkActionLimit(userId, 'workout_generation');
                if (!limitCheck.allowed) {
                    await bot.sendMessage(chatId, limitCheck.message);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userProfile = await getUserProfile(userId);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                await showTyping(chatId, 8000);
                await bot.sendMessage(chatId, 'ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –ø–æ–º–æ—â—å—é –ò–ò
                const personalizedPlan = await generatePersonalizedWorkoutPlan(userProfile, goal, experience);
                
                await smartSendMessage(chatId, personalizedPlan, { parse_mode: 'Markdown' });
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await incrementUsage(userId, 'workout_generation');
                
            } else if (callbackQuery.data === 'record_weight') {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ (VIP —Ñ–∏—á–∞)
                const subscription = await getUserSubscription(userId);
                if (subscription.plan !== 'vip') {
                    await bot.sendMessage(chatId, 'üëë –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–µ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\nüíé –ü–æ–¥–∫–ª—é—á–∏—Ç–µ VIP –∑–∞ 349‚ÇΩ/–º–µ—Å—è—Ü –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò-–¥–∏–µ—Ç–æ–ª–æ–≥–∞.');
                    return;
                }
                
                weightTrackingState[userId] = { step: 'waiting_weight' };
                
                await bot.sendMessage(chatId, '‚öñÔ∏è **–ó–ê–ü–ò–°–¨ –í–ï–°–ê**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5):\n\nüí° –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–∑–≤–µ—à–∏–≤–∞–π—Ç–µ—Å—å —É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫');
                
            } else if (callbackQuery.data === 'view_weight_history') {
                // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞ (VIP —Ñ–∏—á–∞)
                const subscription = await getUserSubscription(userId);
                if (subscription.plan !== 'vip') {
                    await bot.sendMessage(chatId, 'üëë –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\nüíé –ü–æ–¥–∫–ª—é—á–∏—Ç–µ VIP –∑–∞ 349‚ÇΩ/–º–µ—Å—è—Ü.');
                    return;
                }
                
                const weightHistory = await getWeightHistory(userId, 12);
                
                if (weightHistory.length === 0) {
                    await bot.sendMessage(chatId, 'üìä **–ò–°–¢–û–†–ò–Ø –í–ï–°–ê**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–µ—Å–µ.\n\n‚öñÔ∏è –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!');
                    return;
                }
                
                let historyMessage = 'üìä **–ò–°–¢–û–†–ò–Ø –í–ï–°–ê**\n\n';
                
                weightHistory.forEach((record, index) => {
                    const date = new Date(record.recorded_at).toLocaleDateString('ru-RU');
                    const change = index < weightHistory.length - 1 ? 
                        (record.weight_kg - weightHistory[index + 1].weight_kg).toFixed(1) : '0.0';
                    const changeIcon = parseFloat(change) > 0 ? 'üìà' : parseFloat(change) < 0 ? 'üìâ' : '‚û°Ô∏è';
                    
                    historyMessage += `${changeIcon} **${record.weight_kg} –∫–≥** (${parseFloat(change) > 0 ? '+' : ''}${change} –∫–≥) - ${date}\n`;
                });
                
                historyMessage += '\nüí° –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–µ—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!';
                
                await smartSendMessage(chatId, historyMessage, { parse_mode: 'Markdown' });
                
            } else if (callbackQuery.data === 'weight_remind_tomorrow') {
                // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞
                await bot.sendMessage(chatId, '‚è∞ –•–æ—Ä–æ—à–æ! –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞–≤—Ç—Ä–∞ –æ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞.\n\nüí° –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–∑–≤–µ—à–∏–≤–∞—Ç—å—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ.');
                
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞
                // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            }
        }
    } catch (error) {
        logEvent('error', `Callback query processing error for data: ${callbackQuery.data}`, {
            error: error.toString(),
            stack: error.stack
        });
    }
});

// üöÄ –§–£–ù–ö–¶–ò–Ø –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê
const setupBot = (app) => {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (Railway)
    if (process.env.NODE_ENV === 'production') {
        const webhookUrl = `${process.env.RAILWAY_STATIC_URL}/webhook/${process.env.TELEGRAM_BOT_TOKEN}`;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        bot.setWebHook(webhookUrl).then(() => {
            logEvent('info', 'Webhook set successfully', { webhookUrl });
        }).catch((error) => {
            logEvent('error', 'Failed to set webhook', { error: error.toString() });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
        app.post(`/webhook/${process.env.TELEGRAM_BOT_TOKEN}`, (req, res) => {
            bot.processUpdate(req.body);
            res.sendStatus(200);
        });
        
        logEvent('info', 'Bot configured for production with webhook');
    } else {
        // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - polling
        bot.startPolling({
            interval: 300,
            params: {
                timeout: 10
            }
        }).then(() => {
            logEvent('info', 'Bot started with polling');
        }).catch((error) => {
            logEvent('error', 'Failed to start polling', { error: error.toString() });
        });
        
        logEvent('info', 'Bot configured for development with polling');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    setInterval(cleanExpiredCache, 2 * 60 * 60 * 1000);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º cron job –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–µ—Å–∞ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00 –ú–°–ö)
    cron.schedule('0 10 * * 0', async () => {
        await sendWeeklyWeightChecksToAll();
    }, {
        timezone: "Europe/Moscow"
    });
    
    logEvent('info', 'Bot setup completed successfully');
};

// üì¶ –≠–ö–°–ü–û–†–¢ –ú–û–î–£–õ–Ø
module.exports = {
    setupBot
};
