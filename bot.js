const TelegramBot = require('node-telegram-bot-api');
const supabase = require('./supabaseClient');
const OpenAI = require('openai');
const crypto = require('crypto');
const cron = require('node-cron');

require('dotenv').config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
    throw new Error('Telegram Bot Token or OpenAI API Key is not defined in .env file');
}

// ü§ñ Telegram Bot —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const bot = new TelegramBot(token, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    logEvent('error', 'Telegram polling error', { 
        error: error.message,
        code: error.code 
    });
});

const openai = new OpenAI({ apiKey: openaiApiKey });

// === üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ú–û–î–£–õ–ò ===

// üö® 1. ERROR HANDLING & STABILITY
const withErrorHandling = async (apiCall, fallbackMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.') => {
    try {
        return await apiCall();
    } catch (error) {
        console.error('API Error:', error);
        return { success: false, error: fallbackMessage, details: error.message };
    }
};

const withTimeout = (promise, timeoutMs = 30000) => {
    return Promise.race([
        promise,
        new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Request timeout')), timeoutMs)
        )
    ]);
};

// üö´ 2. RATE LIMITING (Anti-spam protection)
const userRateLimits = new Map();
const RATE_LIMIT_WINDOW = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
const RATE_LIMIT_MAX_REQUESTS = 30; // 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

const checkRateLimit = (userId) => {
    const now = Date.now();
    const userRequests = userRateLimits.get(userId) || [];
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const recentRequests = userRequests.filter(timestamp => now - timestamp < RATE_LIMIT_WINDOW);
    
    if (recentRequests.length >= RATE_LIMIT_MAX_REQUESTS) {
        return false; // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    }
    
    recentRequests.push(now);
    userRateLimits.set(userId, recentRequests);
    return true; // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
};

// ‚úÖ 3. DATA VALIDATION
const validateUserInput = {
    weight: (value) => {
        const num = parseFloat(value);
        return !isNaN(num) && num > 0 && num < 300;
    },
    height: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 100 && num < 250;
    },
    age: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 120;
    },
    waterAmount: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 5000;
    },
    calories: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 10000;
    },
    name: (value) => {
        return typeof value === 'string' && value.length >= 2 && value.length <= 50 && /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/.test(value);
    }
};

// üìù 4. LOGGING SYSTEM
const logEvent = (level, message, meta = {}) => {
    const timestamp = new Date().toISOString();
    const logEntry = {
        timestamp,
        level,
        message,
        ...meta
    };
    
    console.log(`[${timestamp}] ${level.toUpperCase()}: ${message}`, meta);
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–∞–π–ª –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
};

// üóÑÔ∏è 5. DATABASE ERROR HANDLING
const withDatabaseErrorHandling = async (operation, fallbackMessage = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.') => {
    try {
        const result = await operation();
        if (result.error) {
            logEvent('error', 'Database operation failed', { 
                error: result.error.message, 
                code: result.error.code 
            });
            return { success: false, error: fallbackMessage, details: result.error };
        }
        return { success: true, data: result.data };
    } catch (error) {
        logEvent('error', 'Database exception', { error: error.toString() });
        return { success: false, error: fallbackMessage, details: error };
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    logEvent('error', 'Unhandled Rejection', { reason: reason.toString(), promise });
});

process.on('uncaughtException', (error) => {
    logEvent('error', 'Uncaught Exception', { error: error.toString(), stack: error.stack });
});

// üöÄ GRACEFUL SHUTDOWN –¥–ª—è Railway
process.on('SIGTERM', () => {
    logEvent('info', 'Received SIGTERM, shutting down gracefully');
    console.log('üîÑ Railway –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    setTimeout(() => {
        process.exit(0);
    }, 5000);
});

process.on('SIGINT', () => {
    logEvent('info', 'Received SIGINT, shutting down gracefully');
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    process.exit(0);
});

// üìä 6. HEALTH CHECK ENDPOINT
const performHealthCheck = async () => {
    const healthStatus = {
        timestamp: new Date().toISOString(),
        status: 'healthy',
        services: {}
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
    try {
        await withTimeout(openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [{ role: 'user', content: 'test' }],
            max_tokens: 1
        }), 5000);
        healthStatus.services.openai = 'healthy';
    } catch (error) {
        healthStatus.services.openai = 'unhealthy';
        healthStatus.status = 'degraded';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
    try {
        const { error } = await supabase.from('profiles').select('count').limit(1);
        healthStatus.services.database = error ? 'unhealthy' : 'healthy';
        if (error) healthStatus.status = 'degraded';
    } catch (error) {
        healthStatus.services.database = 'unhealthy';
        healthStatus.status = 'degraded';
    }

    logEvent('info', 'Health check completed', healthStatus);
    return healthStatus;
};

// In-memory states
const registrationState = {};
const manualAddState = {};
const mealConfirmationCache = {};
const workoutPlanState = {};
const nutritionPlanState = {};
const waterInputState = {};
const profileEditState = {};
const challengeStepsState = {};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const questionState = {};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const medicalAnalysisState = {};

// --- Typing Indicator and Streaming Functions ---
const showTyping = async (chat_id, duration = 3000) => {
    try {
        await bot.sendChatAction(chat_id, 'typing');
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ typing action –∏—Å—Ç–µ–∫–∞–µ—Ç
        const interval = setInterval(() => {
            bot.sendChatAction(chat_id, 'typing');
        }, 4000);
        
        setTimeout(() => {
            clearInterval(interval);
        }, duration);
    } catch (error) {
        console.error('Error showing typing indicator:', error);
    }
};

const streamMessage = async (chat_id, fullText, options = {}) => {
    try {
        const chars = fullText.trim().split('');
        if (chars.length <= 15) { // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            return await bot.sendMessage(chat_id, fullText, options);
        }

        // üöÄ –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î: –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è + —É–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        const UPDATE_INTERVAL_MS = 75; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 75–º—Å
        let lastUpdateTime = 0;
        let accumulatedText = '';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const sentMessage = await bot.sendMessage(chat_id, '‚úçÔ∏è', options);
        accumulatedText = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞

        for (let i = 0; i < chars.length; i++) {
            accumulatedText += chars[i];
            const now = Date.now();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
            if (now - lastUpdateTime > UPDATE_INTERVAL_MS || i === chars.length - 1) {
                try {
                    await bot.editMessageText(accumulatedText, {
                        chat_id: chat_id,
                        message_id: sentMessage.message_id,
                        ...options
                    });
                    lastUpdateTime = now; // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                } catch (editError) {
                    if (!editError.message.includes('message is not modified')) {
                        console.warn('Stream hybrid update error:', editError.message);
                    }
                }
            }
             // –ú–∏–∫—Ä–æ-–ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ –±—ã–ª —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –¥–ª—è CPU.
            await new Promise(resolve => setTimeout(resolve, 1));
        }

        return sentMessage;
    } catch (error) {
        console.error('Error in streamMessage:', error);
        return await bot.sendMessage(chat_id, fullText, options);
    }
};

// –£–±—Ä–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è streamLongMessage - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ streamMessage –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

const shouldUseStreaming = (text) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º streaming –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤ (–≥–∏–±—Ä–∏–¥–Ω—ã–π –≤—ã–≤–æ–¥)
    return text && typeof text === 'string' && text.trim().length > 15;
};

const smartSendMessage = async (chat_id, text, options = {}) => {
    if (shouldUseStreaming(text)) {
        return await streamMessage(chat_id, text, options);
    } else {
        return await bot.sendMessage(chat_id, text, options);
    }
};

// –§—É–Ω–∫—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
const formatAIResponse = (text) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let formatted = text;
    
    // –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    formatted = formatted.replace(/\n([–ê-–Ø])/g, '\n\n$1');
    
    // –í—ã–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    formatted = formatted.replace(/([0-9,]+\s*(–∫–∫–∞–ª|–∫–≥|–≥|–º–ª|–∫–º|–º–∏–Ω|—Ä–∞–∑|–ø–æ–¥—Ö–æ–¥|–¥–µ–Ω—å|–Ω–µ–¥–µ–ª—è|–º–µ—Å—è—Ü))/gi, '`$1`');
    formatted = formatted.replace(/(–∫–∞–ª–æ—Ä–∏—è|–∫–∞–ª–æ—Ä–∏–∏|–∫–∞–ª–æ—Ä–∏–π|–±–µ–ª–∫–∏|–∂–∏—Ä—ã|—É–≥–ª–µ–≤–æ–¥—ã|–ö–ë–ñ–£|–ë–ñ–£)/gi, '`$1`');
    formatted = formatted.replace(/(–∑–∞–≤—Ç—Ä–∞–∫|–æ–±–µ–¥|—É–∂–∏–Ω|–ø–µ—Ä–µ–∫—É—Å)/gi, '`$1`');
    
    // –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    formatted = formatted.replace(/^([–ê-–Ø][^:]*:)/gm, '**$1**');
    
    // –£–ª—É—á—à–∞–µ–º —Å–ø–∏—Å–∫–∏
    formatted = formatted.replace(/^- /gm, '‚Ä¢ ');
    formatted = formatted.replace(/^(\d+)\. /gm, '**$1.** ');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    formatted = formatted.replace(/\*\*(–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–°–æ–≤–µ—Ç—ã|–í–∞–∂–Ω–æ|–í–Ω–∏–º–∞–Ω–∏–µ)\*\*/gi, 'üí° **$1**');
    formatted = formatted.replace(/\*\*(–ü–∏—Ç–∞–Ω–∏–µ|–†–∞—Ü–∏–æ–Ω|–î–∏–µ—Ç–∞)\*\*/gi, 'üçΩÔ∏è **$1**');
    formatted = formatted.replace(/\*\*(–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏|–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è|–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)\*\*/gi, 'üí™ **$1**');
    formatted = formatted.replace(/\*\*(–ó–¥–æ—Ä–æ–≤—å–µ|–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)\*\*/gi, 'üè• **$1**');
    formatted = formatted.replace(/\*\*(–†–µ–∑—É–ª—å—Ç–∞—Ç|–ò—Ç–æ–≥|–ó–∞–∫–ª—é—á–µ–Ω–∏–µ)\*\*/gi, 'üéØ **$1**');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ä–∞–º–∫—É –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
    if (formatted.length > 200) {
        formatted = `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  ü§ñ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢**  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${formatted}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüí¨ *–ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã? –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!*`;
    }
    
    return formatted;
};

// --- Helper Functions ---
const getDateRange = (period) => {
    const now = new Date();
    let startDate, endDate;
    
    if (period === 'today') {
        // –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
        startDate = new Date(now);
        startDate.setUTCHours(0, 0, 0, 0);
        startDate.setUTCDate(startDate.getUTCDate() - 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
        
        endDate = new Date(now);
        endDate.setUTCHours(23, 59, 59, 999);
        endDate.setUTCDate(endDate.getUTCDate() + 1); // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–º –¥–Ω–µ–º
    } else if (period === 'week') {
        const day = now.getUTCDay();
        const diff = now.getUTCDate() - day + (day === 0 ? -6 : 1);
        startDate = new Date(now);
        startDate.setUTCDate(diff);
        startDate.setUTCHours(0, 0, 0, 0);
        
        endDate = new Date(now);
        endDate.setUTCHours(23, 59, 59, 999);
    } else if (period === 'month') {
        startDate = new Date(now.getUTCFullYear(), now.getUTCMonth(), 1);
        startDate.setUTCHours(0, 0, 0, 0);
        
        endDate = new Date(now);
        endDate.setUTCHours(23, 59, 59, 999);
    }
    
    return { startDate, endDate };
};

const calculateAndSaveNorms = async (profile) => {
    try {
        if (!profile) throw new Error('Profile object is null or undefined.');

        const { telegram_id, gender, age, height_cm, weight_kg, goal } = profile;

        let bmr;
        if (gender === 'male') {
            bmr = 88.362 + (13.397 * parseFloat(weight_kg)) + (4.799 * height_cm) - (5.677 * age);
        } else { // female
            bmr = 447.593 + (9.247 * parseFloat(weight_kg)) + (3.098 * height_cm) - (4.330 * age);
        }

        // üî• –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
        const activityFactor = 1.4; // –ü–æ–≤—ã—à–µ–Ω —Å 1.2 –¥–æ 1.4 (–ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
        let daily_calories = bmr * activityFactor;

        switch (goal) {
            case 'lose_weight':
                daily_calories *= 0.80; // 20% –¥–µ—Ñ–∏—Ü–∏—Ç –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ö—É–¥–µ–Ω–∏—è
                break;
            case 'gain_mass':
                daily_calories *= 1.25; // 25% –∏–∑–±—ã—Ç–æ–∫ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã (–±—ã–ª–æ 15%)
                break;
        }

        const daily_protein = (daily_calories * 0.30) / 4;
        const daily_fat = (daily_calories * 0.30) / 9;
        const daily_carbs = (daily_calories * 0.40) / 4;

        const { error: updateError } = await supabase
            .from('profiles')
            .update({
                daily_calories: Math.round(daily_calories),
                daily_protein: Math.round(daily_protein),
                daily_fat: Math.round(daily_fat),
                daily_carbs: Math.round(daily_carbs)
            })
            .eq('telegram_id', telegram_id);

        if (updateError) throw updateError;
        
        console.log(`‚úÖ Daily norms calculated and saved for user ${telegram_id}`);

    } catch (error) {
        console.error(`Error calculating norms for user ${profile.telegram_id}:`, error.message);
    }
};

const recognizeFoodFromText = async (inputText) => {
    logEvent('info', 'Food text recognition started', { inputLength: inputText.length });
    
    return withErrorHandling(async () => {
        const response = await withTimeout(openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã –∏ –µ–µ –≤–µ—Å, –∏ –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "dish_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
  "ingredients": ["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2", "..."],
  "weight_g": –≤–µ—Å –±–ª—é–¥–∞ –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
  "calories": –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ),
  "protein": "–±–µ–ª–∫–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)",
  "fat": "–∂–∏—Ä—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)",
  "carbs": "—É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)"
}
–í–µ—Å –≤ JSON –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–µ—Å—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∫–∞–ª–æ—Ä–∏–∏, –ë–ñ–£, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã) —Ä–∞—Å—Å—á–∏—Ç–∞–π –¥–ª—è —ç—Ç–æ–≥–æ –≤–µ—Å–∞. –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON-–æ–±—ä–µ–∫—Ç–∞. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ –µ–¥–∞, –≤–µ—Ä–Ω–∏ JSON —Å "dish_name": "–Ω–µ –µ–¥–∞".`
                },
                {
                    role: 'user',
                    content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ –∏ –æ—Ü–µ–Ω–∏ –µ–≥–æ —Å–æ—Å—Ç–∞–≤ –∏ –ö–ë–ñ–£: "${inputText}"`,
                },
            ],
            max_tokens: 500,
        }), 15000);

        const content = response.choices[0].message.content;
        const jsonString = content.replace(/```json/g, '').replace(/```/g, '').trim();
        const parsedContent = JSON.parse(jsonString);

        if (parsedContent.dish_name === '–Ω–µ –µ–¥–∞') {
            logEvent('warn', 'Non-food text detected', { input: inputText });
            return { success: false, reason: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –≤ –≤–∞—à–µ–º –æ–ø–∏—Å–∞–Ω–∏–∏.' };
        }

        logEvent('info', 'Food text recognition successful', { 
            dish: parsedContent.dish_name, 
            calories: parsedContent.calories 
        });
        return { success: true, data: parsedContent };

    }, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
};

const recognizeFoodFromPhoto = async (photoUrl) => {
    logEvent('info', 'Food photo recognition started', { photoUrl });
    
    return withErrorHandling(async () => {
        const response = await withTimeout(openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "dish_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
  "ingredients": ["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2", "..."],
  "weight_g": –≤–µ—Å –±–ª—é–¥–∞ –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
  "calories": –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ),
  "protein": "–±–µ–ª–∫–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)",
  "fat": "–∂–∏—Ä—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)",
  "carbs": "—É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ)"
}
–ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON-–æ–±—ä–µ–∫—Ç–∞. –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –µ–¥–∞, –≤–µ—Ä–Ω–∏ JSON —Å "dish_name": "–Ω–µ –µ–¥–∞".`
                },
                {
                    role: 'user',
                    content: [
                        { type: 'text', text: '–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏? –û—Ü–µ–Ω–∏ —Å–æ—Å—Ç–∞–≤ –∏ –ö–ë–ñ–£.' },
                        {
                            type: 'image_url',
                            image_url: {
                                url: photoUrl,
                            },
                        },
                    ],
                },
            ],
            max_tokens: 500,
        }), 20000);

        const content = response.choices[0].message.content;
        const jsonString = content.replace(/```json/g, '').replace(/```/g, '').trim();
        const parsedContent = JSON.parse(jsonString);

        if (parsedContent.dish_name === '–Ω–µ –µ–¥–∞') {
            logEvent('warn', 'Non-food photo detected', { photoUrl });
            return { success: false, reason: '–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É.' };
        }

        logEvent('info', 'Food photo recognition successful', { 
            dish: parsedContent.dish_name, 
            calories: parsedContent.calories 
        });
        return { success: true, data: parsedContent };

    }, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
};

const generateWorkoutPlan = async (profileData, additionalData) => {
    try {
        const { first_name, gender, age, height_cm, weight_kg, goal } = profileData;
        const { experience, goal: workoutGoal, priority_zones, injuries, location, frequency, duration } = additionalData;

        console.log('Generating workout plan with OpenAI...');
        
        const systemPrompt = `–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é.

–ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê:
- –ò–º—è: ${first_name}
- –ü–æ–ª: ${gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}
- –í–æ–∑—Ä–∞—Å—Ç: ${age} –ª–µ—Ç
- –†–æ—Å—Ç: ${height_cm} —Å–º
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${weight_kg} –∫–≥
${additionalData.target_weight_kg ? `- –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: ${additionalData.target_weight_kg} –∫–≥` : ''}
${additionalData.timeframe_months ? `- –°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: ${additionalData.timeframe_months} –º–µ—Å—è—Ü–µ–≤` : ''}
- –û–±—â–∞—è —Ü–µ–ª—å: ${goal === 'lose_weight' ? '–ø–æ—Ö—É–¥–µ–Ω–∏–µ' : goal === 'gain_mass' ? '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã' : '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞'}
- –û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${experience}
- –¶–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${workoutGoal}
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã: ${priority_zones?.join(', ') || '–Ω–µ—Ç'}
- –¢—Ä–∞–≤–º—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${injuries || '–Ω–µ—Ç'}
- –ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${location}
- –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${frequency} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
- –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${duration} –º–∏–Ω—É—Ç

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–£:
1. –ü–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω–µ–π –æ—Ç–¥—ã—Ö–∞
2. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞
3. –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
4. –í–∫–ª—é—á–∏ —Ä–∞–∑–º–∏–Ω–∫—É –∏ –∑–∞–º–∏–Ω–∫—É
5. –û—Ç–≤–µ—Ç –¥–∞–π –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
# üèãÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è ${first_name}

## üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–¶–µ–ª—å:** [—Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫]
- **–£—Ä–æ–≤–µ–Ω—å:** [—É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞] 
- **–ß–∞—Å—Ç–æ—Ç–∞:** [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é]

## üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω

### –î–µ–Ω—å 1 - [–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏]
| –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ | –ü–æ–¥—Ö–æ–¥—ã | –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è | –û—Ç–¥—ã—Ö |
|------------|---------|------------|-------|
| [—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ] | [–ø–æ–¥—Ö–æ–¥—ã] | [–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è] | [–≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞] |

### –î–µ–Ω—å 2 - [–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –û—Ç–¥—ã—Ö]
[–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ]

[...–ø—Ä–æ–¥–æ–ª–∂–∏ –¥–ª—è –≤—Å–µ—Ö 7 –¥–Ω–µ–π]

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- [–≤–∞–∂–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é]
- [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫]
- [—Å–æ–≤–µ—Ç—ã –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é]`;

        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ.` }
            ],
            max_tokens: 2000,
        });

        const plan = response.choices[0].message.content;
        return { success: true, plan };

    } catch (error) {
        console.error('Error generating workout plan:', error);
        return { success: false, error: error.message };
    }
};

const generateNutritionPlan = async (profileData, additionalData) => {
    try {
        const { first_name, gender, age, height_cm, weight_kg, goal, daily_calories, daily_protein, daily_fat, daily_carbs } = profileData;
        const { preferences, activity, allergies, mealsCount } = additionalData;

        console.log('Generating nutrition plan with OpenAI...');
        
        const systemPrompt = `–¢—ã - –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é.

–ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê:
- –ò–º—è: ${first_name}
- –ü–æ–ª: ${gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}
- –í–æ–∑—Ä–∞—Å—Ç: ${age} –ª–µ—Ç
- –†–æ—Å—Ç: ${height_cm} —Å–º
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${weight_kg} –∫–≥
${profileData.target_weight_kg ? `- –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: ${profileData.target_weight_kg} –∫–≥` : ''}
${profileData.timeframe_months ? `- –°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: ${profileData.timeframe_months} –º–µ—Å—è—Ü–µ–≤` : ''}
- –¶–µ–ª—å: ${goal === 'lose_weight' ? '–ø–æ—Ö—É–¥–µ–Ω–∏–µ' : goal === 'gain_mass' ? '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã' : '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞'}
- –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: ${daily_calories} –∫–∫–∞–ª
- –ë–µ–ª–∫–∏: ${daily_protein} –≥
- –ñ–∏—Ä—ã: ${daily_fat} –≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${daily_carbs} –≥
- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activity}
- –ü–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${preferences}
- –ê–ª–ª–µ—Ä–≥–∏–∏: ${allergies || '–Ω–µ—Ç'}
- –ü—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å: ${mealsCount === 'three' ? '3 –æ—Å–Ω–æ–≤–Ω—ã—Ö' : '5-6 –º–∞–ª–µ–Ω—å–∫–∏—Ö'}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–£:
1. –ü–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π —Å 5 –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –ø–µ—Ä–µ–∫—É—Å, –æ–±–µ–¥, –ø–µ—Ä–µ–∫—É—Å, —É–∂–∏–Ω)
2. –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ö–ë–ñ–£ –≤ —Ä–∞–º–∫–∞—Ö –Ω–æ—Ä–º—ã (+/- 5%)
3. –£—á–µ—Ç –ø–∏—â–µ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –∞–ª–ª–µ—Ä–≥–∏–π
4. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –±–ª—é–¥
5. –û—Ç–≤–µ—Ç –¥–∞–π –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
# üçΩÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è ${first_name}

## üìä –î–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã
- **–ö–∞–ª–æ—Ä–∏–∏:** ${daily_calories} –∫–∫–∞–ª
- **–ë–µ–ª–∫–∏:** ${daily_protein} –≥
- **–ñ–∏—Ä—ã:** ${daily_fat} –≥  
- **–£–≥–ª–µ–≤–æ–¥—ã:** ${daily_carbs} –≥

## üìÖ –ù–µ–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é

### –î–µ–Ω—å 1
| –ü—Ä–∏–µ–º –ø–∏—â–∏ | –ë–ª—é–¥–æ | –ö–∞–ª–æ—Ä–∏–∏ | –ë–µ–ª–∫–∏ | –ñ–∏—Ä—ã | –£–≥–ª–µ–≤–æ–¥—ã |
|------------|-------|---------|-------|------|----------|
| –ó–∞–≤—Ç—Ä–∞–∫ | [–±–ª—é–¥–æ —Å –≤–µ—Å–æ–º] | [–∫–∫–∞–ª] | [–≥] | [–≥] | [–≥] |
| –ü–µ—Ä–µ–∫—É—Å | [–±–ª—é–¥–æ —Å –≤–µ—Å–æ–º] | [–∫–∫–∞–ª] | [–≥] | [–≥] | [–≥] |
| –û–±–µ–¥ | [–±–ª—é–¥–æ —Å –≤–µ—Å–æ–º] | [–∫–∫–∞–ª] | [–≥] | [–≥] | [–≥] |
| –ü–µ—Ä–µ–∫—É—Å | [–±–ª—é–¥–æ —Å –≤–µ—Å–æ–º] | [–∫–∫–∞–ª] | [–≥] | [–≥] | [–≥] |
| –£–∂–∏–Ω | [–±–ª—é–¥–æ —Å –≤–µ—Å–æ–º] | [–∫–∫–∞–ª] | [–≥] | [–≥] | [–≥] |
| **–ò–¢–û–ì–û** | | [–æ–±—â–∏–µ –∫–∫–∞–ª] | [–æ–±—â–∏–µ –≥] | [–æ–±—â–∏–µ –≥] | [–æ–±—â–∏–µ –≥] |

[...–ø—Ä–æ–¥–æ–ª–∂–∏ –¥–ª—è –≤—Å–µ—Ö 7 –¥–Ω–µ–π]

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- [—Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é]
- [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏]
- [–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –±–ª—é–¥–∞–º]`;

        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.` }
            ],
            max_tokens: 2500,
        });

        const plan = response.choices[0].message.content;
        return { success: true, plan };

    } catch (error) {
        console.error('Error generating nutrition plan:', error);
        return { success: false, error: error.message };
    }
};

const answerUserQuestionStream = async (chat_id, message_id, question, profileData = null) => {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const statusMessage = await bot.sendMessage(chat_id, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...');
        
        await new Promise(resolve => setTimeout(resolve, 800));
        await bot.editMessageText('üí≠ –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...', {
            chat_id: chat_id,
            message_id: statusMessage.message_id
        });

        let systemPrompt = `–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –ù–∞—á–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –¥–≤–æ–µ—Ç–æ—á–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", "–ü–∏—Ç–∞–Ω–∏–µ:", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
- –î–µ–ª–∞–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
- –í–∫–ª—é—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (–∫–∞–ª–æ—Ä–∏–∏, –≥—Ä–∞–º–º—ã, –º–∏–Ω—É—Ç—ã, –¥–Ω–∏)
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã "–∫–∞–ª–æ—Ä–∏–∏", "–±–µ–ª–∫–∏", "–∂–∏—Ä—ã", "—É–≥–ª–µ–≤–æ–¥—ã", "–ö–ë–ñ–£"
- –£–ø–æ–º–∏–Ω–∞–π –ø—Ä–∏–µ–º—ã –ø–∏—â–∏: "–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–ø–µ—Ä–µ–∫—É—Å"

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ª–æ–≥–∏—á–Ω–æ –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.`;

        if (profileData) {
            systemPrompt += `\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞):
- –ò–º—è: ${profileData.first_name}
- –ü–æ–ª: ${profileData.gender}, –í–æ–∑—Ä–∞—Å—Ç: ${profileData.age} –ª–µ—Ç
- –†–æ—Å—Ç: ${profileData.height_cm} —Å–º, –í–µ—Å: ${profileData.weight_kg} –∫–≥
- –¶–µ–ª—å: ${profileData.goal}`;
        }

        await new Promise(resolve => setTimeout(resolve, 1000));
        await bot.editMessageText('üß† –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...', {
            chat_id: chat_id,
            message_id: statusMessage.message_id
        });

        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: question }
            ],
            max_tokens: 800,
            temperature: 0.7,
        });

        const fullResponse = response.choices[0].message.content;
        
        await new Promise(resolve => setTimeout(resolve, 500));
        await bot.editMessageText('‚úçÔ∏è –û—Ñ–æ—Ä–º–ª—è—é –æ—Ç–≤–µ—Ç...', {
            chat_id: chat_id,
            message_id: statusMessage.message_id
        });

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        const initialText = `üé§ **–í–∞—à –≤–æ–ø—Ä–æ—Å:** "${question}"\n\n`;
        const beautifiedResponse = formatAIResponse(fullResponse);
        const finalText = initialText + beautifiedResponse;

        await new Promise(resolve => setTimeout(resolve, 500));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.editMessageText(finalText, {
            chat_id: chat_id,
            message_id: statusMessage.message_id,
            parse_mode: 'Markdown'
        });

        return { success: true };

    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ answerUserQuestionStream:', error);
        try {
            await bot.sendMessage(chat_id, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', e);
        }
        return { success: false, error: 'Failed to generate or send answer.' };
    }
};

// –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const answerUserQuestion = async (question, profileData = null) => {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏,
    // –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
    // –∏–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤.
    console.warn("–í—ã–∑–≤–∞–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è answerUserQuestion");
    return { success: false, answer: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏." };
};

// --- Voice Message Processing ---
const processVoiceMessage = async (fileUrl) => {
    const fs = require('fs');
    const path = require('path');
    
    let tempFilePath = null;
    
    try {
        console.log('Processing voice message with Whisper...');
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const response = await fetch(fileUrl);
        const arrayBuffer = await response.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        tempFilePath = path.join('/tmp', `voice_${Date.now()}.oga`);
        fs.writeFileSync(tempFilePath, buffer);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const audioStream = fs.createReadStream(tempFilePath);
        
        const transcription = await openai.audio.transcriptions.create({
            file: audioStream,
            model: 'whisper-1',
            language: 'ru',
        });

        return { success: true, text: transcription.text };
    } catch (error) {
        console.error('Error transcribing voice message:', error);
        return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' };
    } finally {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (tempFilePath && fs.existsSync(tempFilePath)) {
            try {
                fs.unlinkSync(tempFilePath);
            } catch (cleanupError) {
                console.error('Error cleaning up temp file:', cleanupError);
            }
        }
    }
};

// --- Universal AI Agent ---
const processUniversalMessage = async (messageText, profileData = null) => {
    try {
        console.log('Processing message with Universal AI Agent...');
        
        let systemPrompt = `–¢—ã ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ç–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ç–∏–ø. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç:

{
  "message_type": "—Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è",
  "content_analysis": "–∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è",
  "action_required": "–∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
  "extracted_data": {},
  "response_text": "–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
}

–¢–ò–ü–´ –°–û–û–ë–©–ï–ù–ò–ô:
1. "food" - –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã/–ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   - extracted_data: {"dish_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "estimated_weight": —á–∏—Å–ª–æ, "meal_description": "–ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"}
   - action_required: "analyze_food"

2. "water" - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∏—Ç—å–µ –≤–æ–¥—ã
   - extracted_data: {"amount_ml": —á–∏—Å–ª–æ, "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"}
   - action_required: "add_water"

3. "workout" - —Ä–∞—Å—Å–∫–∞–∑ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
   - extracted_data: {"workout_type": "—Ç–∏–ø", "duration": "–≤—Ä–µ–º—è", "exercises": ["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"], "intensity": "–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å"}
   - action_required: "log_workout"

4. "report_request" - –∑–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞
   - extracted_data: {"report_type": "daily|weekly|monthly"}
   - action_required: "generate_report"

5. "medical" - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ/–∞–Ω–∞–ª–∏–∑—ã
   - extracted_data: {"detected_parameters": ["–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"], "values": ["–∑–Ω–∞—á–µ–Ω–∏—è"]}
   - action_required: "analyze_medical"

6. "question" - –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö/–∑–¥–æ—Ä–æ–≤—å–µ
   - extracted_data: {"topic": "—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞", "question_type": "—Ç–∏–ø"}
   - action_required: "answer_question"

7. "mood_sharing" - —Ä–∞—Å—Å–∫–∞–∑ –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏/–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö
   - extracted_data: {"mood": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "energy_level": "—É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏", "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}
   - action_required: "supportive_response"

8. "general" - –æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
   - extracted_data: {}
   - action_required: "friendly_response"

–í–ê–ñ–ù–û: response_text –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º!`;

        if (profileData) {
            systemPrompt += `\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
- –ò–º—è: ${profileData.first_name}
- –ü–æ–ª: ${profileData.gender}
- –í–æ–∑—Ä–∞—Å—Ç: ${profileData.age} –ª–µ—Ç
- –†–æ—Å—Ç: ${profileData.height_cm} —Å–º
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${profileData.weight_kg} –∫–≥
${profileData.target_weight_kg ? `- –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: ${profileData.target_weight_kg} –∫–≥` : ''}
${profileData.timeframe_months ? `- –°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: ${profileData.timeframe_months} –º–µ—Å—è—Ü–µ–≤` : ''}
- –¶–µ–ª—å: ${profileData.goal}`;
        }

        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini', // –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"` }
            ],
            max_tokens: 300, // –£–º–µ–Ω—å—à–∏–ª–∏ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            temperature: 0.1, // –ë–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        });

        const content = response.choices[0].message.content;
        const jsonString = content.replace(/```json/g, '').replace(/```/g, '').trim();
        const parsedContent = JSON.parse(jsonString);

        return { success: true, data: parsedContent };

    } catch (error) {
        console.error('Error processing universal message:', error);
        return { success: false, reason: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' };
    }
};

// --- Medical Data Analysis ---
const analyzeMedicalData = async (medicalText, profileData = null) => {
    try {
        console.log('Analyzing medical data with AI...');
        
        let systemPrompt = `–¢—ã ‚Äî –≤—Ä–∞—á-–¥–∏–µ—Ç–æ–ª–æ–≥ –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.

–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç:
{
  "detected_parameters": ["—Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"],
  "analysis_summary": "–∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è",
  "nutrition_recommendations": {
    "foods_to_include": ["–ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å"],
    "foods_to_avoid": ["–ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å"],
    "supplements": ["—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–±–∞–≤–∫–∏"]
  },
  "health_alerts": ["–≤–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å"]
}`;

        if (profileData) {
            systemPrompt += `\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${profileData.gender}, ${profileData.age} –ª–µ—Ç, ${profileData.height_cm} —Å–º, ${profileData.weight_kg} –∫–≥`;
        }

        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: medicalText }
            ],
            max_tokens: 600,
        });

        const content = response.choices[0].message.content;
        const jsonString = content.replace(/```json/g, '').replace(/```/g, '').trim();
        const parsedContent = JSON.parse(jsonString);

        return { success: true, data: parsedContent };

    } catch (error) {
        console.error('Error analyzing medical data:', error);
        return { success: false, reason: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö' };
    }
};

// --- Workout Tracking Functions ---
const logWorkout = async (telegram_id, workoutData) => {
    try {
        console.log('Logging workout:', workoutData);
        console.log('Telegram ID:', telegram_id);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤
        const exercisesString = Array.isArray(workoutData.exercises) 
            ? workoutData.exercises.join(', ') 
            : workoutData.exercises || '';

        console.log('Exercises string:', exercisesString);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã workout_records
        const insertData = {
            telegram_id: String(telegram_id), // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            workout_type: workoutData.workout_type || 'general',
            duration_minutes: parseInt(workoutData.duration) || 30,
            exercises: exercisesString, // –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            intensity: workoutData.intensity || '—Å—Ä–µ–¥–Ω—è—è',
            calories_burned: parseInt(workoutData.calories_burned) || 0,
            notes: workoutData.notes || '',
            date: new Date().toISOString().split('T')[0]
        };

        console.log('Insert data:', insertData);

        const { data, error } = await supabase
            .from('workout_records')
            .insert({
                ...insertData,
                created_at: new Date().toISOString()
            });

        if (error) {
            console.error('Supabase error details:', error);
            console.error('Error code:', error.code);
            console.error('Error message:', error.message);
            console.error('Error hint:', error.hint);
            console.error('Error details:', error.details);
            console.error('Full error object:', JSON.stringify(error, null, 2));
            throw error;
        }

        console.log('Successfully inserted workout:', data);
        return { success: true, data };
    } catch (error) {
        console.error('Error logging workout:', error);
        console.error('Error type:', typeof error);
        console.error('Error constructor:', error.constructor.name);
        console.error('Full error:', JSON.stringify(error, null, 2));
        return { success: false, error: error.message || error.toString() || 'Unknown error' };
    }
};

const getWorkoutStats = async (telegram_id, period) => {
    try {
        const today = new Date();
        let startDate;

        switch (period) {
            case 'today':
                startDate = new Date(today.setHours(0, 0, 0, 0));
                break;
            case 'week':
                startDate = new Date(today.setDate(today.getDate() - 6));
                break;
            case 'month':
                startDate = new Date(today.setDate(today.getDate() - 29));
                break;
            default:
                startDate = new Date(today.setHours(0, 0, 0, 0));
        }

        const { data: workoutRecords, error } = await supabase
            .from('workout_records')
            .select('*')
            .eq('telegram_id', telegram_id)
            .gte('date', startDate.toISOString().split('T')[0])
            .order('date', { ascending: false });

        if (error) throw error;

        const stats = {
            totalWorkouts: workoutRecords ? workoutRecords.length : 0,
            totalDuration: 0,
            totalCalories: 0,
            workoutTypes: {},
            recentWorkouts: workoutRecords ? workoutRecords.slice(0, 5) : []
        };

        if (workoutRecords && workoutRecords.length > 0) {
            workoutRecords.forEach(workout => {
                stats.totalDuration += workout.duration_minutes || 0;
                stats.totalCalories += workout.calories_burned || 0;
                
                const type = workout.workout_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                stats.workoutTypes[type] = (stats.workoutTypes[type] || 0) + 1;
            });
        }

        return { success: true, ...stats };
    } catch (error) {
        console.error('Error getting workout stats:', error);
        return { success: false, error: error.message };
    }
};

const estimateCaloriesBurned = (workoutType, duration, weight_kg) => {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–µ—Å–∞
    const metValues = {
        '–∫–∞—Ä–¥–∏–æ': 7,
        '—Å–∏–ª–æ–≤–∞—è': 5,
        '–π–æ–≥–∞': 3,
        '–ø–∏–ª–∞—Ç–µ—Å': 3,
        '–±–µ–≥': 8,
        '–ø–ª–∞–≤–∞–Ω–∏–µ': 6,
        '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 6,
        '—Ö–æ–¥—å–±–∞': 3.5,
        '—Ç–∞–Ω—Ü—ã': 5,
        '—Ñ–∏—Ç–Ω–µ—Å': 5,
        '—Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª': 5,
        '–æ–±—â–∞—è': 4.5
    };

    const workoutTypeLower = workoutType.toLowerCase();
    let met = metValues['–æ–±—â–∞—è']; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ MET –∑–Ω–∞—á–µ–Ω–∏—è
    for (const [type, value] of Object.entries(metValues)) {
        if (workoutTypeLower.includes(type)) {
            met = value;
            break;
        }
    }

    // –§–æ—Ä–º—É–ª–∞: –∫–∞–ª–æ—Ä–∏–∏ = MET √ó –≤–µ—Å (–∫–≥) √ó –≤—Ä–µ–º—è (—á–∞—Å—ã)
    const hours = duration / 60;
    const calories = Math.round(met * weight_kg * hours);
    
    return calories;
};

// --- Workout Tracking Functions ---
const calculateCaloriesBurned = (workoutType, duration, exercises, profileData) => {
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–∞–ª–æ—Ä–∏–π –≤ –º–∏–Ω—É—Ç—É –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –≤–µ—Å–∞ (70–∫–≥ –±–∞–∑–æ–≤—ã–π)
    const calorieRates = {
        'cardio': 8.5,      // –ë–µ–≥, –≤–µ–ª–æ—Å–∏–ø–µ–¥
        'strength': 4.5,    // –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        'yoga': 2.5,        // –ô–æ–≥–∞, —Ä–∞—Å—Ç—è–∂–∫–∞
        'hiit': 10.0,       // –í—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        'swimming': 7.0,    // –ü–ª–∞–≤–∞–Ω–∏–µ
        'walking': 3.5,     // –•–æ–¥—å–±–∞
        'other': 5.0        // –î—Ä—É–≥–∏–µ –≤–∏–¥—ã
    };

    const weightFactor = profileData?.weight_kg ? profileData.weight_kg / 70 : 1;
    const baseRate = calorieRates[workoutType] || calorieRates['other'];
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    let exerciseCalories = 0;
    if (exercises && exercises.length > 0) {
        exercises.forEach(exercise => {
            const exerciseName = exercise.toLowerCase();
            if (exerciseName.includes('–æ—Ç–∂–∏–º–∞–Ω–∏') || exerciseName.includes('push')) {
                exerciseCalories += 0.5 * (exercise.match(/\d+/) ? parseInt(exercise.match(/\d+/)[0]) : 10);
            } else if (exerciseName.includes('–ø—Ä–∏—Å–µ–¥–∞–Ω–∏') || exerciseName.includes('squat')) {
                exerciseCalories += 0.4 * (exercise.match(/\d+/) ? parseInt(exercise.match(/\d+/)[0]) : 10);
            } else if (exerciseName.includes('–ø–ª–∞–Ω–∫–∞') || exerciseName.includes('plank')) {
                exerciseCalories += 5; // –ó–∞ –º–∏–Ω—É—Ç—É –ø–ª–∞–Ω–∫–∏
            }
        });
    }

    const totalCalories = Math.round((baseRate * duration * weightFactor) + exerciseCalories);
    return Math.max(totalCalories, 10); // –ú–∏–Ω–∏–º—É–º 10 –∫–∞–ª–æ—Ä–∏–π
};

const addWorkoutRecord = async (telegram_id, workoutData) => {
    try {
        console.log('Adding workout record with data:', workoutData);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤
        const exercisesString = Array.isArray(workoutData.exercises) 
            ? workoutData.exercises.join(', ') 
            : workoutData.exercises || '';
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–Ω–∞—á–∞–ª–∞
        const basicData = {
            telegram_id: String(telegram_id),
            workout_type: workoutData.workout_type || 'general',
            duration_minutes: parseInt(workoutData.duration) || 30,
            date: new Date().toISOString().split('T')[0]
        };
        
        console.log('Trying to insert basic workout data:', basicData);

        const { data, error } = await supabase
            .from('workout_records')
            .insert({
                ...basicData,
                created_at: new Date().toISOString()
            });

        if (error) {
            console.error('Supabase error details:', error);
            console.error('Full error object:', JSON.stringify(error, null, 2));
            throw error;
        }
        return { success: true, data };
    } catch (error) {
        console.error('Error adding workout record:', error);
        console.error('Full error:', JSON.stringify(error, null, 2));
        return { success: false, error: error.message || JSON.stringify(error) };
    }
};

const getWorkoutTrackingStats = async (telegram_id, period = 'today') => {
    try {
        let startDate;
        const today = new Date();
        
        switch (period) {
            case 'today':
                startDate = new Date(today).toISOString().split('T')[0];
                break;
            case 'week':
                const weekStart = new Date(today.setDate(today.getDate() - 7));
                startDate = weekStart.toISOString().split('T')[0];
                break;
            case 'month':
                const monthStart = new Date(today.setDate(today.getDate() - 30));
                startDate = monthStart.toISOString().split('T')[0];
                break;
        }

        const { data: workouts, error } = await supabase
            .from('workout_records')
            .select('*')
            .eq('telegram_id', telegram_id)
            .gte('date', startDate)
            .order('created_at', { ascending: false });

        if (error) throw error;

        const stats = {
            totalWorkouts: workouts ? workouts.length : 0,
            totalCalories: 0,
            totalDuration: 0,
            workoutTypes: {},
            byDate: {}
        };

        if (workouts && workouts.length > 0) {
            workouts.forEach(workout => {
                stats.totalCalories += workout.calories_burned || 0;
                stats.totalDuration += workout.duration_minutes || 0;
                
                // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
                const type = workout.workout_type || 'other';
                stats.workoutTypes[type] = (stats.workoutTypes[type] || 0) + 1;
                
                // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
                const date = workout.date;
                if (!stats.byDate[date]) {
                    stats.byDate[date] = { count: 0, calories: 0, duration: 0 };
                }
                stats.byDate[date].count += 1;
                stats.byDate[date].calories += workout.calories_burned || 0;
                stats.byDate[date].duration += workout.duration_minutes || 0;
            });
        }

        return { success: true, ...stats, workouts };
    } catch (error) {
        console.error('Error getting workout stats:', error);
        return { success: false, error: error.message };
    }
};

const getWorkoutPlanProgress = async (telegram_id) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegram_id)
            .single();

        if (profileError || !profile) {
            return { success: false, reason: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: planData, error: planError } = await supabase
            .from('workout_plan_data')
            .select('*')
            .eq('user_id', profile.id)
            .single();

        if (planError || !planData) {
            return { success: false, reason: '–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
        const weekStart = new Date();
        weekStart.setDate(weekStart.getDate() - weekStart.getDay()); // –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
        const weekStartStr = weekStart.toISOString().split('T')[0];

        const { data: weekWorkouts, error: workoutError } = await supabase
            .from('workout_records')
            .select('*')
            .eq('telegram_id', telegram_id)
            .gte('date', weekStartStr);

        if (workoutError) throw workoutError;

        const completedWorkouts = weekWorkouts ? weekWorkouts.length : 0;
        const plannedWorkouts = parseInt(planData.frequency_per_week) || 3;
        const progressPercentage = Math.round((completedWorkouts / plannedWorkouts) * 100);

        return {
            success: true,
            completed: completedWorkouts,
            planned: plannedWorkouts,
            progress: Math.min(progressPercentage, 100), // –ú–∞–∫—Å–∏–º—É–º 100%
            weekWorkouts: weekWorkouts || []
        };
    } catch (error) {
        console.error('Error getting workout plan progress:', error);
        return { success: false, error: error.message };
    }
};

const createWorkoutProgressBar = (completed, planned) => {
    const percentage = Math.round((completed / planned) * 100);
    const filledBlocks = Math.round((percentage / 100) * 10);
    const emptyBlocks = 10 - filledBlocks;
    
    const filled = 'üü©'.repeat(filledBlocks);
    const empty = '‚¨ú'.repeat(emptyBlocks);
    
    return `${filled}${empty} ${percentage}%`;
};

// --- HTML Document Generation ---
const generateWorkoutPlanHTML = (planContent, profileData, planData) => {
    const currentDate = new Date().toLocaleDateString('ru-RU');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    const safeProfileData = {
        first_name: profileData?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        age: profileData?.age || '–ù–µ —É–∫–∞–∑–∞–Ω',
        height_cm: profileData?.height_cm || '–ù–µ —É–∫–∞–∑–∞–Ω',
        weight_kg: profileData?.weight_kg || '–ù–µ —É–∫–∞–∑–∞–Ω',
        goal: profileData?.goal || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
    const safePlanData = {
        experience: planData?.experience || '–ù–µ —É–∫–∞–∑–∞–Ω',
        frequency_per_week: planData?.frequency_per_week || planData?.frequency || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    };
    
    // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω–∞ –∏–∑ Markdown –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const days = planContent.split('### –î–µ–Ω—å').filter(day => day.trim());
    
    let dayCards = '';
    days.forEach((day, index) => {
        if (index === 0) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
        
        const lines = day.trim().split('\n');
        const dayTitle = lines[0].replace(/^\d+\s*-\s*/, '');
        
        let exercises = '';
        let isTable = false;
        
        lines.forEach(line => {
            // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const cleanLine = line.trim();
            
            if (cleanLine.includes('|') && !cleanLine.includes('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ') && !cleanLine.includes('---') && cleanLine.length > 5) {
                isTable = true;
                const parts = cleanLine.split('|').map(p => p.trim()).filter(p => p && p !== '---' && p !== '');
                if (parts.length >= 4) {
                    const exerciseName = parts[0].replace(/^\|+|\|+$/g, '').trim() || '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ';
                    const sets = parts[1].replace(/^\|+|\|+$/g, '').trim() || '-';
                    const reps = parts[2].replace(/^\|+|\|+$/g, '').trim() || '-';
                    const rest = parts[3].replace(/^\|+|\|+$/g, '').trim() || '-';
                    
                    exercises += `
                        <div class="exercise-row">
                            <span class="exercise-name">${exerciseName}</span>
                            <span class="exercise-sets">${sets}</span>
                            <span class="exercise-reps">${reps}</span>
                            <span class="exercise-rest">${rest}</span>
                        </div>
                    `;
                }
            } else if (cleanLine && !cleanLine.includes('|') && !cleanLine.includes('#') && !cleanLine.includes('**') && cleanLine.length > 3) {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                exercises += `
                    <div class="exercise-text">
                        <p>${cleanLine}</p>
                    </div>
                `;
            }
        });
        
        const dayEmojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£'];
        const dayEmoji = dayEmojis[index - 1] || 'üìÖ';
        
        dayCards += `
            <div class="day-card">
                <h3>${dayEmoji} –î–µ–Ω—å ${index} - ${dayTitle}</h3>
                <div class="exercises">
                    ${exercises || '<p class="rest-day">üõå –î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞</p>'}
                </div>
            </div>
        `;
    });
    
    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üí™ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary-dark: #0d1b0f;
            --primary-green: #1a2e1f;
            --secondary-green: #2d5a3d;
            --accent-yellow: #ffd700;
            --accent-light-yellow: #fff59d;
            --text-light: #e8f5e8;
            --text-muted: #a5c9aa;
            --border-green: #3e6b4a;
            --gradient-primary: linear-gradient(135deg, #0d1b0f 0%, #1a2e1f 50%, #2d5a3d 100%);
            --gradient-accent: linear-gradient(135deg, #ffd700 0%, #ffed4a 100%);
            --shadow-dark: 0 10px 40px rgba(13, 27, 15, 0.3);
            --shadow-light: 0 5px 20px rgba(255, 215, 0, 0.2);
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--gradient-primary);
            min-height: 100vh;
            padding: 15px;
            color: var(--text-light);
            line-height: 1.6;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: var(--primary-green);
            border-radius: 25px;
            border: 2px solid var(--border-green);
            box-shadow: var(--shadow-dark);
            overflow: hidden;
            position: relative;
        }
        
        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--gradient-accent);
            animation: glow 3s ease-in-out infinite alternate;
        }
        
        @keyframes glow {
            from { box-shadow: 0 0 10px rgba(255, 215, 0, 0.5); }
            to { box-shadow: 0 0 20px rgba(255, 215, 0, 0.8); }
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .header {
            background: var(--gradient-accent);
            color: var(--primary-dark);
            padding: 40px 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 20s linear infinite;
        }
        
        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .header h1 {
            font-size: clamp(2rem, 5vw, 3.5rem);
            font-weight: 700;
            margin-bottom: 15px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
            position: relative;
            z-index: 1;
            animation: slideIn 1s ease-out;
        }
        
        .header p {
            font-size: 1.2rem;
            font-weight: 400;
            opacity: 0.9;
            position: relative;
            z-index: 1;
            animation: slideIn 1s ease-out 0.2s both;
        }
        
        .user-info {
            background: var(--secondary-green);
            padding: 30px;
            margin: 25px;
            border-radius: 20px;
            border: 1px solid var(--border-green);
            animation: slideIn 1s ease-out 0.4s both;
            position: relative;
            overflow: hidden;
        }
        
        .user-info::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: var(--gradient-accent);
        }
        
        .user-info h3 {
            color: var(--accent-yellow);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            font-size: 1.4rem;
            font-weight: 600;
        }
        
        .user-info h3::before {
            content: "üë§";
            margin-right: 12px;
            font-size: 1.5em;
            filter: drop-shadow(0 0 10px var(--accent-yellow));
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        
        .info-item {
            padding: 20px;
            background: var(--primary-green);
            border-radius: 15px;
            border: 1px solid var(--border-green);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .info-item:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-light);
            border-color: var(--accent-yellow);
        }
        
        .info-label {
            font-weight: 500;
            color: var(--text-muted);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
        }
        
        .info-value {
            color: var(--accent-yellow);
            font-size: 1.3rem;
            font-weight: 600;
            font-family: 'JetBrains Mono', monospace;
        }
        
        .day-card {
            margin: 25px;
            background: var(--secondary-green);
            border-radius: 20px;
            border: 1px solid var(--border-green);
            overflow: hidden;
            animation: slideIn 1s ease-out 0.6s both;
            transition: all 0.3s ease;
        }
        
        .day-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-light);
        }
        
        .day-card h3 {
            background: var(--gradient-accent);
            color: var(--primary-dark);
            padding: 25px;
            margin: 0;
            font-size: 1.4rem;
            font-weight: 600;
            text-align: center;
            position: relative;
        }
        
        .exercises {
            padding: 30px;
        }
        
        .exercise-row {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr;
            gap: 20px;
            padding: 20px;
            background: var(--primary-green);
            border-radius: 15px;
            margin-bottom: 15px;
            border-left: 4px solid var(--accent-yellow);
            transition: all 0.3s ease;
            animation: fadeIn 0.8s ease-out;
        }
        
        .exercise-row:hover {
            transform: translateX(10px);
            box-shadow: var(--shadow-light);
            background: var(--primary-dark);
        }
        
        .exercise-name {
            font-weight: 600;
            color: var(--text-light);
            font-size: 1.1rem;
        }
        
        .exercise-sets {
            color: #ff6b6b;
            font-weight: 500;
            font-family: 'JetBrains Mono', monospace;
            background: rgba(255, 107, 107, 0.1);
            padding: 5px 10px;
            border-radius: 8px;
            text-align: center;
        }
        
        .exercise-reps {
            color: #4ecdc4;
            font-weight: 500;
            font-family: 'JetBrains Mono', monospace;
            background: rgba(78, 205, 196, 0.1);
            padding: 5px 10px;
            border-radius: 8px;
            text-align: center;
        }
        
        .exercise-rest {
            color: #a78bfa;
            font-weight: 500;
            font-family: 'JetBrains Mono', monospace;
            background: rgba(167, 139, 250, 0.1);
            padding: 5px 10px;
            border-radius: 8px;
            text-align: center;
        }
        
        .exercise-text {
            margin: 10px 0;
            padding: 15px 20px;
            background: var(--primary-green);
            border-radius: 12px;
            border-left: 4px solid var(--accent-yellow);
            transition: all 0.3s ease;
            animation: fadeIn 0.8s ease-out;
        }
        
        .exercise-text:hover {
            transform: translateX(5px);
            background: var(--primary-dark);
            box-shadow: var(--shadow-light);
        }
        
        .exercise-text p {
            color: var(--text-light);
            margin: 0;
            font-size: 1.05rem;
            line-height: 1.5;
        }
        
        .rest-day {
            text-align: center;
            color: var(--text-muted);
            font-size: 1.3rem;
            padding: 40px;
            background: var(--primary-dark);
            border-radius: 15px;
            border: 2px dashed var(--border-green);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .tips {
            margin: 25px;
            padding: 30px;
            background: var(--secondary-green);
            border-radius: 20px;
            border: 1px solid var(--border-green);
            animation: slideIn 1s ease-out 0.8s both;
            position: relative;
        }
        
        .tips::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: var(--gradient-accent);
        }
        
        .tips h3 {
            color: var(--accent-yellow);
            margin-bottom: 20px;
            font-size: 1.4rem;
            font-weight: 600;
            display: flex;
            align-items: center;
        }
        
        .tips h3::before {
            content: "üí°";
            margin-right: 12px;
            font-size: 1.5em;
            filter: drop-shadow(0 0 10px var(--accent-yellow));
        }
        
        .tips ul {
            list-style: none;
            padding-left: 0;
        }
        
        .tips li {
            margin: 12px 0;
            padding: 15px 20px 15px 50px;
            position: relative;
            background: var(--primary-green);
            border-radius: 10px;
            border-left: 3px solid var(--accent-yellow);
            transition: all 0.3s ease;
            color: var(--text-light);
        }
        
        .tips li:hover {
            transform: translateX(5px);
            background: var(--primary-dark);
        }
        
        .tips li::before {
            content: "‚ö°";
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1.2em;
            color: var(--accent-yellow);
        }
        
        .footer {
            background: var(--primary-dark);
            color: var(--text-light);
            padding: 30px;
            text-align: center;
            border-top: 2px solid var(--accent-yellow);
            animation: slideIn 1s ease-out 1s both;
        }
        
        .footer p {
            margin: 5px 0;
            font-weight: 400;
        }
        
        .footer p:last-child {
            color: var(--accent-yellow);
            font-weight: 500;
        }
        
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 20px;
            }
            
            .exercise-row {
                grid-template-columns: 1fr;
                gap: 10px;
                text-align: center;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
            
            .header {
                padding: 30px 20px;
            }
            
            .user-info, .day-card, .tips {
                margin: 15px;
                padding: 20px;
            }
        }
        
        @media print {
            body {
                background: white;
                padding: 0;
                color: black;
            }
            
            .container {
                box-shadow: none;
                border-radius: 0;
                border: none;
            }
            
            .container::before {
                display: none;
            }
            
            .header::before {
                display: none;
            }
            
            * {
                animation: none !important;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üí™ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h1>
            <p>üöÄ –°–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!</p>
        </div>
        
        <div class="user-info workout-info">
            <h3>üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">üë§ –ò–º—è</div>
                    <div class="info-value">${safeProfileData.first_name}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üéÇ –í–æ–∑—Ä–∞—Å—Ç</div>
                    <div class="info-value">${safeProfileData.age} –ª–µ—Ç</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üìè –†–æ—Å—Ç</div>
                    <div class="info-value">${safeProfileData.height_cm} —Å–º</div>
                </div>
                <div class="info-item">
                    <div class="info-label">‚öñÔ∏è –í–µ—Å</div>
                    <div class="info-value">${safeProfileData.weight_kg} –∫–≥</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üéØ –¶–µ–ª—å</div>
                    <div class="info-value">${safeProfileData.goal === 'lose_weight' ? '–ü–æ—Ö—É–¥–µ–Ω–∏–µ' : safeProfileData.goal === 'gain_mass' ? '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã' : safeProfileData.goal === 'maintain_weight' ? '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞' : safeProfileData.goal}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üí™ –û–ø—ã—Ç</div>
                    <div class="info-value">${safePlanData.experience === 'beginner' ? '–ù–æ–≤–∏—á–æ–∫' : safePlanData.experience === 'intermediate' ? '–°—Ä–µ–¥–Ω–∏–π' : safePlanData.experience === 'advanced' ? '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' : safePlanData.experience}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üìÖ –ß–∞—Å—Ç–æ—Ç–∞</div>
                    <div class="info-value">${safePlanData.frequency_per_week} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é</div>
                </div>
            </div>
        </div>
        
        ${dayCards}
        
        <div class="tips">
            <h3>üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</h3>
            <ul>
                <li>–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å —Ä–∞–∑–º–∏–Ω–∫–∏ 5-10 –º–∏–Ω—É—Ç</li>
                <li>–ü–µ–π—Ç–µ –≤–æ–¥—É –¥–æ, –≤–æ –≤—Ä–µ–º—è –∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</li>
                <li>–û—Ç–¥—ã—Ö–∞–π—Ç–µ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É</li>
                <li>–ü—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É —Ç–µ–ª—É –∏ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π—Ç–µ</li>
                <li>–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É</li>
                <li>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–π—Ç–µ —Ä–∞—Å—Ç—è–∂–∫—É –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</li>
            </ul>
        </div>
        
        <div class="footer">
            <p>üìÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω ${currentDate} | ü§ñ Telegram Bot NutriAI</p>
            <p style="margin-top: 10px; opacity: 0.8;">‚ú® –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π! üéØ</p>
            <p style="margin-top: 5px; font-size: 0.9rem; opacity: 0.6;">üí™ –í–∞—à –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è!</p>
        </div>
    </div>
</body>
</html>
    `;
};

const generateNutritionPlanHTML = (planContent, profileData, planData) => {
    const currentDate = new Date().toLocaleDateString('ru-RU');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    const safeProfileData = {
        first_name: profileData?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        age: profileData?.age || '–ù–µ —É–∫–∞–∑–∞–Ω',
        height_cm: profileData?.height_cm || '–ù–µ —É–∫–∞–∑–∞–Ω',
        weight_kg: profileData?.weight_kg || '–ù–µ —É–∫–∞–∑–∞–Ω',
        goal: profileData?.goal || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        daily_calories: profileData?.daily_calories || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        daily_protein: profileData?.daily_protein || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        daily_fat: profileData?.daily_fat || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        daily_carbs: profileData?.daily_carbs || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
    const safePlanData = {
        meals_per_day: planData?.meals_per_day || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        mealsCount: planData?.mealsCount || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    };
    
    // –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    const sections = planContent.split('##').filter(section => section.trim());
    
    let dailyMeals = '';
    let recommendations = '';
    
    sections.forEach(section => {
        if (section.includes('–î–µ–Ω—å') || section.includes('–¥–µ–Ω—å')) {
            const lines = section.trim().split('\n');
            const dayTitle = lines[0].trim();
            
            let meals = '';
            lines.slice(1).forEach(line => {
                if (line.includes('**') && (line.includes('–ó–∞–≤—Ç—Ä–∞–∫') || line.includes('–û–±–µ–¥') || line.includes('–£–∂–∏–Ω') || line.includes('–ü–µ—Ä–µ–∫—É—Å'))) {
                    const mealName = line.replace(/\*\*/g, '').trim();
                    meals += `<h4 class="meal-title">${mealName}</h4>`;
                } else if (line.includes('|') && !line.includes('–ë–ª—é–¥–æ') && !line.includes('---')) {
                    // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É –ø–∏—Ç–∞–Ω–∏—è
                    const parts = line.split('|').map(p => p.trim()).filter(p => p && p !== '---');
                    if (parts.length >= 4) {
                        meals += `
                            <div class="nutrition-row">
                                <span class="dish-name">${parts[0].replace(/^\|+|\|+$/g, '').trim()}</span>
                                <span class="dish-details">${parts[1].replace(/^\|+|\|+$/g, '').trim()}</span>
                                <span class="dish-calories">${parts[2].replace(/^\|+|\|+$/g, '').trim()}</span>
                                <span class="dish-nutrition">${parts[3].replace(/^\|+|\|+$/g, '').trim()}</span>
                            </div>
                        `;
                    }
                } else if (line.trim() && !line.includes('**') && !line.includes('|') && line.length > 3) {
                    meals += `<p class="meal-item">${line.trim()}</p>`;
                }
            });
            
            const dayNumber = dayTitle.match(/\d+/);
            const dayEmojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£'];
            const dayEmoji = dayNumber ? dayEmojis[parseInt(dayNumber[0]) - 1] || 'üìÖ' : 'üìÖ';
            
            dailyMeals += `
                <div class="day-card">
                    <h3>${dayEmoji} ${dayTitle}</h3>
                    <div class="meals">
                        ${meals || '<p class="meal-item">üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ</p>'}
                    </div>
                </div>
            `;
        } else if (section.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏') || section.includes('—Å–æ–≤–µ—Ç')) {
            recommendations = section.trim();
        }
    });
    
    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü•ó –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary-dark: #0d1b0f;
            --primary-green: #1a2e1f;
            --secondary-green: #2d5a3d;
            --accent-yellow: #ffd700;
            --accent-light-yellow: #fff59d;
            --text-light: #e8f5e8;
            --text-muted: #a5c9aa;
            --border-green: #3e6b4a;
            --gradient-primary: linear-gradient(135deg, #0d1b0f 0%, #1a2e1f 50%, #2d5a3d 100%);
            --gradient-accent: linear-gradient(135deg, #ffd700 0%, #ffed4a 100%);
            --shadow-dark: 0 10px 40px rgba(13, 27, 15, 0.3);
            --shadow-light: 0 5px 20px rgba(255, 215, 0, 0.2);
            --meal-breakfast: #ff6b6b;
            --meal-lunch: #4ecdc4;
            --meal-dinner: #a78bfa;
            --meal-snack: #feca57;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--gradient-primary);
            min-height: 100vh;
            padding: 15px;
            color: var(--text-light);
            line-height: 1.6;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: var(--primary-green);
            border-radius: 25px;
            border: 2px solid var(--border-green);
            box-shadow: var(--shadow-dark);
            overflow: hidden;
            position: relative;
        }
        
        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--gradient-accent);
            animation: glow 3s ease-in-out infinite alternate;
        }
        
        @keyframes glow {
            from { box-shadow: 0 0 10px rgba(255, 215, 0, 0.5); }
            to { box-shadow: 0 0 20px rgba(255, 215, 0, 0.8); }
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        .header {
            background: var(--gradient-accent);
            color: var(--primary-dark);
            padding: 40px 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 15s linear infinite;
        }
        
        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .header h1 {
            font-size: clamp(2rem, 5vw, 3.5rem);
            font-weight: 700;
            margin-bottom: 15px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
            position: relative;
            z-index: 1;
            animation: slideIn 1s ease-out;
        }
        
        .header p {
            font-size: 1.2rem;
            font-weight: 400;
            opacity: 0.9;
            position: relative;
            z-index: 1;
            animation: slideIn 1s ease-out 0.2s both;
        }
        
        .user-info {
            background: var(--secondary-green);
            padding: 30px;
            margin: 25px;
            border-radius: 20px;
            border: 1px solid var(--border-green);
            animation: slideIn 1s ease-out 0.4s both;
            position: relative;
            overflow: hidden;
        }
        
        .user-info::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: var(--gradient-accent);
        }
        
        .user-info h3 {
            color: var(--accent-yellow);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            font-size: 1.4rem;
            font-weight: 600;
        }
        
        .user-info h3::before {
            content: "üë§";
            margin-right: 12px;
            font-size: 1.5em;
            filter: drop-shadow(0 0 10px var(--accent-yellow));
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        
        .info-item {
            padding: 20px;
            background: var(--primary-green);
            border-radius: 15px;
            border: 1px solid var(--border-green);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .info-item:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-light);
            border-color: var(--accent-yellow);
        }
        
        .info-label {
            font-weight: 500;
            color: var(--text-muted);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
        }
        
        .info-value {
            color: var(--accent-yellow);
            font-size: 1.3rem;
            font-weight: 600;
            font-family: 'JetBrains Mono', monospace;
        }
        
        .day-card {
            margin: 25px;
            background: var(--secondary-green);
            border-radius: 20px;
            border: 1px solid var(--border-green);
            overflow: hidden;
            animation: slideIn 1s ease-out 0.6s both;
            transition: all 0.3s ease;
        }
        
        .day-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-light);
        }
        
        .day-card h3 {
            background: var(--gradient-accent);
            color: var(--primary-dark);
            padding: 25px;
            margin: 0;
            font-size: 1.4rem;
            font-weight: 600;
            text-align: center;
            position: relative;
        }
        
        .meals {
            padding: 30px;
        }
        
        .meal-title {
            margin: 20px 0 15px 0;
            font-size: 1.3rem;
            font-weight: 600;
            padding: 15px 20px;
            border-radius: 15px;
            color: var(--text-light);
            display: flex;
            align-items: center;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            animation: fadeIn 0.8s ease-out;
        }
        
        .meal-title:hover {
            transform: translateX(5px);
            box-shadow: var(--shadow-light);
        }
        
        .meal-title::before {
            margin-right: 12px;
            font-size: 1.5em;
            filter: drop-shadow(0 0 5px rgba(0,0,0,0.3));
        }
        
        .meal-title:nth-of-type(1) {
            background: linear-gradient(135deg, var(--meal-breakfast), #ff8a80);
        }
        .meal-title:nth-of-type(1)::before { content: "üåÖ"; }
        
        .meal-title:nth-of-type(2) {
            background: linear-gradient(135deg, var(--meal-lunch), #4dd0e1);
        }
        .meal-title:nth-of-type(2)::before { content: "‚òÄÔ∏è"; }
        
        .meal-title:nth-of-type(3) {
            background: linear-gradient(135deg, var(--meal-dinner), #b39ddb);
        }
        .meal-title:nth-of-type(3)::before { content: "üåô"; }
        
        .meal-title:nth-of-type(4) {
            background: linear-gradient(135deg, var(--meal-snack), #ffcc02);
        }
        .meal-title:nth-of-type(4)::before { content: "üçé"; }
        
        .meal-item {
            margin: 12px 0;
            padding: 15px 20px 15px 50px;
            background: var(--primary-green);
            border-radius: 12px;
            border-left: 4px solid var(--accent-yellow);
            transition: all 0.3s ease;
            position: relative;
            color: var(--text-light);
            animation: fadeIn 0.8s ease-out;
        }
        
        .meal-item:hover {
            transform: translateX(8px);
            background: var(--primary-dark);
            box-shadow: var(--shadow-light);
        }
        
        .meal-item::before {
            content: "üçΩÔ∏è";
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1.2em;
            color: var(--accent-yellow);
        }
        
        .nutrition-row {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr;
            gap: 15px;
            padding: 15px 20px;
            background: var(--primary-green);
            border-radius: 12px;
            margin-bottom: 10px;
            border-left: 4px solid var(--accent-yellow);
            transition: all 0.3s ease;
            animation: fadeIn 0.8s ease-out;
        }
        
        .nutrition-row:hover {
            transform: translateX(8px);
            background: var(--primary-dark);
            box-shadow: var(--shadow-light);
        }
        
        .dish-name {
            font-weight: 600;
            color: var(--text-light);
            font-size: 1.1rem;
        }
        
        .dish-details {
            color: #4ecdc4;
            font-weight: 500;
            font-family: 'JetBrains Mono', monospace;
            background: rgba(78, 205, 196, 0.1);
            padding: 5px 10px;
            border-radius: 8px;
            text-align: center;
            font-size: 0.95rem;
        }
        
        .dish-calories {
            color: #ff6b6b;
            font-weight: 500;
            font-family: 'JetBrains Mono', monospace;
            background: rgba(255, 107, 107, 0.1);
            padding: 5px 10px;
            border-radius: 8px;
            text-align: center;
            font-size: 0.95rem;
        }
        
        .dish-nutrition {
            color: #a78bfa;
            font-weight: 500;
            font-family: 'JetBrains Mono', monospace;
            background: rgba(167, 139, 250, 0.1);
            padding: 5px 10px;
            border-radius: 8px;
            text-align: center;
            font-size: 0.95rem;
        }
        
        .footer {
            background: var(--primary-dark);
            color: var(--text-light);
            padding: 30px;
            text-align: center;
            border-top: 2px solid var(--accent-yellow);
            animation: slideIn 1s ease-out 1s both;
        }
        
        .footer p {
            margin: 5px 0;
            font-weight: 400;
        }
        
        .footer p:last-child {
            color: var(--accent-yellow);
            font-weight: 500;
            animation: pulse 2s infinite;
        }
        
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 20px;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
            
            .header {
                padding: 30px 20px;
            }
            
            .user-info, .day-card {
                margin: 15px;
                padding: 20px;
            }
            
            .meals {
                padding: 20px;
            }
            
            .meal-item {
                padding: 12px 15px 12px 40px;
            }
            
            .nutrition-row {
                grid-template-columns: 1fr;
                gap: 8px;
                text-align: center;
            }
            
            .nutrition-row span {
                display: block;
                margin: 5px 0;
            }
        }
        
        @media print {
            body {
                background: white;
                padding: 0;
                color: black;
            }
            
            .container {
                box-shadow: none;
                border-radius: 0;
                border: none;
            }
            
            .container::before {
                display: none;
            }
            
            .header::before {
                display: none;
            }
            
            * {
                animation: none !important;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü•ó –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</h1>
            <p>üåü –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!</p>
        </div>
        
        <div class="user-info nutrition-info">
            <h3>üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">üë§ –ò–º—è</div>
                    <div class="info-value">${safeProfileData.first_name}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üéÇ –í–æ–∑—Ä–∞—Å—Ç</div>
                    <div class="info-value">${safeProfileData.age} –ª–µ—Ç</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üìè –†–æ—Å—Ç</div>
                    <div class="info-value">${safeProfileData.height_cm} —Å–º</div>
                </div>
                <div class="info-item">
                    <div class="info-label">‚öñÔ∏è –í–µ—Å</div>
                    <div class="info-value">${safeProfileData.weight_kg} –∫–≥</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üéØ –¶–µ–ª—å</div>
                    <div class="info-value">${safeProfileData.goal === 'lose_weight' ? '–ü–æ—Ö—É–¥–µ–Ω–∏–µ' : safeProfileData.goal === 'gain_mass' ? '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã' : safeProfileData.goal === 'maintain_weight' ? '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞' : safeProfileData.goal}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üî• –ö–∞–ª–æ—Ä–∏–∏</div>
                    <div class="info-value">${safeProfileData.daily_calories} –∫–∫–∞–ª</div>
                </div>
                <div class="info-item">
                    <div class="info-label">ü•© –ë–µ–ª–∫–∏</div>
                    <div class="info-value">${safeProfileData.daily_protein} –≥</div>
                </div>
                <div class="info-item">
                    <div class="info-label">ü•ë –ñ–∏—Ä—ã</div>
                    <div class="info-value">${safeProfileData.daily_fat} –≥</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üçû –£–≥–ª–µ–≤–æ–¥—ã</div>
                    <div class="info-value">${safeProfileData.daily_carbs} –≥</div>
                </div>
                <div class="info-item">
                    <div class="info-label">üçΩÔ∏è –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏</div>
                    <div class="info-value">${safePlanData.meals_per_day === 'three' ? '3 –æ—Å–Ω–æ–≤–Ω—ã—Ö' : safePlanData.meals_per_day === 'five' ? '5-6 –º–∞–ª–µ–Ω—å–∫–∏—Ö' : safePlanData.mealsCount}</div>
                </div>
            </div>
        </div>
        
        ${dailyMeals}
        
        <div class="footer">
            <p>üìÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω ${currentDate} | ü§ñ Telegram Bot NutriAI</p>
            <p style="margin-top: 10px; opacity: 0.8;">üçΩÔ∏è –ü–∏—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π! üéØ</p>
            <p style="margin-top: 5px; font-size: 0.9rem; opacity: 0.6;">üå± –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –æ—Å–Ω–æ–≤–∞ –≤–∞—à–µ–≥–æ —É—Å–ø–µ—Ö–∞!</p>
        </div>
    </div>
</body>
</html>
    `;
};

const sendPlanAsDocument = async (chatId, planType, htmlContent, filename) => {
    try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const fs = require('fs');
        const path = require('path');
        const tempDir = path.join(__dirname, 'temp');
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir);
        }
        
        const filePath = path.join(tempDir, filename);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HTML –≤ —Ñ–∞–π–ª
        fs.writeFileSync(filePath, htmlContent, 'utf8');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.sendDocument(chatId, filePath, {
            caption: `üìÑ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ${planType === 'workout' ? '–ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫' : '–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è'}!\n\n‚ú® –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\nüì± –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å\nüéØ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π!`,
            reply_markup: {
                inline_keyboard: [[
                    { text: 'üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å', callback_data: 'daily_report' },
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]]
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        setTimeout(() => {
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
            }
        }, 5000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};

// --- OCR for Documents ---
const extractTextFromImage = async (imageUrl) => {
    try {
        console.log('Extracting text from image with OCR...');
        
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞. –ò–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è.'
                },
                {
                    role: 'user',
                    content: [
                        { type: 'text', text: '–ò–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:' },
                        {
                            type: 'image_url',
                            image_url: { url: imageUrl }
                        }
                    ]
                }
            ],
            max_tokens: 1000,
        });

        const extractedText = response.choices[0].message.content;
        return { success: true, text: extractedText };

    } catch (error) {
        console.error('Error extracting text from image:', error);
        return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' };
    }
};

// --- Water Tracking Functions ---
const calculateWaterNorm = (weight_kg) => {
    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞: 30-35 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞
    return Math.round(weight_kg * 32.5); // –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
};

const addWaterIntake = async (telegram_id, amount_ml) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegram_id)
            .single();

        if (profileError || !profile) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–¥–µ
        const { error: insertError } = await supabase
            .from('water_intake')
            .insert({
                user_id: profile.id,
                amount_ml: amount_ml,
                recorded_at: new Date().toISOString()
            });

        if (insertError) throw insertError;

        return { success: true };
    } catch (error) {
        console.error('Error adding water intake:', error);
        return { success: false, error: error.message };
    }
};

const getWaterStats = async (telegram_id, period) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id, weight_kg')
            .eq('telegram_id', telegram_id)
            .single();

        if (profileError || !profile) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
        const { startDate, endDate } = getDateRange(period);
        
        const { data: waterRecords, error: waterError } = await supabase
            .from('water_intake')
            .select('amount_ml, recorded_at')
            .eq('user_id', profile.id)
            .gte('recorded_at', startDate.toISOString())
            .lte('recorded_at', endDate.toISOString())
            .order('recorded_at', { ascending: false });

        if (waterError) throw waterError;

        const waterNorm = calculateWaterNorm(profile.weight_kg);
        
        let totalWater = 0;
        let dailyStats = {};

        if (waterRecords && waterRecords.length > 0) {
            waterRecords.forEach(record => {
                totalWater += record.amount_ml;
                
                const recordDate = new Date(record.recorded_at).toISOString().split('T')[0];
                if (!dailyStats[recordDate]) {
                    dailyStats[recordDate] = 0;
                }
                dailyStats[recordDate] += record.amount_ml;
            });
        }

        return {
            success: true,
            totalWater,
            waterNorm,
            dailyStats,
            recordsCount: waterRecords ? waterRecords.length : 0
        };
    } catch (error) {
        console.error('Error getting water stats:', error);
        return { success: false, error: error.message };
    }
};

const showWaterMenu = async (chat_id, telegram_id) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const waterStats = await getWaterStats(telegram_id, 'today');
        
        if (!waterStats.success) {
            bot.sendMessage(chat_id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–µ.');
            return;
        }

        const { totalWater, waterNorm } = waterStats;
        const today = new Date().toISOString().split('T')[0];
        const todayWater = waterStats.dailyStats[today] || 0;
        
        const percentage = Math.round((todayWater / waterNorm) * 100);
        const progressBar = createProgressBar(todayWater, waterNorm);

        let waterText = `üíß **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥—ã**\n\n`;
        waterText += `üìä –°–µ–≥–æ–¥–Ω—è: ${todayWater} / ${waterNorm} –º–ª (${percentage}%)\n`;
        waterText += `${progressBar}\n\n`;
        waterText += `–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`;

        bot.sendMessage(chat_id, waterText, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üíß 100 –º–ª', callback_data: 'water_add_100' },
                        { text: 'üíß 200 –º–ª', callback_data: 'water_add_200' }
                    ],
                    [
                        { text: 'üíß 250 –º–ª', callback_data: 'water_add_250' },
                        { text: 'üíß 500 –º–ª', callback_data: 'water_add_500' }
                    ],
                    [
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã', callback_data: 'water_stats' },
                        { text: '‚úèÔ∏è –°–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'water_custom' }
                    ]
                ]
            }
        });
    } catch (error) {
        console.error('Error showing water menu:', error);
        bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

const createProgressBar = (consumed, norm) => {
    if (!norm || norm === 0) return '';
    const percentage = Math.min(100, (consumed / norm) * 100);
    const filledBlocks = Math.round(percentage / 10);
    const emptyBlocks = 10 - filledBlocks;
    return `[${'‚ñ†'.repeat(filledBlocks)}${'‚ñ°'.repeat(emptyBlocks)}] ${percentage.toFixed(0)}%`;
};

// --- Profile Menu Function ---
const showProfileMenu = async (chat_id, telegram_id) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        const { data: profile, error } = await supabase
            .from('profiles')
            .select('*')
            .eq('telegram_id', telegram_id)
            .single();

        if (error || !profile) {
            bot.sendMessage(chat_id, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–ª—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        const goalText = profile.goal === 'lose_weight' ? '–ü–æ—Ö—É–¥–µ–Ω–∏–µ' :
                        profile.goal === 'gain_mass' ? '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã' :
                        profile.goal === 'maintain' ? '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞' : profile.goal;

        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        const escapeName = (name) => name.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        let profileText = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n`;
        profileText += `üëã –ò–º—è: ${escapeName(profile.first_name)}\n`;
        profileText += `üë§ –ü–æ–ª: ${profile.gender === 'male' ? 'üë® –ú—É–∂—Å–∫–æ–π' : 'üë© –ñ–µ–Ω—Å–∫–∏–π'}\n`;
        profileText += `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç\n`;
        profileText += `üìè –†–æ—Å—Ç: ${profile.height_cm} —Å–º\n`;
        profileText += `‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${profile.weight_kg} –∫–≥\n`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (profile.target_weight_kg) {
            profileText += `üèÜ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: ${profile.target_weight_kg} –∫–≥\n`;
        }
        
        if (profile.timeframe_months) {
            profileText += `‚è±Ô∏è –°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${profile.timeframe_months} –º–µ—Å—è—Ü–µ–≤\n`;
        }
        
        profileText += `üéØ –¶–µ–ª—å: ${goalText}\n\n`;
        
        profileText += `üìä –î–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:\n`;
        profileText += `üî• –ö–∞–ª–æ—Ä–∏–∏: ${profile.daily_calories} –∫–∫–∞–ª\n`;
        profileText += `ü•© –ë–µ–ª–∫–∏: ${profile.daily_protein} –≥\n`;
        profileText += `ü•ë –ñ–∏—Ä—ã: ${profile.daily_fat} –≥\n`;
        profileText += `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${profile.daily_carbs} –≥\n`;
        profileText += `üíß –í–æ–¥–∞: ${calculateWaterNorm(profile.weight_kg)} –º–ª\n\n`;
        
        profileText += `–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`;

        bot.sendMessage(chat_id, profileText, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üëã –ò–º—è', callback_data: 'profile_edit_name' },
                        { text: 'üéÇ –í–æ–∑—Ä–∞—Å—Ç', callback_data: 'profile_edit_age' }
                    ],
                    [
                        { text: 'üìè –†–æ—Å—Ç', callback_data: 'profile_edit_height' },
                        { text: '‚öñÔ∏è –í–µ—Å', callback_data: 'profile_edit_weight' }
                    ],
                    [
                        { text: 'üèÜ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å', callback_data: 'profile_edit_target_weight' },
                        { text: '‚è±Ô∏è –°—Ä–æ–∫', callback_data: 'profile_edit_timeframe' }
                    ],
                    [
                        { text: 'üéØ –¶–µ–ª—å', callback_data: 'profile_edit_goal' },
                        { text: 'üë§ –ü–æ–ª', callback_data: 'profile_edit_gender' }
                    ]
                ]
            }
        });
    } catch (error) {
        console.error('Error showing profile menu:', error);
        bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

// --- Challenge System Functions ---
const generateWeeklyChallenge = async () => {
    try {
        logEvent('info', 'Generating weekly challenge');
        
        const response = await withTimeout(openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: `–¢—ã - –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –°–æ–∑–¥–∞–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç–∞.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ —Ñ–∏—Ç–Ω–µ—Å–æ–º
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã–π –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
- –í–∫–ª—é—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–ª—å —Å —á–∏—Å–ª–∞–º–∏
- –ë—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –ß–ï–õ–õ–ï–ù–î–ñ–ï–ô:
- "–ü—Ä–æ–π—Ç–∏ 70,000 —à–∞–≥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é!"
- "–í—ã–ø–∏—Ç—å 14 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é!"
- "–°–¥–µ–ª–∞—Ç—å 500 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é!"
- "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º 5 –¥–Ω–µ–π –ø–æ 30 –º–∏–Ω—É—Ç!"
- "–ü—Ä–æ–π—Ç–∏ 10 –∫–º –∑–∞ –Ω–µ–¥–µ–ª—é!"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "title": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞",
  "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "target_value": —á–∏—Å–ª–æ - —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ,
  "unit": "–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (—à–∞–≥–∏, –ª–∏—Ç—Ä—ã, –º–∏–Ω—É—Ç—ã, –∫–º, —Ä–∞–∑)",
  "type": "—Ç–∏–ø —á–µ–ª–ª–µ–Ω–¥–∂–∞ (steps, water, workout_time, distance, exercises)",
  "motivation": "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
}`
                },
                {
                    role: 'user',
                    content: '–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏!'
                }
            ],
            max_tokens: 400,
        }), 15000);

        const content = response.choices[0].message.content;
        const jsonString = content.replace(/```json/g, '').replace(/```/g, '').trim();
        const challengeData = JSON.parse(jsonString);

        logEvent('info', 'Weekly challenge generated', { title: challengeData.title });
        return { success: true, data: challengeData };

    } catch (error) {
        logEvent('error', 'Error generating weekly challenge', { error: error.toString() });
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            success: true,
            data: {
                title: "–ü—Ä–æ–π—Ç–∏ 70,000 —à–∞–≥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é!",
                description: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è! –î–≤–∏–≥–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 70,000 —à–∞–≥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.",
                target_value: 70000,
                unit: "—à–∞–≥–æ–≤",
                type: "steps",
                motivation: "–ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏! –í—ã —Å–º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å! üí™"
            }
        };
    }
};

const createWeeklyChallenge = async () => {
    try {
        const challengeResult = await generateWeeklyChallenge();
        if (!challengeResult.success) throw new Error('Failed to generate challenge');

        const challengeData = challengeResult.data;
        const weekStart = new Date();
        const day = weekStart.getDay();
        const diff = weekStart.getDate() - day + (day === 0 ? -6 : 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        weekStart.setDate(diff);
        weekStart.setHours(0, 0, 0, 0);

        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekEnd.getDate() + 6);
        weekEnd.setHours(23, 59, 59, 999);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–ª–ª–µ–Ω–¥–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { error } = await supabase
            .from('weekly_challenges')
            .upsert({
                week_start: weekStart.toISOString(),
                title: challengeData.title,
                description: challengeData.description,
                target_value: challengeData.target_value,
                unit: challengeData.unit,
                type: challengeData.type,
                motivation: challengeData.motivation,
                created_at: new Date().toISOString()
            }, { onConflict: 'week_start' });

        if (error) throw error;

        logEvent('info', 'Weekly challenge created and saved', { 
            title: challengeData.title,
            week_start: weekStart.toISOString()
        });

        return { success: true, data: challengeData };
    } catch (error) {
        logEvent('error', 'Error creating weekly challenge', { error: error.toString() });
        return { success: false, error: error.message };
    }
};

const getCurrentChallenge = async () => {
    try {
        const now = new Date();
        const weekStart = new Date();
        const day = weekStart.getDay();
        const diff = weekStart.getDate() - day + (day === 0 ? -6 : 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        weekStart.setDate(diff);
        weekStart.setHours(0, 0, 0, 0);

        const { data: challenge, error } = await supabase
            .from('weekly_challenges')
            .select('*')
            .eq('week_start', weekStart.toISOString())
            .single();

        if (error || !challenge) {
            // –ï—Å–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            const createResult = await createWeeklyChallenge();
            if (createResult.success) {
                return await getCurrentChallenge(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
            }
            return { success: false, error: 'No challenge found' };
        }

        return { success: true, data: challenge };
    } catch (error) {
        logEvent('error', 'Error getting current challenge', { error: error.toString() });
        return { success: false, error: error.message };
    }
};

const addSteps = async (telegram_id, steps) => {
    try {
        if (!steps || steps <= 0) {
            return { success: false, error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' };
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegram_id)
            .single();

        if (profileError || !profile) {
            return { success: false, error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        const now = new Date();
        const today = now.toISOString().split('T')[0];

        // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { error } = await supabase
            .from('steps_tracking')
            .upsert({
                user_id: profile.id,
                date: today,
                steps: steps,
                updated_at: new Date().toISOString()
            }, { 
                onConflict: 'user_id,date',
                ignoreDuplicates: false 
            });

        if (error) throw error;

        logEvent('info', 'Steps added', { telegram_id, steps, date: today });
        return { success: true };

    } catch (error) {
        logEvent('error', 'Error adding steps', { telegram_id, steps, error: error.toString() });
        return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–≥–æ–≤' };
    }
};

const getStepsStats = async (telegram_id, period = 'week') => {
    try {
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('telegram_id', telegram_id)
            .single();

        if (profileError || !profile) {
            return { success: false, error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        const now = new Date();
        let startDate, endDate;

        if (period === 'week') {
            // –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            const day = now.getDay();
            const diff = now.getDate() - day + (day === 0 ? -6 : 1);
            startDate = new Date(now);
            startDate.setDate(diff);
            startDate.setHours(0, 0, 0, 0);
            
            endDate = new Date(startDate);
            endDate.setDate(endDate.getDate() + 6);
            endDate.setHours(23, 59, 59, 999);
        } else {
            // today
            startDate = new Date(now);
            startDate.setHours(0, 0, 0, 0);
            endDate = new Date(now);
            endDate.setHours(23, 59, 59, 999);
        }

        const { data: stepsData, error } = await supabase
            .from('steps_tracking')
            .select('date, steps')
            .eq('user_id', profile.id)
            .gte('date', startDate.toISOString().split('T')[0])
            .lte('date', endDate.toISOString().split('T')[0])
            .order('date');

        if (error) throw error;

        const totalSteps = stepsData ? stepsData.reduce((sum, day) => sum + (day.steps || 0), 0) : 0;
        
        const byDate = {};
        if (stepsData) {
            stepsData.forEach(day => {
                byDate[day.date] = day.steps || 0;
            });
        }

        return {
            success: true,
            totalSteps,
            byDate,
            period
        };

    } catch (error) {
        logEvent('error', 'Error getting steps stats', { telegram_id, period, error: error.toString() });
        return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–≥–æ–≤' };
    }
};

const showChallengeMenu = async (chat_id, telegram_id) => {
    try {
        const challengeResult = await getCurrentChallenge();
        if (!challengeResult.success) {
            bot.sendMessage(chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        const challenge = challengeResult.data;
        const stepsStats = await getStepsStats(telegram_id, 'week');
        
        const totalSteps = stepsStats.success ? stepsStats.totalSteps : 0;
        const progress = Math.min(Math.round((totalSteps / challenge.target_value) * 100), 100);
        
        let challengeText = `üèÜ **–ß–ï–õ–õ–ï–ù–î–ñ –ù–ï–î–ï–õ–ò**\n\n`;
        challengeText += `**${challenge.title}**\n`;
        challengeText += `${challenge.description}\n\n`;
        
        challengeText += `üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:**\n`;
        challengeText += `${createProgressBar(totalSteps, challenge.target_value)}\n`;
        challengeText += `${totalSteps.toLocaleString()} / ${challenge.target_value.toLocaleString()} ${challenge.unit} (${progress}%)\n\n`;
        
        if (progress >= 100) {
            challengeText += `üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!** –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂!\n`;
            challengeText += `${challenge.motivation}\n\n`;
        } else {
            challengeText += `üí™ ${challenge.motivation}\n\n`;
        }
        
        challengeText += `–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è —à–∞–≥–∏:`;

        bot.sendMessage(chat_id, challengeText, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '1Ô∏è‚É£ 1000', callback_data: 'challenge_add_steps_1000' },
                        { text: '2Ô∏è‚É£ 2000', callback_data: 'challenge_add_steps_2000' }
                    ],
                    [
                        { text: '3Ô∏è‚É£ 3000', callback_data: 'challenge_add_steps_3000' },
                        { text: '5Ô∏è‚É£ 5000', callback_data: 'challenge_add_steps_5000' }
                    ],
                    [
                        { text: 'üîü 10000', callback_data: 'challenge_add_steps_10000' },
                        { text: '‚úèÔ∏è –°–≤–æ–µ —á–∏—Å–ª–æ', callback_data: 'challenge_add_custom_steps' }
                    ],
                    [
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'challenge_stats' }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('Error showing challenge menu:', error);
        bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

const sendWeeklyChallengeNotifications = async (type = 'new') => {
    try {
        logEvent('info', 'Sending weekly challenge notifications', { type });

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        const { data: users, error } = await supabase
            .from('profiles')
            .select('telegram_id, first_name')
            .eq('notifications_enabled', true);

        if (error) throw error;

        const challengeResult = await getCurrentChallenge();
        if (!challengeResult.success) {
            logEvent('error', 'Failed to get current challenge for notifications');
            return;
        }

        const challenge = challengeResult.data;
        let messageText = '';

        if (type === 'new') {
            messageText = `üöÄ **–ù–û–í–´–ô –ß–ï–õ–õ–ï–ù–î–ñ –ù–ï–î–ï–õ–ò!**\n\n`;
            messageText += `**${challenge.title}**\n`;
            messageText += `${challenge.description}\n\n`;
            messageText += `üí™ ${challenge.motivation}\n\n`;
            messageText += `–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é "–ß–µ–ª–ª–µ–Ω–¥–∂" –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —à–∞–≥–∏! üö∂‚Äç‚ôÇÔ∏è`;
        } else if (type === 'reminder') {
            messageText = `‚è∞ **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ß–ï–õ–õ–ï–ù–î–ñ–ï**\n\n`;
            messageText += `–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ç–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂:\n`;
            messageText += `**${challenge.title}**\n\n`;
            messageText += `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –º–µ–Ω—é "–ß–µ–ª–ª–µ–Ω–¥–∂"! üìä`;
        }

        if (!users || users.length === 0) {
            logEvent('warn', 'No users found for challenge notifications');
            return;
        }

        let successCount = 0;
        let errorCount = 0;

        for (const user of users) {
            try {
                await bot.sendMessage(user.telegram_id, messageText, {
                    parse_mode: 'Markdown'
                });
                successCount++;
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
                
            } catch (error) {
                console.error(`Failed to send challenge notification to ${user.telegram_id}:`, error);
                errorCount++;
            }
        }

        logEvent('info', 'Challenge notifications sent', {
            type,
            total: users.length,
            success: successCount,
            errors: errorCount
        });

    } catch (error) {
        logEvent('error', 'Error sending challenge notifications', { type, error: error.toString() });
    }
};

// --- Daily Reports Functions ---
const generateDailyReport = async (telegram_id) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('id, first_name, weight_kg, daily_calories, daily_protein, daily_fat, daily_carbs')
            .eq('telegram_id', telegram_id)
            .single();

        if (profileError || !profile) {
            return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date();
        const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);
        const todayEnd = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);

        // –ü–æ–ª—É—á–∞–µ–º –µ–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const { data: todayMeals } = await supabase
            .from('meals')
            .select('calories, protein, fat, carbs, description')
            .eq('user_id', profile.id)
            .gte('eaten_at', todayStart.toISOString())
            .lte('eaten_at', todayEnd.toISOString());

        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const waterStats = await getWaterStats(telegram_id, 'today');
        const todayDateString = today.toISOString().split('T')[0];
        const todayWater = waterStats.success ? (waterStats.dailyStats[todayDateString] || 0) : 0;
        const waterNorm = waterStats.success ? waterStats.waterNorm : calculateWaterNorm(profile.weight_kg);

        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const workoutStats = await getWorkoutTrackingStats(telegram_id, 'today');
        const todayWorkoutCalories = workoutStats.success ? (workoutStats.byDate[todayDateString]?.calories || 0) : 0;
        const todayWorkoutCount = workoutStats.success ? (workoutStats.byDate[todayDateString]?.count || 0) : 0;
        const todayWorkoutDuration = workoutStats.success ? (workoutStats.byDate[todayDateString]?.duration || 0) : 0;

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£
        const totals = todayMeals ? todayMeals.reduce((acc, meal) => {
            acc.calories += meal.calories || 0;
            acc.protein += meal.protein || 0;
            acc.fat += meal.fat || 0;
            acc.carbs += meal.carbs || 0;
            return acc;
        }, { calories: 0, protein: 0, fat: 0, carbs: 0 }) : { calories: 0, protein: 0, fat: 0, carbs: 0 };

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        let reportText = `üåô **–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è, ${profile.first_name}!**\n\n`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if ((!todayMeals || todayMeals.length === 0) && todayWater === 0 && todayWorkoutCount === 0) {
            reportText += `üìã –°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ, –≤–æ–¥–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.\n`;
            reportText += `üí° –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\n`;
            reportText += `–•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞! üåü`;
            return reportText;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
        if (todayMeals && todayMeals.length > 0) {
            const caloriePercentage = Math.round((totals.calories / profile.daily_calories) * 100);
            reportText += `üçΩÔ∏è **–ü–∏—Ç–∞–Ω–∏–µ:**\n`;
            reportText += `üî• –ö–∞–ª–æ—Ä–∏–∏: ${totals.calories} / ${profile.daily_calories} (${caloriePercentage}%)\n`;
            reportText += `${createProgressBar(totals.calories, profile.daily_calories)}\n\n`;

            reportText += `**–ë–ñ–£ –∑–∞ –¥–µ–Ω—å:**\n`;
            reportText += `ü•© –ë–µ–ª–∫–∏: ${totals.protein.toFixed(0)} / ${profile.daily_protein} –≥\n`;
            reportText += `ü•ë –ñ–∏—Ä—ã: ${totals.fat.toFixed(0)} / ${profile.daily_fat} –≥\n`;
            reportText += `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${totals.carbs.toFixed(0)} / ${profile.daily_carbs} –≥\n\n`;
        } else {
            reportText += `üçΩÔ∏è **–ü–∏—Ç–∞–Ω–∏–µ:** –ó–∞–ø–∏—Å–µ–π –Ω–µ –±—ã–ª–æ\n\n`;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã
        const waterPercentage = Math.round((todayWater / waterNorm) * 100);
        reportText += `üíß **–í–æ–¥–∞:**\n`;
        reportText += `${todayWater} / ${waterNorm} –º–ª (${waterPercentage}%)\n`;
        reportText += `${createProgressBar(todayWater, waterNorm)}\n\n`;

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        if (todayWorkoutCount > 0) {
            reportText += `üí™ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n`;
            if (todayWorkoutCount === 1) {
                reportText += `üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ 1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n`;
            } else {
                reportText += `üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ–¥–µ–Ω–æ ${todayWorkoutCount} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n`;
            }
            reportText += `‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${todayWorkoutDuration} –º–∏–Ω\n`;
            reportText += `üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: ~${todayWorkoutCalories} –∫–∫–∞–ª\n\n`;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É
            const progressResult = await getWorkoutPlanProgress(telegram_id);
            if (progressResult.success) {
                reportText += `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**\n`;
                reportText += `${createWorkoutProgressBar(progressResult.completed, progressResult.planned)}\n`;
                reportText += `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${progressResult.completed} –∏–∑ ${progressResult.planned} –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n\n`;
            }
        } else {
            reportText += `üí™ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:** –°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ\n\n`;
        }

        // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        reportText += `üìä **–ò—Ç–æ–≥–∏ –¥–Ω—è:**\n`;
        
        let achievements = [];
        let recommendations = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (todayMeals && totals.calories >= profile.daily_calories * 0.8 && totals.calories <= profile.daily_calories * 1.2) {
            achievements.push('üéØ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏!');
        }
        if (waterPercentage >= 100) {
            achievements.push('üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
        }
        if (totals.protein >= profile.daily_protein * 0.8) {
            achievements.push('ü•© –•–æ—Ä–æ—à–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞!');
        }
        if (todayWorkoutCount > 0) {
            achievements.push('üí™ –°–µ–≥–æ–¥–Ω—è –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!');
        }
        if (todayWorkoutCalories >= 200) {
            achievements.push('üî• –û—Ç–ª–∏—á–Ω–æ —Å–æ–∂–≥–ª–∏ –∫–∞–ª–æ—Ä–∏–∏!');
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (!todayMeals || totals.calories < profile.daily_calories * 0.7) {
            recommendations.push('üçΩÔ∏è –ó–∞–≤—Ç—Ä–∞ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏');
        }
        if (waterPercentage < 80) {
            recommendations.push('üíß –°—Ç–æ–∏—Ç –±–æ–ª—å—à–µ –ø–∏—Ç—å –≤–æ–¥—ã –∑–∞–≤—Ç—Ä–∞');
        }
        if (totals.protein < profile.daily_protein * 0.7) {
            recommendations.push('ü•© –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
        }
        if (todayWorkoutCount === 0) {
            recommendations.push('üí™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤—Ç—Ä–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        const progressResult = await getWorkoutPlanProgress(telegram_id);
        if (progressResult.success && progressResult.progress < 50) {
            recommendations.push('üèÉ‚Äç‚ôÇÔ∏è –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª–µ');
        }

        if (achievements.length > 0) {
            reportText += achievements.join('\n') + '\n\n';
        }

        if (recommendations.length > 0) {
            reportText += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:**\n`;
            reportText += recommendations.join('\n') + '\n\n';
        }

        if (achievements.length > 0) {
            reportText += `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üåü`;
        } else {
            reportText += `–ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π! üí™`;
        }

        return reportText;

    } catch (error) {
        console.error(`Error generating daily report for ${telegram_id}:`, error);
        return null;
    }
};

const sendDailyReports = async () => {
    try {
        console.log('üìä –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const { data: users, error } = await supabase
            .from('profiles')
            .select('telegram_id, first_name');

        if (error) {
            console.error('Error fetching users for daily reports:', error);
            return;
        }

        if (!users || users.length === 0) {
            console.log('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤');
            return;
        }

        let sentCount = 0;
        let failedCount = 0;

        for (const user of users) {
            try {
                const report = await generateDailyReport(user.telegram_id);
                
                if (report) {
                    await bot.sendMessage(user.telegram_id, report, {
                        parse_mode: 'Markdown'
                    });
                    sentCount++;
                    console.log(`‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.first_name} (${user.telegram_id})`);
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    await new Promise(resolve => setTimeout(resolve, 100));
                } else {
                    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegram_id} (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`);
                }
            } catch (userError) {
                failedCount++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError.message);
            }
        }

        console.log(`üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ‚úÖ ${sentCount} —É—Å–ø–µ—à–Ω–æ, ‚ùå ${failedCount} –æ—à–∏–±–æ–∫`);

    } catch (error) {
        console.error('Error in sendDailyReports:', error);
    }
};

const setupBot = (app) => {
    const url = process.env.SERVER_URL;
    
    if (!url) {
        throw new Error('SERVER_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ Railway.');
    }

    const webhookPath = `/api/telegram-webhook`;
    const fullWebhookUrl = new URL(webhookPath, url).href;

    console.log(`–ü—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ –∞–¥—Ä–µ—Å—É: ${fullWebhookUrl}`);

    bot.setWebHook(fullWebhookUrl)
        .then(success => {
            if (success) {
                console.log('‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ URL:', fullWebhookUrl);
            } else {
                console.error('‚ùå API Telegram –≤–µ—Ä–Ω—É–ª–æ `false` –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL.');
            }
        })
        .catch(error => {
            console.error('‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –£–°–¢–ê–ù–û–í–ò–¢–¨ –í–ï–ë–•–£–ö ‚ùå‚ùå‚ùå');
            console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error.message);
            if (error.response && error.response.body) {
                console.error('–û—Ç–≤–µ—Ç –æ—Ç Telegram API:', error.response.body);
            }
        });

    app.post(webhookPath, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });

    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Express –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');

    // --- Main Menu Function ---
    const showMainMenu = (chat_id, text) => {
        bot.sendMessage(chat_id, text, {
            reply_markup: {
                keyboard: [
                    [{ text: 'üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ' }],
                    [{ text: '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é' }, { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }],
                    [{ text: 'üèãÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫' }, { text: 'üçΩÔ∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è' }],
                    [{ text: 'üíß –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥—ã' }, { text: 'üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂' }],
                    [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' }]
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            }
        });
    };

    // --- Command Handlers ---
    bot.onText(/\/start/, async (msg) => {
        console.log(`‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${msg.from.id} (${msg.from.first_name})`);
        const { id: telegram_id, username, first_name, last_name } = msg.from;
        const chat_id = msg.chat.id;

        try {
            if (registrationState[telegram_id]) delete registrationState[telegram_id];
            if (manualAddState[telegram_id]) delete manualAddState[telegram_id];

            const { data, error } = await supabase
                .from('profiles')
                .select('telegram_id')
                .eq('telegram_id', telegram_id)
                .single();

            if (error && error.code !== 'PGRST116') throw error;

            if (data) {
                showMainMenu(chat_id, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`);
            } else {
                registrationState[telegram_id] = { step: 'ask_name', data: { telegram_id, username, first_name, last_name, chat_id } };
                bot.sendMessage(chat_id, '–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π. –î–∞–≤–∞–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', {
                    reply_markup: { remove_keyboard: true }
                });
            }
        } catch (dbError) {
            console.error('Error checking user profile:', dbError.message);
            bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    bot.onText(/\/debug/, async (msg) => {
        const telegram_id = msg.from.id;
        const chat_id = msg.chat.id;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data: profile, error: profileError } = await supabase
                .from('profiles')
                .select('*')
                .eq('telegram_id', telegram_id)
                .single();

            if (profileError || !profile) {
                bot.sendMessage(chat_id, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            const { startDate, endDate } = getDateRange('today');

            const { data: allMeals, error: mealsError } = await supabase
                .from('meals')
                .select('*')
                .eq('user_id', profile.id)
                .gte('eaten_at', startDate.toISOString())
                .lte('eaten_at', endDate.toISOString())
                .order('eaten_at', { ascending: false });

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é
            const today = new Date();
            const todayDateString = today.toISOString().split('T')[0];
            
            const todayMeals = allMeals ? allMeals.filter(meal => {
                const mealDate = new Date(meal.eaten_at);
                const mealDateString = mealDate.toISOString().split('T')[0];
                return mealDateString === todayDateString;
            }) : [];

            let debugText = `üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n`;
            debugText += `üë§ –ü—Ä–æ—Ñ–∏–ª—å ID: ${profile.id}\n`;
            debugText += `üìÖ –°–µ–≥–æ–¥–Ω—è: ${todayDateString}\n`;
            debugText += `üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞: ${startDate.toISOString()} - ${endDate.toISOString()}\n`;
            debugText += `üçΩÔ∏è –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: ${allMeals ? allMeals.length : 0}\n`;
            debugText += `üçΩÔ∏è –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayMeals.length}\n\n`;

            if (allMeals && allMeals.length > 0) {
                debugText += `üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ:\n`;
                allMeals.forEach((meal, index) => {
                    const mealDate = new Date(meal.eaten_at);
                    const mealDateString = mealDate.toISOString().split('T')[0];
                    const isToday = mealDateString === todayDateString ? '‚úÖ' : '‚ùå';
                    debugText += `${index + 1}. ${isToday} ${meal.description} (${meal.calories} –∫–∫–∞–ª) - ${mealDate.toLocaleString('ru-RU')} [${mealDateString}]\n`;
                });
            }

            bot.sendMessage(chat_id, debugText);

        } catch (error) {
            console.error('Debug error:', error);
            bot.sendMessage(chat_id, `–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: ${error.message}`);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    bot.onText(/\/test_daily_report/, async (msg) => {
        const telegram_id = msg.from.id;
        const chat_id = msg.chat.id;

        // –ú–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç ID –Ω–∞ –≤–∞—à telegram_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const adminId = '123456789'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à telegram_id
        
        if (telegram_id.toString() === adminId) {
            bot.sendMessage(chat_id, 'üìä –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...');
            await sendDailyReports();
            bot.sendMessage(chat_id, '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
        } else {
            bot.sendMessage(chat_id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    bot.onText(/\/my_report/, async (msg) => {
        const telegram_id = msg.from.id;
        const chat_id = msg.chat.id;
        
        bot.sendMessage(chat_id, 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...');
        
        const report = await generateDailyReport(telegram_id);
        if (report) {
            bot.sendMessage(chat_id, report, { parse_mode: 'Markdown' });
        } else {
            bot.sendMessage(chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.');
        }
    });

    // üîß –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    const ADMIN_IDS = [6103273611]; // –í–∞—à telegram_id
    
    bot.onText(/\/admin_health/, async (msg) => {
        const telegram_id = msg.from.id;
        const chat_id = msg.chat.id;
        
        if (!ADMIN_IDS.includes(telegram_id)) {
            bot.sendMessage(chat_id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
            return;
        }
        
        bot.sendMessage(chat_id, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...');
        const healthStatus = await performHealthCheck();
        
        let statusText = `üè• **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**\n\n`;
        statusText += `‚è∞ –í—Ä–µ–º—è: ${healthStatus.timestamp}\n`;
        statusText += `üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${healthStatus.status === 'healthy' ? '‚úÖ –ó–¥–æ—Ä–æ–≤' : '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã'}\n\n`;
        statusText += `**–°–µ—Ä–≤–∏—Å—ã:**\n`;
        statusText += `ü§ñ OpenAI: ${healthStatus.services.openai === 'healthy' ? '‚úÖ' : '‚ùå'}\n`;
        statusText += `üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${healthStatus.services.database === 'healthy' ? '‚úÖ' : '‚ùå'}\n`;
        
        bot.sendMessage(chat_id, statusText, { parse_mode: 'Markdown' });
    });

    bot.onText(/\/admin_stats/, async (msg) => {
        const telegram_id = msg.from.id;
        const chat_id = msg.chat.id;
        
        if (!ADMIN_IDS.includes(telegram_id)) {
            bot.sendMessage(chat_id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
            return;
        }
        
        bot.sendMessage(chat_id, 'üìà –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        
        try {
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const { data: usersCount } = await supabase
                .from('profiles')
                .select('count');
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            const today = new Date().toISOString().split('T')[0];
            const { data: todayMeals } = await supabase
                .from('meals')
                .select('count')
                .gte('eaten_at', `${today}T00:00:00`)
                .lte('eaten_at', `${today}T23:59:59`);
            
            // Rate limiting —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            const activeUsers = userRateLimits.size;
            
            // Uptime —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            const uptimeSeconds = process.uptime();
            const uptimeMinutes = Math.floor(uptimeSeconds / 60);
            const uptimeHours = Math.floor(uptimeMinutes / 60);
            
            let statsText = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n`;
            statsText += `‚è±Ô∏è Uptime: ${uptimeHours}—á ${uptimeMinutes % 60}–º\n`;
            statsText += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount?.length || 0}\n`;
            statsText += `üçΩÔ∏è –ó–∞–ø–∏—Å–µ–π –æ –µ–¥–µ —Å–µ–≥–æ–¥–Ω—è: ${todayMeals?.length || 0}\n`;
            statsText += `‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}\n`;
            statsText += `üö´ Rate limit –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${[...userRateLimits.values()].filter(requests => requests.length >= RATE_LIMIT_MAX_REQUESTS).length}\n`;
            statsText += `üíæ Memory: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB\n`;
            
            bot.sendMessage(chat_id, statsText, { parse_mode: 'Markdown' });
        } catch (error) {
            bot.sendMessage(chat_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
            logEvent('error', 'Admin stats error', { error: error.toString() });
        }
    });

    // --- Message Handler ---
    bot.on('message', async (msg) => {
        if (msg.text && msg.text.startsWith('/')) return;

        const telegram_id = msg.from.id;
        const chat_id = msg.chat.id;

        // üö´ –ü–†–û–í–ï–†–ö–ê RATE LIMITING
        if (!checkRateLimit(telegram_id)) {
            logEvent('warn', 'Rate limit exceeded', { userId: telegram_id, chat_id });
            await bot.sendMessage(chat_id, '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
            return;
        }

        // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò
        logEvent('info', 'Message received', { 
            userId: telegram_id, 
            chat_id, 
            messageType: msg.photo ? 'photo' : msg.voice ? 'voice' : 'text',
            textLength: msg.text ? msg.text.length : 0
        });

        // --- Keyboard Button Handling ---
        if (msg.text === 'üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ') {
            bot.sendMessage(chat_id, '–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã.');
            return;
        }
        if (msg.text === '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é') {
            manualAddState[telegram_id] = { step: 'awaiting_input' };
            bot.sendMessage(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –µ–≥–æ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: `–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞, 150`', {parse_mode: 'Markdown'});
            return;
        }
        if (msg.text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
            bot.sendMessage(chat_id, '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ó–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'stats_today' }],
                        [{ text: '–ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'stats_week' }],
                        [{ text: '–ó–∞ –º–µ—Å—è—Ü', callback_data: 'stats_month' }]
                    ]
                }
            });
            return;
        }
        if (msg.text === 'üèãÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const { data: profile, error } = await supabase
                    .from('profiles')
                    .select('id, first_name, gender, age, height_cm, weight_kg, goal')
                    .eq('telegram_id', telegram_id)
                    .single();

                if (error || !profile) {
                    bot.sendMessage(chat_id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ /start');
                    return;
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
                bot.sendMessage(chat_id, '–ú–Ω–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –î–∞', callback_data: 'workout_action_yes' }],
                            [{ text: '‚ùå –ù–µ—Ç', callback_data: 'workout_action_no' }],
                            [{ text: 'üîÑ –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ', callback_data: 'workout_action_restart' }]
                        ]
                    }
                });
            } catch (dbError) {
                console.error('Error fetching profile for workout plan:', dbError);
                bot.sendMessage(chat_id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            return;
        }
        if (msg.text === 'üçΩÔ∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const { data: profile, error } = await supabase
                    .from('profiles')
                    .select('id, first_name, gender, age, height_cm, weight_kg, goal, daily_calories, daily_protein, daily_fat, daily_carbs')
                    .eq('telegram_id', telegram_id)
                    .single();

                if (error || !profile) {
                    bot.sendMessage(chat_id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ /start');
                    return;
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
                bot.sendMessage(chat_id, '–ú–Ω–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è?', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –î–∞', callback_data: 'nutrition_action_yes' }],
                            [{ text: '‚ùå –ù–µ—Ç', callback_data: 'nutrition_action_no' }],
                            [{ text: 'üîÑ –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ', callback_data: 'nutrition_action_restart' }]
                        ]
                    }
                });
            } catch (dbError) {
                console.error('Error fetching profile for nutrition plan:', dbError);
                bot.sendMessage(chat_id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            return;
        }
        if (msg.text === 'üíß –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥—ã') {
            showWaterMenu(chat_id, telegram_id);
            return;
        }
        if (msg.text === 'üë§ –ü—Ä–æ—Ñ–∏–ª—å') {
            showProfileMenu(chat_id, telegram_id);
            return;
        }
        if (msg.text === 'üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂') {
            showChallengeMenu(chat_id, telegram_id);
            return;
        }


        // --- Photo Handler ---
        if (msg.photo) {
            await bot.sendChatAction(chat_id, 'typing');
            showTyping(chat_id, 15000); // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
            
            const thinkingMessage = await bot.sendMessage(chat_id, 'üì∏ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ñ–æ—Ç–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
            
            try {
                const photo = msg.photo[msg.photo.length - 1];
                const fileInfo = await bot.getFile(photo.file_id);
                const photoUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
                
                // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                setTimeout(async () => {
                    try {
                        await bot.editMessageText('üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—é –±–ª—é–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ...', {
                            chat_id: chat_id,
                            message_id: undefined
                        });
                    } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                }, 2000);
                
                setTimeout(async () => {
                    try {
                        await bot.editMessageText('üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–∞–≤ –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å...', {
                            chat_id: chat_id,
                            message_id: undefined
                        });
                    } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                }, 6000);
                
                const recognitionResult = await recognizeFoodFromPhoto(photoUrl);

                if (recognitionResult.success) {
                    const mealData = recognitionResult.data;
                    const confirmationId = crypto.randomUUID();
                    mealConfirmationCache[confirmationId] = { ...mealData, meal_type: 'photo', telegram_id };

                    const callback_data = `meal_confirm_${confirmationId}`;
                    const cancel_callback_data = `meal_cancel_${confirmationId}`;
                    const ingredientsString = mealData.ingredients.join(', ');

                    const responseText = `*${mealData.dish_name}* (–ü—Ä–∏–º–µ—Ä–Ω–æ ${mealData.weight_g} –≥)\n\n*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:* ${ingredientsString}\n*–ö–ë–ñ–£:*\n- –ö–∞–ª–æ—Ä–∏–∏: ${mealData.calories} –∫–∫–∞–ª\n- –ë–µ–ª–∫–∏: ${mealData.protein} –≥\n- –ñ–∏—Ä—ã: ${mealData.fat} –≥\n- –£–≥–ª–µ–≤–æ–¥—ã: ${mealData.carbs} –≥\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏?`;

                    await bot.editMessageText(responseText, {
                        chat_id: chat_id,
                        message_id: undefined,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data }, { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: cancel_callback_data }]
                            ]
                        }
                    });
                } else {
                     await bot.editMessageText(`üòï ${recognitionResult.reason}`, {
                        chat_id: chat_id,
                        message_id: undefined
                    });
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:", error);
                await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ.', {
                    chat_id: chat_id,
                    message_id: undefined
                });
            }
            return;
        }

                // --- Voice Message Handler ---
        if (msg.voice) {
            // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            await bot.sendChatAction(chat_id, 'typing');
            try {
                const voice = msg.voice;
                const fileInfo = await bot.getFile(voice.file_id);
                const voiceUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
                
                const transcriptionResult = await processVoiceMessage(voiceUrl);
                
                if (transcriptionResult.success) {
                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

                    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const { data: profile } = await supabase
                        .from('profiles')
                        .select('first_name, gender, age, height_cm, weight_kg, goal, id')
                        .eq('telegram_id', telegram_id)
                        .single();

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    const universalResult = await processUniversalMessage(transcriptionResult.text, profile);
                    
                    if (universalResult.success) {
                        const analysisData = universalResult.data;
                        
                        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        switch (analysisData.action_required) {
                            case 'analyze_food':
                                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É —á–µ—Ä–µ–∑ OpenAI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ö–ë–ñ–£
                                const foodAnalysisResult = await recognizeFoodFromText(analysisData.extracted_data.meal_description || transcriptionResult.text);
                                
                                if (foodAnalysisResult.success) {
                                    const mealData = foodAnalysisResult.data;
                                    const confirmationId = crypto.randomUUID();
                                    mealConfirmationCache[confirmationId] = { ...mealData, meal_type: 'voice', telegram_id };

                                    const callback_data = `meal_confirm_${confirmationId}`;
                                    const cancel_callback_data = `meal_cancel_${confirmationId}`;
                                    const ingredientsString = mealData.ingredients ? mealData.ingredients.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã';

                                    const responseText = `üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –µ–¥–∞:** ${mealData.dish_name}\n\n*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:* ${ingredientsString}\n*–ö–ë–ñ–£:*\n- –ö–∞–ª–æ—Ä–∏–∏: ${mealData.calories} –∫–∫–∞–ª\n- –ë–µ–ª–∫–∏: ${mealData.protein} –≥\n- –ñ–∏—Ä—ã: ${mealData.fat} –≥\n- –£–≥–ª–µ–≤–æ–¥—ã: ${mealData.carbs} –≥\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏?`;

                                    await bot.sendMessage(chat_id, responseText, {
                                        parse_mode: 'Markdown',
                                        reply_markup: {
                                            inline_keyboard: [
                                                [{ text: '‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data }, { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: cancel_callback_data }]
                                            ]
                                        }
                                    });
                                } else {
                                    await bot.sendMessage(chat_id, analysisData.response_text, { parse_mode: 'Markdown' });
                                }
                                break;

                            case 'add_water':
                                // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—É
                                const waterAmount = analysisData.extracted_data.amount_ml;
                                
                                if (waterAmount && waterAmount > 0) {
                                    const result = await addWaterIntake(telegram_id, waterAmount);
                                    
                                    if (result.success) {
                                        const waterStats = await getWaterStats(telegram_id, 'today');
                                        const today = new Date().toISOString().split('T')[0];
                                        const todayWater = waterStats.dailyStats[today] || 0;
                                        const percentage = Math.round((todayWater / waterStats.waterNorm) * 100);
                                        
                                        let responseText = `üíß **–î–æ–±–∞–≤–ª–µ–Ω–æ:** ${waterAmount} –º–ª\n\n`;
                                        responseText += `üìä –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: ${todayWater} / ${waterStats.waterNorm} –º–ª (${percentage}%)\n`;
                                        responseText += `${createProgressBar(todayWater, waterStats.waterNorm)}\n\n`;
                                        
                                        if (percentage >= 100) {
                                            responseText += `üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã!`;
                                        } else {
                                            const remaining = waterStats.waterNorm - todayWater;
                                            responseText += `üí™ –û—Å—Ç–∞–ª–æ—Å—å: ${remaining} –º–ª –¥–æ –Ω–æ—Ä–º—ã`;
                                        }
                                        
                                        await bot.sendMessage(chat_id, responseText, { parse_mode: 'Markdown' });
                                    } else {
                                        await bot.sendMessage(chat_id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã: ${result.error}`);
                                    }
                                } else {
                                    await bot.sendMessage(chat_id, analysisData.response_text, { parse_mode: 'Markdown' });
                                }
                                break;

                            case 'log_workout':
                                // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                                const workoutData = analysisData.extracted_data;
                                
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                                let workoutType = 'other';
                                const workoutText = transcriptionResult.text.toLowerCase();
                                if (workoutText.includes('–±–µ–≥') || workoutText.includes('–ø—Ä–æ–±–µ–≥') || workoutText.includes('–∫–∞—Ä–¥–∏–æ')) {
                                    workoutType = 'cardio';
                                } else if (workoutText.includes('–∑–∞–ª') || workoutText.includes('–∂–∏–º') || workoutText.includes('—Ç—è–≥–∞') || workoutText.includes('—Å–∏–ª–æ–≤')) {
                                    workoutType = 'strength';
                                } else if (workoutText.includes('–π–æ–≥–∞') || workoutText.includes('—Ä–∞—Å—Ç—è–∂–∫–∞') || workoutText.includes('—Å—Ç—Ä–µ—Ç—á')) {
                                    workoutType = 'yoga';
                                } else if (workoutText.includes('–ø–ª–∞–≤–∞–Ω–∏') || workoutText.includes('–±–∞—Å—Å–µ–π–Ω')) {
                                    workoutType = 'swimming';
                                } else if (workoutText.includes('—Ö–æ–¥—å–±–∞') || workoutText.includes('–ø—Ä–æ–≥—É–ª–∫–∞')) {
                                    workoutType = 'walking';
                                } else if (workoutText.includes('hiit') || workoutText.includes('–∏–Ω—Ç–µ—Ä–≤–∞–ª')) {
                                    workoutType = 'hiit';
                                }

                                // –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
                                let duration = 30; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                const durationMatch = transcriptionResult.text.match(/(\d+)\s*(–º–∏–Ω—É—Ç|–º–∏–Ω|—á–∞—Å)/i);
                                if (durationMatch) {
                                    duration = parseInt(durationMatch[1]);
                                    if (durationMatch[2].includes('—á–∞—Å')) {
                                        duration *= 60;
                                    }
                                }

                                // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                                const exercises = workoutData.exercises || [];

                                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
                                const caloriesBurned = calculateCaloriesBurned(workoutType, duration, exercises, profile);

                                const workoutRecord = {
                                    workout_type: workoutType,
                                    exercises: exercises,
                                    duration: duration,
                                    intensity: workoutData.intensity || '—Å—Ä–µ–¥–Ω—è—è',
                                    calories_burned: caloriesBurned,
                                    notes: transcriptionResult.text
                                };

                                const result = await addWorkoutRecord(telegram_id, workoutRecord);
                                
                                if (result.success) {
                                    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É
                                    const progressResult = await getWorkoutPlanProgress(telegram_id);
                                    
                                    let responseText = `üí™ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!**\n\n`;
                                    
                                    if (exercises.length > 0) {
                                        responseText += `üìã **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n`;
                                        exercises.forEach(exercise => {
                                            responseText += `‚Ä¢ ${exercise}\n`;
                                        });
                                        responseText += `\n`;
                                    }
                                    
                                    responseText += `‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${duration} –º–∏–Ω\n`;
                                    responseText += `üî• **–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π:** ~${caloriesBurned} –∫–∫–∞–ª\n`;
                                    responseText += `üíØ **–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:** ${workoutRecord.intensity}\n\n`;
                                    
                                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω
                                    if (progressResult.success) {
                                        responseText += `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É:**\n`;
                                        responseText += `${createWorkoutProgressBar(progressResult.completed, progressResult.planned)}\n`;
                                        responseText += `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${progressResult.completed} –∏–∑ ${progressResult.planned} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n\n`;
                                    }
                                    
                                    responseText += `üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™`;

                                    await bot.editMessageText(responseText, {
                                        chat_id: chat_id,
                                        message_id: undefined,
                                        parse_mode: 'Markdown'
                                    });
                                } else {
                                    await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${result.error}`, {
                                        chat_id: chat_id,
                                        message_id: undefined
                                    });
                                }
                                break;

                            case 'generate_report':
                                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                                const report = await generateDailyReport(telegram_id);
                                
                                if (report.success) {
                                    await bot.sendMessage(chat_id, report.text, { parse_mode: 'Markdown' });
                                } else {
                                    await bot.sendMessage(chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.');
                                }
                                break;

                            case 'analyze_medical':
                                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                                const medicalResult = await analyzeMedicalData(transcriptionResult.text, profile);
                                
                                if (medicalResult.success) {
                                    const data = medicalResult.data;
                                    let responseText = `üî¨ **–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö**\n\n`;
                                    responseText += `üìã **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n${data.detected_parameters.join(', ')}\n\n`;
                                    responseText += `üìä **–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n${data.analysis_summary}\n\n`;
                                    
                                    if (data.nutrition_recommendations.foods_to_include.length > 0) {
                                        responseText += `‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n${data.nutrition_recommendations.foods_to_include.join(', ')}\n\n`;
                                    }
                                    
                                    responseText += `*–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò, –Ω–µ –∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.*`;

                                    await bot.sendMessage(chat_id, responseText, { parse_mode: 'Markdown' });
                                } else {
                                    await bot.sendMessage(chat_id, analysisData.response_text, { parse_mode: 'Markdown' });
                                }
                                break;

                                                    case 'answer_question':
                            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                            await answerUserQuestionStream(chat_id, null, transcriptionResult.text, profile);
                            break;

                        default:
                            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º
                            const fullResponse = `üé§ **–£—Å–ª—ã—à–∞–ª:** "${transcriptionResult.text}"\n\n${analysisData.response_text}`;
                            if (shouldUseStreaming(fullResponse)) {
                                await streamMessage(chat_id, fullResponse, { parse_mode: 'Markdown' });
                            } else {
                                await bot.sendMessage(chat_id, fullResponse, { parse_mode: 'Markdown' });
                            }
                            break;
                        }
                    } else {
                        await bot.sendMessage(chat_id, `üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:** "${transcriptionResult.text}"\n\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`, { parse_mode: 'Markdown' });
                    }
                } else {
                    await bot.sendMessage(chat_id, `‚ùå ${transcriptionResult.error}`);
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
                await bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
            }
            return;
        }

                // --- Document Handler ---
        if (msg.document) {
            // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            await bot.sendChatAction(chat_id, 'typing');
            try {
                const document = msg.document;
                const fileInfo = await bot.getFile(document.file_id);
                const documentUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
                
                // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
                if (document.mime_type && document.mime_type.startsWith('image/')) {
                    const extractionResult = await extractTextFromImage(documentUrl);
                    
                    if (extractionResult.success) {
                        await bot.editMessageText(`üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...`, {
                            chat_id: chat_id,
                            message_id: undefined
                        });

                        const { data: profile } = await supabase
                            .from('profiles')
                            .select('first_name, gender, age, height_cm, weight_kg, goal, id')
                            .eq('telegram_id', telegram_id)
                            .single();

                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        const universalResult = await processUniversalMessage(extractionResult.text, profile);
                        
                        if (universalResult.success) {
                            const analysisData = universalResult.data;
                            
                            // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                            switch (analysisData.action_required) {
                                case 'analyze_medical':
                                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                                    const medicalResult = await analyzeMedicalData(extractionResult.text, profile);
                                    
                                    if (medicalResult.success) {
                                        const data = medicalResult.data;
                                        let responseText = `üî¨ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n`;
                                        responseText += `üìã **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n${data.detected_parameters.join(', ')}\n\n`;
                                        responseText += `üìä **–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n${data.analysis_summary}\n\n`;
                                        
                                        if (data.nutrition_recommendations.foods_to_include.length > 0) {
                                            responseText += `‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n${data.nutrition_recommendations.foods_to_include.join(', ')}\n\n`;
                                        }
                                        
                                        responseText += `*–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò, –Ω–µ –∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.*`;

                                        await bot.editMessageText(responseText, {
                                            chat_id: chat_id,
                                            message_id: undefined,
                                            parse_mode: 'Markdown'
                                        });
                                    } else {
                                        await bot.editMessageText(`üìÑ **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n${extractionResult.text.substring(0, 800)}${extractionResult.text.length > 800 ? '...' : ''}\n\n${analysisData.response_text}`, {
                                            chat_id: chat_id,
                                            message_id: undefined,
                                            parse_mode: 'Markdown'
                                        });
                                    }
                                    break;

                                default:
                                    // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                                    await bot.editMessageText(`üìÑ **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n${extractionResult.text.substring(0, 800)}${extractionResult.text.length > 800 ? '...' : ''}\n\n${analysisData.response_text}`, {
                                        chat_id: chat_id,
                                        message_id: undefined,
                                        parse_mode: 'Markdown'
                                    });
                                    break;
                            }
                        } else {
                            await bot.editMessageText(`üìÑ **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n${extractionResult.text.substring(0, 1000)}${extractionResult.text.length > 1000 ? '...' : ''}`, {
                                chat_id: chat_id,
                                message_id: undefined,
                                parse_mode: 'Markdown'
                            });
                        }
                    } else {
                        await bot.editMessageText(`‚ùå ${extractionResult.error}`, {
                            chat_id: chat_id,
                            message_id: undefined
                        });
                    }
                } else {
                    await bot.editMessageText('–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–∞.', {
                        chat_id: chat_id,
                        message_id: undefined
                    });
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
                await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.', {
                    chat_id: chat_id,
                    message_id: undefined
                });
            }
            return;
        }

        // --- State-based Input Handlers ---
        const registrationStep = registrationState[telegram_id]?.step;
        const manualAddStep = manualAddState[telegram_id]?.step;
        const isWaitingForQuestion = questionState[telegram_id]?.waiting;
        const isWaitingForWater = waterInputState[telegram_id]?.waiting;
        const isWaitingForSteps = challengeStepsState[telegram_id]?.waiting;
        const isEditingProfile = profileEditState[telegram_id]?.field;

        if (isWaitingForQuestion) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ AI
            delete questionState[telegram_id];
            
            // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            await bot.sendChatAction(chat_id, 'typing');
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                const { data: profile } = await supabase
                    .from('profiles')
                    .select('first_name, gender, age, height_cm, weight_kg, goal, daily_calories, daily_protein, daily_fat, daily_carbs')
                    .eq('telegram_id', telegram_id)
                    .single();

                // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Ç–æ–∫–æ–≤–æ–º—É –æ—Ç–≤–µ—Ç—É –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await answerUserQuestionStream(chat_id, null, msg.text, profile);

            } catch (error) {
                console.error("Error answering user question:", error);
                await bot.sendMessage(chat_id, 'ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.');
            }
            return;
        }

        if (isWaitingForWater) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
            delete waterInputState[telegram_id];

            // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–û–î–´
            if (!validateUserInput.waterAmount(msg.text)) {
                logEvent('warn', 'Invalid water amount input', { userId: telegram_id, input: msg.text });
                bot.sendMessage(chat_id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –æ—Ç 1 –¥–æ 5000 –º–ª.');
                return;
            }
            const amount = parseInt(msg.text);

            const result = await addWaterIntake(telegram_id, amount);
            if (result.success) {
                const waterStats = await getWaterStats(telegram_id, 'today');
                const today = new Date().toISOString().split('T')[0];
                const todayWater = waterStats.dailyStats[today] || 0;
                const percentage = Math.round((todayWater / waterStats.waterNorm) * 100);

                let responseText = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${amount} –º–ª –≤–æ–¥—ã\n\n`;
                responseText += `üìä –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: ${todayWater} / ${waterStats.waterNorm} –º–ª (${percentage}%)\n`;
                
                if (percentage >= 100) {
                    responseText += `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã!`;
                } else {
                    const remaining = waterStats.waterNorm - todayWater;
                    responseText += `üí° –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: ${remaining} –º–ª`;
                }

                bot.sendMessage(chat_id, responseText);
            } else {
                bot.sendMessage(chat_id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${result.error}`);
            }
            return;
        }

        if (isWaitingForSteps) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
            delete challengeStepsState[telegram_id];

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ —à–∞–≥–æ–≤
            const stepsAmount = parseInt(msg.text);
            if (isNaN(stepsAmount) || stepsAmount <= 0 || stepsAmount > 100000) {
                bot.sendMessage(chat_id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –æ—Ç 1 –¥–æ 100,000.');
                return;
            }

            const result = await addSteps(telegram_id, stepsAmount);
            if (result.success) {
                await bot.sendMessage(chat_id, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${stepsAmount.toLocaleString()} —à–∞–≥–æ–≤!\n\n–û–±–Ω–æ–≤–ª—è—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    showChallengeMenu(chat_id, telegram_id);
                }, 2000);
            } else {
                bot.sendMessage(chat_id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–≥–æ–≤: ${result.error}`);
            }
            return;
        }

        if (isEditingProfile) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è
            const field = profileEditState[telegram_id].field;
            let value = msg.text.trim();
            let updateField = '';
            let displayName = '';
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            try {
                switch (field) {
                    case 'name':
                        if (value.length < 1 || value.length > 50) {
                            bot.sendMessage(chat_id, '‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                            return;
                        }
                        updateField = 'first_name';
                        displayName = '–ò–º—è';
                        break;
                    case 'age':
                        const age = parseInt(value);
                        if (isNaN(age) || age < 10 || age > 100) {
                            bot.sendMessage(chat_id, '‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                            return;
                        }
                        value = age;
                        updateField = 'age';
                        displayName = '–í–æ–∑—Ä–∞—Å—Ç';
                        break;
                    case 'height':
                        const height = parseInt(value);
                        if (isNaN(height) || height < 100 || height > 250) {
                            bot.sendMessage(chat_id, '‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                            return;
                        }
                        value = height;
                        updateField = 'height_cm';
                        displayName = '–†–æ—Å—Ç';
                        break;
                    case 'weight':
                        const weight = parseFloat(value.replace(',', '.'));
                        if (isNaN(weight) || weight <= 20 || weight > 300) {
                            bot.sendMessage(chat_id, '‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 300 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                            return;
                        }
                        value = weight;
                        updateField = 'weight_kg';
                        displayName = '–í–µ—Å';
                        break;
                    case 'target_weight':
                        const targetWeight = parseFloat(value.replace(',', '.'));
                        if (isNaN(targetWeight) || targetWeight <= 20 || targetWeight > 300) {
                            bot.sendMessage(chat_id, '‚ùå –¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 300 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                            return;
                        }
                        value = targetWeight;
                        updateField = 'target_weight_kg';
                        displayName = '–¶–µ–ª–µ–≤–æ–π –≤–µ—Å';
                        break;
                    case 'timeframe':
                        const timeframe = parseInt(value);
                        if (isNaN(timeframe) || timeframe < 1 || timeframe > 24) {
                            bot.sendMessage(chat_id, '‚ùå –°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 –º–µ—Å—è—Ü–µ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                            return;
                        }
                        value = timeframe;
                        updateField = 'timeframe_months';
                        displayName = '–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏';
                        break;
                    default:
                        bot.sendMessage(chat_id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
                        delete profileEditState[telegram_id];
                        return;
                }
                
                if (!updateField) {
                    bot.sendMessage(chat_id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
                    console.error(`Update field was not set for state field: ${field}`);
                    delete profileEditState[telegram_id];
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const { error } = await supabase
                    .from('profiles')
                    .update({ [updateField]: value })
                    .eq('telegram_id', telegram_id);
                
                if (error) throw error;
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—ã –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–µ—Å, —Ä–æ—Å—Ç –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç
                if (['weight_kg', 'height_cm', 'age'].includes(updateField)) {
                    const { data: profile } = await supabase
                        .from('profiles')
                        .select('*')
                        .eq('telegram_id', telegram_id)
                        .single();
                    
                    if (profile) {
                        await calculateAndSaveNorms(profile);
                    }
                }
                
                bot.sendMessage(chat_id, `‚úÖ ${displayName} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${value}\n\n–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å...`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    showProfileMenu(chat_id, telegram_id);
                }, 2000);
                
            } catch (error) {
                console.error('Error updating profile field:', error);
                bot.sendMessage(chat_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            
            delete profileEditState[telegram_id];
            return;
        }

        if (manualAddStep === 'awaiting_input') {
            delete manualAddState[telegram_id];
            
            // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            await bot.sendChatAction(chat_id, 'typing');
            
            try {
                const parts = msg.text.split(',').map(p => p.trim());
                const description = parts[0];
                const weight = parseInt(parts[1], 10);
                if (parts.length !== 2 || !description || isNaN(weight) || weight <= 0) {
                     await bot.sendMessage(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ù–∞–∑–≤–∞–Ω–∏–µ, –ì—Ä–∞–º–º—ã`.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: `–ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏—Ü–µ–π, 150`', {
                        parse_mode: 'Markdown'
                    });
                    return;
                }

                const recognitionResult = await recognizeFoodFromText(msg.text);
                if (recognitionResult.success) {
                    const mealData = recognitionResult.data;
                    const confirmationId = crypto.randomUUID();
                    mealConfirmationCache[confirmationId] = { ...mealData, meal_type: 'manual', telegram_id };

                    const callback_data = `meal_confirm_${confirmationId}`;
                    const cancel_callback_data = `meal_cancel_${confirmationId}`;
                    const ingredientsString = mealData.ingredients ? mealData.ingredients.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã';

                    const responseText = `*${mealData.dish_name}* (–ü—Ä–∏–º–µ—Ä–Ω–æ ${mealData.weight_g} –≥)\n\n*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:* ${ingredientsString}\n*–ö–ë–ñ–£:*\n- –ö–∞–ª–æ—Ä–∏–∏: ${mealData.calories} –∫–∫–∞–ª\n- –ë–µ–ª–∫–∏: ${mealData.protein} –≥\n- –ñ–∏—Ä—ã: ${mealData.fat} –≥\n- –£–≥–ª–µ–≤–æ–¥—ã: ${mealData.carbs} –≥\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏?`;

                    await bot.sendMessage(chat_id, responseText, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data }, { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: cancel_callback_data }]
                            ]
                        }
                    });
                } else {
                     await bot.sendMessage(chat_id, `üòï ${recognitionResult.reason}`);
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞:", error);
                await bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.');
            }
            return;
        }

        if (registrationStep) {
            const state = registrationState[telegram_id];
            switch (registrationStep) {
                case 'ask_name':
                    const { data: existingProfile } = await supabase.from('profiles').select('telegram_id').eq('telegram_id', telegram_id).single();
                    if (existingProfile) {
                        logEvent('warn', 'Duplicate registration attempt', { userId: telegram_id });
                        delete registrationState[telegram_id];
                        showMainMenu(chat_id, '–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–æ—Ç —Ç–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:');
                        return;
                    }
                    
                    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ú–ï–ù–ò
                    if (!validateUserInput.name(msg.text)) {
                        bot.sendMessage(chat_id, '‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        return;
                    }
                    
                    state.data.first_name = msg.text.trim();
                    state.step = 'ask_gender';
                    logEvent('info', 'Registration name validated', { userId: telegram_id, name: msg.text.trim() });
                    
                    bot.sendMessage(chat_id, '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ú—É–∂—Å–∫–æ–π', callback_data: 'register_gender_male' }],
                                [{ text: '–ñ–µ–Ω—Å–∫–∏–π', callback_data: 'register_gender_female' }]
                            ]
                        }
                    });
                    break;
                case 'ask_age':
                    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–û–ó–†–ê–°–¢–ê
                    if (!validateUserInput.age(msg.text)) {
                        bot.sendMessage(chat_id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 120 –ª–µ—Ç).'); 
                        return;
                    }
                    const age = parseInt(msg.text, 10);
                    state.data.age = age;
                    state.step = 'ask_height';
                    logEvent('info', 'Registration age validated', { userId: telegram_id, age });
                    bot.sendMessage(chat_id, '–ü–æ–Ω—è–ª. –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?');
                    break;
                case 'ask_height':
                    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–û–°–¢–ê
                    if (!validateUserInput.height(msg.text)) {
                        bot.sendMessage(chat_id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º).'); 
                        return;
                    }
                    const height = parseInt(msg.text, 10);
                    state.data.height_cm = height;
                    state.step = 'ask_weight';
                    logEvent('info', 'Registration height validated', { userId: telegram_id, height });
                    bot.sendMessage(chat_id, '–ò –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö? (–ú–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 65.5)');
                    break;
                case 'ask_weight':
                    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–ï–°–ê
                    if (!validateUserInput.weight(msg.text.replace(',', '.'))) {
                        bot.sendMessage(chat_id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 1 –¥–æ 300 –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5).'); 
                        return;
                    }
                    const weight = parseFloat(msg.text.replace(',', '.'));
                    state.data.weight_kg = weight;
                    state.step = 'ask_goal';
                    logEvent('info', 'Registration weight validated', { userId: telegram_id, weight });
                    bot.sendMessage(chat_id, '–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –∫–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ', callback_data: 'register_goal_lose' }],
                                [{ text: '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', callback_data: 'register_goal_maintain' }],
                                [{ text: 'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã', callback_data: 'register_goal_gain' }]
                            ]
                        }
                    });
                    break;
            }
        }

        // --- Plan State Handlers ---
        const workoutState = workoutPlanState[telegram_id];
        const nutritionState = nutritionPlanState[telegram_id];

        if (workoutState) {
            if (workoutState.step === 'ask_target_weight') {
                const targetWeight = parseFloat(msg.text.replace(',', '.'));
                if (isNaN(targetWeight) || targetWeight <= 0 || targetWeight > 300) {
                    bot.sendMessage(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 300 –∫–≥)');
                    return;
                }
                
                workoutState.data.target_weight_kg = targetWeight;
                workoutState.step = 'ask_timeframe';
                
                bot.sendMessage(chat_id, `–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–π—Ç–∏? (–≤ –º–µ—Å—è—Ü–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 6)\n\n**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–µ–º–ø:**\n‚Ä¢ –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: 0.5-1 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é\n‚Ä¢ –î–ª—è –Ω–∞–±–æ—Ä–∞: 0.2-0.5 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é`, {
                    parse_mode: 'Markdown'
                });
                return;
            }
            
            if (workoutState.step === 'ask_timeframe') {
                const timeframe = parseInt(msg.text);
                if (isNaN(timeframe) || timeframe <= 0 || timeframe > 24) {
                    bot.sendMessage(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24 –º–µ—Å—è—Ü–µ–≤)');
                    return;
                }
                
                workoutState.data.timeframe_months = timeframe;
                workoutState.step = 'ask_experience';
                
                bot.sendMessage(chat_id, '–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ù–æ–≤–∏—á–æ–∫ (–º–µ–Ω—å—à–µ 6 –º–µ—Å—è—Ü–µ–≤)', callback_data: 'workout_exp_beginner' }],
                            [{ text: '–°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ - 2 –≥–æ–¥–∞)', callback_data: 'workout_exp_intermediate' }],
                            [{ text: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª—å—à–µ 2 –ª–µ—Ç)', callback_data: 'workout_exp_advanced' }]
                        ]
                    }
                });
                return;
            }
        }

        if (nutritionState) {
            if (nutritionState.step === 'ask_target_weight') {
                const targetWeight = parseFloat(msg.text.replace(',', '.'));
                if (isNaN(targetWeight) || targetWeight <= 0 || targetWeight > 300) {
                    bot.sendMessage(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 300 –∫–≥)');
                    return;
                }
                
                nutritionState.data.target_weight_kg = targetWeight;
                nutritionState.step = 'ask_timeframe';
                
                bot.sendMessage(chat_id, `–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–π—Ç–∏? (–≤ –º–µ—Å—è—Ü–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 6)\n\n**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–µ–º–ø:**\n‚Ä¢ –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: 0.5-1 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é\n‚Ä¢ –î–ª—è –Ω–∞–±–æ—Ä–∞: 0.2-0.5 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é`, {
                    parse_mode: 'Markdown'
                });
                return;
            }
            
            if (nutritionState.step === 'ask_timeframe') {
                const timeframe = parseInt(msg.text);
                if (isNaN(timeframe) || timeframe <= 0 || timeframe > 24) {
                    bot.sendMessage(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24 –º–µ—Å—è—Ü–µ–≤)');
                    return;
                }
                
                nutritionState.data.timeframe_months = timeframe;
                nutritionState.step = 'ask_preferences';
                
                bot.sendMessage(chat_id, '–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–∏—â–µ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–û–±—ã—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', callback_data: 'nutrition_pref_regular' }],
                            [{ text: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ', callback_data: 'nutrition_pref_vegetarian' }],
                            [{ text: '–í–µ–≥–∞–Ω—Å—Ç–≤–æ', callback_data: 'nutrition_pref_vegan' }],
                            [{ text: '–ö–µ—Ç–æ-–¥–∏–µ—Ç–∞', callback_data: 'nutrition_pref_keto' }]
                        ]
                    }
                });
                return;
            }
        }

        // --- Universal Text Message Handler ---
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–ª–æ –Ω–∏ –≤ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã—à–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
        if (msg.text && !msg.text.startsWith('/')) {
            try {
                // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è –∏ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                await bot.sendChatAction(chat_id, 'typing');
                const statusMessage = await bot.sendMessage(chat_id, 'ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
                
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ 
                const profilePromise = supabase
                    .from('profiles')
                    .select('first_name, gender, age, height_cm, weight_kg, goal, id')
                    .eq('telegram_id', telegram_id)
                    .single();

                await new Promise(resolve => setTimeout(resolve, 600));
                await bot.editMessageText('üí≠ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...', {
                    chat_id: chat_id,
                    message_id: statusMessage.message_id
                });

                // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è
                const { data: profile } = await profilePromise;
                const universalResult = await processUniversalMessage(msg.text, profile);
                
                if (universalResult.success) {
                    const analysisData = universalResult.data;
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    switch (analysisData.action_required) {
                        case 'analyze_food':
                            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É —á–µ—Ä–µ–∑ OpenAI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ö–ë–ñ–£
                            const foodAnalysisResult = await recognizeFoodFromText(analysisData.extracted_data.meal_description || msg.text);
                            
                            if (foodAnalysisResult.success) {
                                const mealData = foodAnalysisResult.data;
                                const confirmationId = crypto.randomUUID();
                                mealConfirmationCache[confirmationId] = { ...mealData, meal_type: 'text', telegram_id };

                                const callback_data = `meal_confirm_${confirmationId}`;
                                const cancel_callback_data = `meal_cancel_${confirmationId}`;
                                const ingredientsString = mealData.ingredients ? mealData.ingredients.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã';

                                const responseText = `üí¨ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –µ–¥–∞:** ${mealData.dish_name}\n\n*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:* ${ingredientsString}\n*–ö–ë–ñ–£:*\n- –ö–∞–ª–æ—Ä–∏–∏: ${mealData.calories} –∫–∫–∞–ª\n- –ë–µ–ª–∫–∏: ${mealData.protein} –≥\n- –ñ–∏—Ä—ã: ${mealData.fat} –≥\n- –£–≥–ª–µ–≤–æ–¥—ã: ${mealData.carbs} –≥\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏?`;

                                await bot.editMessageText(responseText, {
                                    chat_id: chat_id,
                                    message_id: statusMessage.message_id,
                                    parse_mode: 'Markdown',
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{ text: '‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data }, { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: cancel_callback_data }]
                                        ]
                                    }
                                });
                            } else {
                                await bot.editMessageText(analysisData.response_text, {
                                    chat_id: chat_id,
                                    message_id: statusMessage.message_id,
                                    parse_mode: 'Markdown'
                                });
                            }
                            break;

                        case 'add_water':
                            // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—É
                            const waterAmount = analysisData.extracted_data.amount_ml;
                            
                            if (waterAmount && waterAmount > 0) {
                                const result = await addWaterIntake(telegram_id, waterAmount);
                                
                                if (result.success) {
                                    const waterStats = await getWaterStats(telegram_id, 'today');
                                    const today = new Date().toISOString().split('T')[0];
                                    const todayWater = waterStats.dailyStats[today] || 0;
                                    const percentage = Math.round((todayWater / waterStats.waterNorm) * 100);
                                    
                                    let responseText = `üíß **–î–æ–±–∞–≤–ª–µ–Ω–æ:** ${waterAmount} –º–ª\n\n`;
                                    responseText += `üìä –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: ${todayWater} / ${waterStats.waterNorm} –º–ª (${percentage}%)\n`;
                                    responseText += `${createProgressBar(todayWater, waterStats.waterNorm)}\n\n`;
                                    
                                    if (percentage >= 100) {
                                        responseText += `üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã!`;
                                    } else {
                                        const remaining = waterStats.waterNorm - todayWater;
                                        responseText += `üí™ –û—Å—Ç–∞–ª–æ—Å—å: ${remaining} –º–ª –¥–æ –Ω–æ—Ä–º—ã`;
                                    }
                                    
                                    await bot.editMessageText(responseText, {
                                        chat_id: chat_id,
                                        message_id: statusMessage.message_id,
                                        parse_mode: 'Markdown'
                                    });
                                } else {
                                    await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã: ${result.error}`, {
                                        chat_id: chat_id,
                                        message_id: statusMessage.message_id
                                    });
                                }
                            } else {
                                await bot.editMessageText(analysisData.response_text, {
                                    chat_id: chat_id,
                                    message_id: undefined,
                                    parse_mode: 'Markdown'
                                });
                            }
                            break;

                        case 'log_workout':
                            // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                            const workoutData = analysisData.extracted_data;
                            
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                            let workoutType = 'other';
                            const workoutText = msg.text.toLowerCase();
                            if (workoutText.includes('–±–µ–≥') || workoutText.includes('–ø—Ä–æ–±–µ–≥') || workoutText.includes('–∫–∞—Ä–¥–∏–æ')) {
                                workoutType = 'cardio';
                            } else if (workoutText.includes('–∑–∞–ª') || workoutText.includes('–∂–∏–º') || workoutText.includes('—Ç—è–≥–∞') || workoutText.includes('—Å–∏–ª–æ–≤')) {
                                workoutType = 'strength';
                            } else if (workoutText.includes('–π–æ–≥–∞') || workoutText.includes('—Ä–∞—Å—Ç—è–∂–∫–∞') || workoutText.includes('—Å—Ç—Ä–µ—Ç—á')) {
                                workoutType = 'yoga';
                            } else if (workoutText.includes('–ø–ª–∞–≤–∞–Ω–∏') || workoutText.includes('–±–∞—Å—Å–µ–π–Ω')) {
                                workoutType = 'swimming';
                            } else if (workoutText.includes('—Ö–æ–¥—å–±–∞') || workoutText.includes('–ø—Ä–æ–≥—É–ª–∫–∞')) {
                                workoutType = 'walking';
                            } else if (workoutText.includes('hiit') || workoutText.includes('–∏–Ω—Ç–µ—Ä–≤–∞–ª')) {
                                workoutType = 'hiit';
                            }

                            // –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
                            let duration = 30; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            const durationMatch = msg.text.match(/(\d+)\s*(–º–∏–Ω—É—Ç|–º–∏–Ω|—á–∞—Å)/i);
                            if (durationMatch) {
                                duration = parseInt(durationMatch[1]);
                                if (durationMatch[2].includes('—á–∞—Å')) {
                                    duration *= 60;
                                }
                            }

                            // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                            const exercises = workoutData.exercises || [];

                            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
                            const caloriesBurned = calculateCaloriesBurned(workoutType, duration, exercises, profile);

                            const workoutRecord = {
                                workout_type: workoutType,
                                exercises: exercises,
                                duration: duration,
                                intensity: workoutData.intensity || '—Å—Ä–µ–¥–Ω—è—è',
                                calories_burned: caloriesBurned,
                                notes: msg.text
                            };

                            const result = await addWorkoutRecord(telegram_id, workoutRecord);
                            
                            if (result.success) {
                                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É
                                const progressResult = await getWorkoutPlanProgress(telegram_id);
                                
                                let responseText = `üí™ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!**\n\n`;
                                
                                if (exercises.length > 0) {
                                    responseText += `üìã **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n`;
                                    exercises.forEach(exercise => {
                                        responseText += `‚Ä¢ ${exercise}\n`;
                                    });
                                    responseText += `\n`;
                                }
                                
                                responseText += `‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${duration} –º–∏–Ω\n`;
                                responseText += `üî• **–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π:** ~${caloriesBurned} –∫–∫–∞–ª\n`;
                                responseText += `üíØ **–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:** ${workoutRecord.intensity}\n\n`;
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω
                                if (progressResult.success) {
                                    responseText += `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É:**\n`;
                                    responseText += `${createWorkoutProgressBar(progressResult.completed, progressResult.planned)}\n`;
                                    responseText += `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${progressResult.completed} –∏–∑ ${progressResult.planned} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n\n`;
                                }
                                
                                responseText += `üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™`;

                                await bot.editMessageText(responseText, {
                                    chat_id: chat_id,
                                    message_id: statusMessage.message_id,
                                    parse_mode: 'Markdown'
                                });
                            } else {
                                await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${result.error}`, {
                                    chat_id: chat_id,
                                    message_id: statusMessage.message_id
                                });
                            }
                            break;

                        case 'generate_report':
                            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                            const report = await generateDailyReport(telegram_id);
                            
                            if (report.success) {
                                await bot.editMessageText(report.text, {
                                    chat_id: chat_id,
                                    message_id: statusMessage.message_id,
                                    parse_mode: 'Markdown'
                                });
                            } else {
                                await bot.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.', {
                                    chat_id: chat_id,
                                    message_id: statusMessage.message_id
                                });
                            }
                            break;

                        case 'analyze_medical':
                            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                            const medicalResult = await analyzeMedicalData(msg.text, profile);
                            
                            if (medicalResult.success) {
                                const data = medicalResult.data;
                                let responseText = `üî¨ **–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö**\n\n`;
                                responseText += `üìã **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n${data.detected_parameters.join(', ')}\n\n`;
                                responseText += `üìä **–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n${data.analysis_summary}\n\n`;
                                
                                if (data.nutrition_recommendations.foods_to_include.length > 0) {
                                    responseText += `‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n${data.nutrition_recommendations.foods_to_include.join(', ')}\n\n`;
                                }
                                
                                responseText += `*–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò, –Ω–µ –∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.*`;

                                await bot.editMessageText(responseText, {
                                    chat_id: chat_id,
                                    message_id: statusMessage.message_id,
                                    parse_mode: 'Markdown'
                                });
                            } else {
                                await bot.editMessageText(analysisData.response_text, {
                                    chat_id: chat_id,
                                    message_id: statusMessage.message_id,
                                    parse_mode: 'Markdown'
                                });
                            }
                            break;

                        case 'answer_question':
                            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                            await answerUserQuestionStream(chat_id, null, msg.text, profile);
                            break;

                        default:
                            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await bot.editMessageText(analysisData.response_text, {
                                chat_id: chat_id,
                                message_id: statusMessage.message_id,
                                parse_mode: 'Markdown'
                            });
                            break;
                    }
                } else {
                    await bot.editMessageText('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.', {
                        chat_id: chat_id,
                        message_id: statusMessage.message_id
                    });
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
                await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', {
                    chat_id: chat_id,
                    message_id: statusMessage.message_id
                });
            }
        }
    });

    // --- Callback Query Handler ---
    bot.on('callback_query', async (callbackQuery) => {
        const msg = callbackQuery.message;
        const telegram_id = callbackQuery.from.id;
        const chat_id = msg.chat.id;
        const data = callbackQuery.data;

        const [action, ...params] = data.split('_');
        
        console.log(`>>> CALLBACK: User: ${telegram_id}, Data: ${data}, Action: ${action}, Params: ${params}`);
        
        // --- Challenge Callbacks ---
        if (data.startsWith('challenge_')) {
            await bot.answerCallbackQuery(callbackQuery.id);
            
            if (data.startsWith('challenge_add_steps_')) {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
                const stepsAmount = parseInt(data.split('_')[3]);
                const result = await addSteps(telegram_id, stepsAmount);
                
                if (result.success) {
                    await bot.editMessageText(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${stepsAmount} —à–∞–≥–æ–≤!\n\n–û–±–Ω–æ–≤–ª—è—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...`, {
                        chat_id, message_id: msg.message_id
                    });
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        showChallengeMenu(chat_id, telegram_id);
                    }, 2000);
                } else {
                    await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–≥–æ–≤: ${result.error}`, {
                        chat_id, message_id: msg.message_id
                    });
                }
                
            } else if (data === 'challenge_add_custom_steps') {
                // –í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
                challengeStepsState[telegram_id] = { waiting: true };
                await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤:\n\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: 7500)', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: null
                });
                
            } else if (data === 'challenge_stats') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const challengeResult = await getCurrentChallenge();
                const stepsStats = await getStepsStats(telegram_id, 'week');
                
                if (challengeResult.success && stepsStats.success) {
                    const challenge = challengeResult.data;
                    const totalSteps = stepsStats.totalSteps;
                    const progress = Math.min(Math.round((totalSteps / challenge.target_value) * 100), 100);
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                    const today = new Date();
                    const weekStart = new Date();
                    const day = weekStart.getDay();
                    const diff = weekStart.getDate() - day + (day === 0 ? -6 : 1);
                    weekStart.setDate(diff);
                    
                    let statsText = `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ï–î–ï–õ–ò**\n\n`;
                    statsText += `üèÜ **–ß–µ–ª–ª–µ–Ω–¥–∂:** ${challenge.title}\n`;
                    statsText += `üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${totalSteps.toLocaleString()} / ${challenge.target_value.toLocaleString()} ${challenge.unit}\n`;
                    statsText += `üìà **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** ${progress}%\n\n`;
                    
                    statsText += `üìÖ **–ü–æ –¥–Ω—è–º:**\n`;
                    const dayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
                    
                    for (let i = 0; i < 7; i++) {
                        const currentDay = new Date(weekStart);
                        currentDay.setDate(weekStart.getDate() + i);
                        const dateString = currentDay.toISOString().split('T')[0];
                        const daySteps = stepsStats.byDate[dateString] || 0;
                        const isToday = dateString === today.toISOString().split('T')[0];
                        
                        statsText += `${dayNames[i]}: ${daySteps.toLocaleString()} —à–∞–≥–æ–≤ ${isToday ? 'üëà' : ''}\n`;
                    }
                    
                    if (progress >= 100) {
                        statsText += `\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ß–µ–ª–ª–µ–Ω–¥–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω!`;
                    } else {
                        const remaining = challenge.target_value - totalSteps;
                        const daysLeft = 7 - ((today.getDay() + 6) % 7);
                        const avgNeeded = daysLeft > 0 ? Math.ceil(remaining / daysLeft) : remaining;
                        statsText += `\nüí™ –û—Å—Ç–∞–ª–æ—Å—å: ${remaining.toLocaleString()} —à–∞–≥–æ–≤`;
                        if (daysLeft > 0) {
                            statsText += `\nüìç –í —Å—Ä–µ–¥–Ω–µ–º ${avgNeeded.toLocaleString()} —à–∞–≥–æ–≤/–¥–µ–Ω—å`;
                        }
                    }
                    
                    await bot.editMessageText(statsText, {
                        chat_id, message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É', callback_data: 'challenge_back' }]
                            ]
                        }
                    });
                } else {
                    await bot.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', {
                        chat_id, message_id: msg.message_id
                    });
                }
                
            } else if (data === 'challenge_back') {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —á–µ–ª–ª–µ–Ω–¥–∂–∞
                showChallengeMenu(chat_id, telegram_id);
            }
            
            return;
        }
        
        // --- Plan Action Callbacks ---
        if (data.startsWith('workout_action_') || data.startsWith('nutrition_action_')) {
        await bot.answerCallbackQuery(callbackQuery.id);

            const [planType, , actionType] = data.split('_');
            
            if (actionType === 'no') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ—Ç" - –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
                questionState[telegram_id] = { waiting: true };
                await bot.editMessageText('–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å? ü§î\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏, –∫–∞–ª–æ—Ä–∏—è—Ö, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: null
                });
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const profileFields = planType === 'workout' 
                ? 'id, first_name, gender, age, height_cm, weight_kg, goal'
                : 'id, first_name, gender, age, height_cm, weight_kg, goal, daily_calories, daily_protein, daily_fat, daily_carbs';
                
            const { data: profile } = await supabase
                .from('profiles')
                .select(profileFields)
                .eq('telegram_id', telegram_id)
                .single();

            if (!profile) {
                await bot.editMessageText('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                    chat_id, message_id: msg.message_id
                });
                return;
            }

            if (actionType === 'restart') {
                // –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                const tableName = planType === 'workout' ? 'workout_plan_data' : 'nutrition_plan_data';
                await supabase
                    .from(tableName)
                    .delete()
                    .eq('user_id', profile.id);

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (planType === 'workout') {
                    workoutPlanState[telegram_id] = { 
                        step: 'ask_experience', 
                        data: { priority_zones: [] },
                        profileData: profile 
                    };

                    await bot.editMessageText('–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™\n\n–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?', {
                        chat_id, message_id: msg.message_id,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ù–æ–≤–∏—á–æ–∫ (–º–µ–Ω—å—à–µ 6 –º–µ—Å—è—Ü–µ–≤)', callback_data: 'workout_exp_beginner' }],
                                [{ text: '–°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ - 2 –≥–æ–¥–∞)', callback_data: 'workout_exp_intermediate' }],
                                [{ text: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª—å—à–µ 2 –ª–µ—Ç)', callback_data: 'workout_exp_advanced' }]
                            ]
                        }
                    });
                } else {
                    nutritionPlanState[telegram_id] = { 
                        step: 'ask_preferences', 
                        data: {},
                        profileData: profile 
                    };

                    await bot.editMessageText('–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è üçΩÔ∏è\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?', {
                        chat_id, message_id: msg.message_id,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–û–±—ã—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', callback_data: 'nutrition_pref_regular' }],
                                [{ text: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ', callback_data: 'nutrition_pref_vegetarian' }],
                                [{ text: '–í–µ–≥–∞–Ω—Å—Ç–≤–æ', callback_data: 'nutrition_pref_vegan' }],
                                [{ text: '–ö–µ—Ç–æ-–¥–∏–µ—Ç–∞', callback_data: 'nutrition_pref_keto' }]
                            ]
                        }
                    });
                }
            } else if (actionType === 'yes') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–∞" - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                const tableName = planType === 'workout' ? 'workout_plan_data' : 'nutrition_plan_data';
                const { data: existingData } = await supabase
                    .from(tableName)
                    .select('*')
                    .eq('user_id', profile.id)
                    .single();

                if (existingData) {
                    // –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å—Ä–∞–∑—É
                    const planTypeName = planType === 'workout' ? '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫' : '–ø–∏—Ç–∞–Ω–∏—è';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
                    await bot.sendChatAction(chat_id, 'typing');
                    
                    const loadingMessage = await bot.editMessageText(`ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...`, {
                        chat_id, message_id: msg.message_id
                    });
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø–∏–Ω–≥-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    showTyping(chat_id, 30000);

                    try {
                        // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        setTimeout(async () => {
                            try {
                                await bot.editMessageText(`ü§ñ –§–æ—Ä–º–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è ${profile.first_name}...`, {
                                    chat_id, message_id: loadingMessage.message_id
                                });
                            } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                        }, 3000);
                        
                        setTimeout(async () => {
                            try {
                                await bot.editMessageText(`ü§ñ –°–æ–∑–¥–∞—é –ø–ª–∞–Ω ${planTypeName} —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π...`, {
                                    chat_id, message_id: loadingMessage.message_id
                                });
                            } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                        }, 8000);
                        
                        setTimeout(async () => {
                            try {
                                await bot.editMessageText(`ü§ñ –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞... –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!`, {
                                    chat_id, message_id: loadingMessage.message_id
                                });
                            } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                        }, 15000);
                        
                        let planResult;
                        if (planType === 'workout') {
                            const workoutData = {
                                experience: existingData.experience,
                                goal: existingData.goal,
                                priority_zones: existingData.priority_zones,
                                injuries: existingData.injuries,
                                location: existingData.location,
                                frequency: existingData.frequency_per_week,
                                duration: existingData.duration_minutes
                            };
                            planResult = await generateWorkoutPlan(profile, workoutData);
                        } else {
                            const nutritionData = {
                                preferences: existingData.diet_type,
                                activity: existingData.activity_level,
                                allergies: existingData.allergies ? existingData.allergies[0] : 'none',
                                mealsCount: existingData.meals_per_day
                            };
                            planResult = await generateNutritionPlan(profile, nutritionData);
                        }

                        if (planResult.success) {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML-–¥–æ–∫—É–º–µ–Ω—Ç
                            const currentDate = new Date().toLocaleDateString('ru-RU').replace(/\./g, '_');
                            let htmlContent, filename;
                            
                            if (planType === 'workout') {
                                htmlContent = generateWorkoutPlanHTML(planResult.plan, profile, existingData);
                                filename = `–ü–ª–∞–Ω_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫_${profile.first_name}_${currentDate}.html`;
                            } else {
                                htmlContent = generateNutritionPlanHTML(planResult.plan, profile, existingData);
                                filename = `–ü–ª–∞–Ω_–ø–∏—Ç–∞–Ω–∏—è_${profile.first_name}_${currentDate}.html`;
                            }
                            
                            await bot.deleteMessage(chat_id, loadingMessage.message_id);
                            await sendPlanAsDocument(chat_id, planType, htmlContent, filename);
                        } else {
                            await bot.editMessageText(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: ${planResult.error}`, {
                                chat_id,
                                message_id: loadingMessage.message_id
                            });
                        }
                    } catch (error) {
                        console.error(`Error generating ${planType} plan from existing data:`, error);
                        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                            chat_id,
                            message_id: loadingMessage.message_id
                        });
                    }
                } else {
                    // –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if (planType === 'workout') {
                        workoutPlanState[telegram_id] = { 
                            step: 'ask_target_weight', 
                            data: { priority_zones: [] },
                            profileData: profile 
                        };

                        let weightQuestion = '';
                        if (profile.goal === 'lose_weight') {
                            weightQuestion = `–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–∫–∞–∂–∏—Ç–µ:\n\n**–ö–∞–∫–æ–π –≤–µ—Å –¥–ª—è —Å–µ–±—è –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–º?** (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 65.5)\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å: ${profile.weight_kg} –∫–≥`;
                        } else if (profile.goal === 'gain_mass') {
                            weightQuestion = `–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–∫–∞–∂–∏—Ç–µ:\n\n**–î–æ –∫–∞–∫–æ–≥–æ –≤–µ—Å–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É?** (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 80.5)\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å: ${profile.weight_kg} –∫–≥`;
                        } else {
                            weightQuestion = `–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–∫–∞–∂–∏—Ç–µ:\n\n**–ö–∞–∫–æ–π –≤–µ—Å –¥–ª—è —Å–µ–±—è –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è?** (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å: ${profile.weight_kg} –∫–≥`;
                        }

                        await bot.editMessageText(weightQuestion, {
                            chat_id, message_id: msg.message_id,
                            parse_mode: 'Markdown',
                            reply_markup: null
                        });
                    } else {
                        nutritionPlanState[telegram_id] = { 
                            step: 'ask_target_weight', 
                            data: {},
                            profileData: profile 
                        };

                        let weightQuestion = '';
                        if (profile.goal === 'lose_weight') {
                            weightQuestion = `–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è, —Å–∫–∞–∂–∏—Ç–µ:\n\n**–ö–∞–∫–æ–π –≤–µ—Å –¥–ª—è —Å–µ–±—è –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–º?** (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 65.5)\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å: ${profile.weight_kg} –∫–≥`;
                        } else if (profile.goal === 'gain_mass') {
                            weightQuestion = `–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è, —Å–∫–∞–∂–∏—Ç–µ:\n\n**–î–æ –∫–∞–∫–æ–≥–æ –≤–µ—Å–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É?** (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 80.5)\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å: ${profile.weight_kg} –∫–≥`;
                        } else {
                            weightQuestion = `–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è, —Å–∫–∞–∂–∏—Ç–µ:\n\n**–ö–∞–∫–æ–π –≤–µ—Å –¥–ª—è —Å–µ–±—è –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è?** (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å: ${profile.weight_kg} –∫–≥`;
                        }

                        await bot.editMessageText(weightQuestion, {
                            chat_id, message_id: msg.message_id,
                            parse_mode: 'Markdown',
                            reply_markup: null
                        });
                    }
                }
            }
            return;
        }
        
        // --- Water Callbacks ---
        if (action === 'water') {
            await bot.answerCallbackQuery(callbackQuery.id);
            
            if (params[0] === 'add') {
                const amount = parseInt(params[1]);
                const result = await addWaterIntake(telegram_id, amount);
                
                if (result.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                    const waterStats = await getWaterStats(telegram_id, 'today');
                    const today = new Date().toISOString().split('T')[0];
                    const todayWater = waterStats.dailyStats[today] || 0;
                    const percentage = Math.round((todayWater / waterStats.waterNorm) * 100);
                    const progressBar = createProgressBar(todayWater, waterStats.waterNorm);

                    let waterText = `üíß **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥—ã**\n\n`;
                    waterText += `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${amount} –º–ª\n`;
                    waterText += `üìä –°–µ–≥–æ–¥–Ω—è: ${todayWater} / ${waterStats.waterNorm} –º–ª (${percentage}%)\n`;
                    waterText += `${progressBar}\n\n`;
                    waterText += `–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`;

                    await bot.editMessageText(waterText, {
                        chat_id, message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'üíß 100 –º–ª', callback_data: 'water_add_100' },
                                    { text: 'üíß 200 –º–ª', callback_data: 'water_add_200' }
                                ],
                                [
                                    { text: 'üíß 250 –º–ª', callback_data: 'water_add_250' },
                                    { text: 'üíß 500 –º–ª', callback_data: 'water_add_500' }
                                ],
                                [
                                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã', callback_data: 'water_stats' },
                                    { text: '‚úèÔ∏è –°–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'water_custom' }
                                ]
                            ]
                        }
                    });
                } else {
                    await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`, {
                        chat_id, message_id: msg.message_id
                    });
                }
            } else if (params[0] === 'stats') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ã
                bot.sendMessage(chat_id, '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ã?', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ó–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'water_period_today' }],
                            [{ text: '–ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'water_period_week' }],
                            [{ text: '–ó–∞ –º–µ—Å—è—Ü', callback_data: 'water_period_month' }]
                        ]
                    }
                });
            } else if (params[0] === 'period') {
                const period = params[1];
                const waterStats = await getWaterStats(telegram_id, period);
                
                if (waterStats.success) {
                    let periodText = '';
                    if (period === 'today') periodText = '—Å–µ–≥–æ–¥–Ω—è';
                    else if (period === 'week') periodText = '–∑–∞ –Ω–µ–¥–µ–ª—é';
                    else if (period === 'month') periodText = '–∑–∞ –º–µ—Å—è—Ü';

                    let statsText = `üíß **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã ${periodText}**\n\n`;
                    
                    if (waterStats.recordsCount === 0) {
                        statsText += `–ó–∞ ${periodText} –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –≤–æ–¥–µ.`;
                    } else {
                        if (period === 'today') {
                            const today = new Date().toISOString().split('T')[0];
                            const todayWater = waterStats.dailyStats[today] || 0;
                            const percentage = Math.round((todayWater / waterStats.waterNorm) * 100);
                            const progressBar = createProgressBar(todayWater, waterStats.waterNorm);

                            statsText += `üìä –í—ã–ø–∏—Ç–æ: ${todayWater} / ${waterStats.waterNorm} –º–ª (${percentage}%)\n`;
                            statsText += `${progressBar}\n\n`;
                            
                            if (percentage >= 100) {
                                statsText += `üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã!`;
                            } else {
                                const remaining = waterStats.waterNorm - todayWater;
                                statsText += `üí° –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: ${remaining} –º–ª`;
                            }
                        } else {
                            const daysWithData = Object.keys(waterStats.dailyStats).length;
                            const avgDaily = Math.round(waterStats.totalWater / Math.max(daysWithData, 1));
                            
                            statsText += `üìà –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: ${waterStats.totalWater} –º–ª\n`;
                            statsText += `üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: ${daysWithData}\n`;
                            statsText += `üìä –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: ${avgDaily} –º–ª\n`;
                            statsText += `üéØ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: ${waterStats.waterNorm} –º–ª\n\n`;
                            
                            const avgPercentage = Math.round((avgDaily / waterStats.waterNorm) * 100);
                            statsText += `üíØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º—ã: ${avgPercentage}%`;
                        }
                    }

                    await bot.editMessageText(statsText, {
                        chat_id, message_id: msg.message_id,
                        parse_mode: 'Markdown'
                    });
                } else {
                    await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${waterStats.error}`, {
                        chat_id, message_id: msg.message_id
                    });
                }
            } else if (params[0] === 'custom') {
                // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã
                waterInputState[telegram_id] = { waiting: true };
                await bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300):', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: null
                });
            }
            return;
        }

        // --- Registration Callbacks ---
        if (action === 'register' && registrationState[telegram_id]) {
            const state = registrationState[telegram_id];
            const value = params[params.length - 1];
            await bot.answerCallbackQuery(callbackQuery.id);

            if (state.step === 'ask_gender' && params[0] === 'gender') {
                state.data.gender = value;
                state.step = 'ask_age';
                await bot.editMessageText('–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):', {
                    chat_id: chat_id, message_id: msg.message_id,
                });
                return;
            }
            
            if (state.step === 'ask_goal' && params[0] === 'goal') {
                const goalMapping = { 'lose': 'lose_weight', 'maintain': 'maintain_weight', 'gain': 'gain_mass' };
                state.data.goal = goalMapping[value];
                
                try {
                    const { data: newProfile, error } = await supabase.from('profiles').insert([{
                        telegram_id: state.data.telegram_id,
                        username: state.data.username,
                        first_name: state.data.first_name,
                        last_name: state.data.last_name,
                        chat_id: state.data.chat_id,
                        gender: state.data.gender,
                        age: state.data.age,
                        height_cm: state.data.height_cm,
                        weight_kg: state.data.weight_kg,
                        goal: state.data.goal
                    }]).select().single();

                    if (error) throw error;
                    delete registrationState[telegram_id];
                    await calculateAndSaveNorms(newProfile);

                    await bot.editMessageText(`‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.`, {
                        chat_id: chat_id, message_id: msg.message_id,
                    });
                    
                    showMainMenu(chat_id, `–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏. –ß–µ–º –∑–∞–π–º—ë–º—Å—è?`);
                } catch (dbError) {
                    console.error('Error saving user profile:', dbError.message);
                    await bot.editMessageText('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π /start –µ—â–µ —Ä–∞–∑.', {
                        chat_id: chat_id, message_id: msg.message_id,
                    });
                }
                return;
            }
        }

        // --- Meal Confirmation Callbacks ---
        if (action === 'meal') {
            const confirmationAction = params[0]; // 'confirm' or 'cancel'
            const confirmationId = params[1];
            await bot.answerCallbackQuery(callbackQuery.id);

            const mealData = mealConfirmationCache[confirmationId];

            if (!mealData) {
                await bot.editMessageText('ü§î –ü–æ—Ö–æ–∂–µ, —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–¥—É –∑–∞–Ω–æ–≤–æ.', {
                    chat_id, message_id: msg.message_id, reply_markup: null
                });
            return;
        }

            delete mealConfirmationCache[confirmationId];

            if (confirmationAction === 'confirm') {
                try {
                    const { dish_name, calories, protein, fat, carbs, weight_g, meal_type, telegram_id: meal_telegram_id } = mealData;
                    const { data: profile, error: profileError } = await supabase
                        .from('profiles').select('id').eq('telegram_id', meal_telegram_id).single();

                    if (profileError || !profile) throw new Error(`User profile not found for meal save. Telegram ID: ${meal_telegram_id}`);

                    const mealToInsert = {
                        user_id: profile.id,
                        description: dish_name,
                        calories: parseInt(calories),
                        protein: parseFloat(protein),
                        fat: parseFloat(fat),
                        carbs: parseFloat(carbs),
                        weight_g: parseInt(weight_g),
                        meal_type: meal_type,
                        eaten_at: new Date().toISOString()
                    };

                    console.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${meal_telegram_id}:`, mealToInsert);

                    const { error: mealError } = await supabase.from('meals').insert([mealToInsert]);
                    if (mealError) throw mealError;

                    console.log(`‚úÖ –ï–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${meal_telegram_id}`);

                    await bot.editMessageText(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${dish_name} (${calories} –∫–∫–∞–ª).`, {
                        chat_id, message_id: msg.message_id, reply_markup: null
                    });
                } catch(dbError) {
                    console.error('Error saving meal:', dbError.message);
                    await bot.editMessageText('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                        chat_id, message_id: msg.message_id
                    });
                }
            } else { // 'cancel'
                await bot.editMessageText('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
                    chat_id, message_id: msg.message_id, reply_markup: null
                });
            }
            return;
        }

        // --- Stats Callbacks ---
        if (action === 'stats') {
            const period = params[0];
            await bot.answerCallbackQuery(callbackQuery.id);

            try {
                const { data: profile, error: profileError } = await supabase
                    .from('profiles')
                    .select('id, first_name, weight_kg, daily_calories, daily_protein, daily_fat, daily_carbs')
                    .eq('telegram_id', telegram_id)
                    .single();

                if (profileError || !profile) {
                    await bot.editMessageText('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start, —á—Ç–æ–±—ã –≤—Å—ë —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å.', {
                        chat_id, message_id: msg.message_id
                    });
                    return;
                }
                
                let periodText = '';
                if (period === 'today') periodText = '—Å–µ–≥–æ–¥–Ω—è';
                else if (period === 'week') periodText = '—ç—Ç—É –Ω–µ–¥–µ–ª—é';
                else if (period === 'month') periodText = '—ç—Ç–æ—Ç –º–µ—Å—è—Ü';

                const { data: allMeals, error: mealsError } = await supabase
                    .from('meals')
                    .select('calories, protein, fat, carbs, eaten_at, description')
                    .eq('user_id', profile.id)
                    .order('eaten_at', { ascending: false });

                if (mealsError) throw mealsError;

                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
                let meals = allMeals || [];
                if (period === 'today' && meals.length > 0) {
                    const now = new Date();
                    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
                    const todayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                    
                    meals = allMeals.filter(meal => {
                        const mealDate = new Date(meal.eaten_at);
                        return mealDate >= todayStart && mealDate <= todayEnd;
                    });
                } else if (period === 'week' && meals.length > 0) {
                    const now = new Date();
                    const weekStart = new Date(now);
                    weekStart.setDate(now.getDate() - 7);
                    
                    meals = allMeals.filter(meal => new Date(meal.eaten_at) >= weekStart);
                } else if (period === 'month' && meals.length > 0) {
                    const now = new Date();
                    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
                    
                    meals = allMeals.filter(meal => new Date(meal.eaten_at) >= monthStart);
                }

                let statsText;
                if (!meals || meals.length === 0) {
                    statsText = `–ó–∞ ${periodText}, ${profile.first_name}, —É —Ç–µ–±—è –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏.`;
                } else {
                    const totals = meals.reduce((acc, meal) => {
                        acc.calories += meal.calories || 0;
                        acc.protein += meal.protein || 0;
                        acc.fat += meal.fat || 0;
                        acc.carbs += meal.carbs || 0;
                        return acc;
                    }, { calories: 0, protein: 0, fat: 0, carbs: 0 });
                    
                    const formatLine = (consumed, norm) => norm ? `${consumed.toFixed(0)} / ${norm} ` : `${consumed.toFixed(0)} `;

                    const { daily_calories, daily_protein, daily_fat, daily_carbs } = profile;
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
                    let dailyAverageText = '';
                    let totalCaloriesNormText = '';
                    let totalWaterNormText = '';
                    
                    if (period !== 'today') {
                         // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                         let daysInPeriod = 1;
                         if (period === 'week') {
                             daysInPeriod = 7;
                         } else if (period === 'month') {
                             const now = new Date();
                             daysInPeriod = now.getDate(); // –¥–Ω–∏ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
                         }
                         
                         const avgCalories = totals.calories / daysInPeriod;
                         dailyAverageText = `üìà –°—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ: *${avgCalories.toFixed(0)} –∫–∫–∞–ª/–¥–µ–Ω—å*\n\n`;
                         
                         // –û–±—â–∏–π —Ç—Ä–µ–∫–µ—Ä –∫–∞–ª–æ—Ä–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
                         const totalCaloriesNorm = daily_calories * daysInPeriod;
                         const caloriesPercentage = Math.round((totals.calories / totalCaloriesNorm) * 100);
                         totalCaloriesNormText = `\nüéØ **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–ª–æ—Ä–∏–π –∑–∞ ${periodText}:**\n` +
                                               `${totals.calories.toFixed(0)} / ${totalCaloriesNorm} –∫–∫–∞–ª (${caloriesPercentage}%)\n` +
                                               `${createProgressBar(totals.calories, totalCaloriesNorm)}\n`;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ã
                    const waterStats = await getWaterStats(telegram_id, period);
                    let waterText = '';
                    
                    if (waterStats.success) {
                        if (period === 'today') {
                            const today = new Date().toISOString().split('T')[0];
                            const todayWater = waterStats.dailyStats[today] || 0;
                            const waterPercentage = Math.round((todayWater / waterStats.waterNorm) * 100);
                            waterText = `\n\nüíß –í–æ–¥–∞: *${todayWater} / ${waterStats.waterNorm} –º–ª (${waterPercentage}%)*\n` +
                                       `${createProgressBar(todayWater, waterStats.waterNorm)}`;
                        } else {
                            const daysWithData = Object.keys(waterStats.dailyStats).length;
                            if (daysWithData > 0) {
                                const avgDaily = Math.round(waterStats.totalWater / Math.max(daysWithData, 1));
                                const avgPercentage = Math.round((avgDaily / waterStats.waterNorm) * 100);
                                
                                // –û–±—â–∏–π —Ç—Ä–µ–∫–µ—Ä –≤–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
                                let daysInPeriod = 1;
                                if (period === 'week') {
                                    daysInPeriod = 7;
                                } else if (period === 'month') {
                                    const now = new Date();
                                    daysInPeriod = now.getDate();
                                }
                                const totalWaterNorm = waterStats.waterNorm * daysInPeriod;
                                const totalWaterPercentage = Math.round((waterStats.totalWater / totalWaterNorm) * 100);
                                
                                totalWaterNormText = `\nüéØ **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ–¥—ã –∑–∞ ${periodText}:**\n` +
                                                   `${waterStats.totalWater} / ${totalWaterNorm} –º–ª (${totalWaterPercentage}%)\n` +
                                                   `${createProgressBar(waterStats.totalWater, totalWaterNorm)}\n`;
                                
                                waterText = `\n\nüíß –í–æ–¥–∞ —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ: *${avgDaily} –º–ª/–¥–µ–Ω—å (${avgPercentage}% –æ—Ç –Ω–æ—Ä–º—ã)*`;
                            }
                        }
                    }

                    statsText = `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${periodText}, ${profile.first_name}:*\n\n` +
                                `üî• –ö–∞–ª–æ—Ä–∏–∏: *${formatLine(totals.calories, daily_calories)}–∫–∫–∞–ª*\n` +
                                (period === 'today' ? `${createProgressBar(totals.calories, daily_calories)}\n\n` : '') +
                                (period === 'today' ? '' : dailyAverageText) +
                                totalCaloriesNormText +
                                `\n*–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ë–ñ–£:*\n` +
                                `ü•© –ë–µ–ª–∫–∏: ${formatLine(totals.protein, daily_protein)}–≥\n` +
                                `ü•ë –ñ–∏—Ä—ã: ${formatLine(totals.fat, daily_fat)}–≥\n` +
                                `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${formatLine(totals.carbs, daily_carbs)}–≥` +
                                waterText +
                                totalWaterNormText;
                }
                
                await bot.editMessageText(statsText, {
                    chat_id, message_id: msg.message_id, parse_mode: 'Markdown', reply_markup: null
                });

            } catch (dbError) {
                console.error('Error fetching stats:', dbError.message);
                await bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                    chat_id, message_id: msg.message_id
                });
            }
            return;
        }

        // --- Workout Plan Callbacks ---
        if (action === 'workout') {
            const subAction = params[0];
            const value = params[1];
            await bot.answerCallbackQuery(callbackQuery.id);

            const state = workoutPlanState[telegram_id];
            if (!state) {
                await bot.editMessageText('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', {
                    chat_id, message_id: msg.message_id
                });
                return;
            }

            if (state.step === 'ask_experience' && subAction === 'exp') {
                state.data = { ...state.data, experience: value };
                state.step = 'ask_goals';

                await bot.editMessageText('–ö–∞–∫–∞—è –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü–æ—Ö—É–¥–µ–Ω–∏–µ –∏ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ', callback_data: 'workout_goal_weightloss' }],
                            [{ text: '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', callback_data: 'workout_goal_muscle' }],
                            [{ text: '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã', callback_data: 'workout_goal_maintain' }],
                            [{ text: '–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å', callback_data: 'workout_goal_health' }]
                        ]
                    }
                });
            } else if (state.step === 'ask_goals' && subAction === 'goal') {
                state.data = { ...state.data, goal: value };
                state.step = 'ask_priority_zones';

                await bot.editMessageText('–ï—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–°–ø–∏–Ω–∞', callback_data: 'workout_zone_back' }, { text: '–ì—Ä—É–¥—å', callback_data: 'workout_zone_chest' }],
                            [{ text: '–ù–æ–≥–∏', callback_data: 'workout_zone_legs' }, { text: '–ü–ª–µ—á–∏', callback_data: 'workout_zone_shoulders' }],
                            [{ text: '–ö–æ—Ä/–ü—Ä–µ—Å—Å', callback_data: 'workout_zone_core' }, { text: '–†—É–∫–∏', callback_data: 'workout_zone_arms' }],
                            [{ text: '–ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤', callback_data: 'workout_zone_none' }],
                            [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'workout_zones_done' }]
                        ]
                    }
                });
                state.data.priority_zones = [];
                        } else if (state.step === 'ask_priority_zones' && subAction === 'zone') {
                if (value === 'done') {
                    state.step = 'ask_injuries';
                    await bot.editMessageText('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç—Ä–∞–≤–º—ã –∏–ª–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?', {
                        chat_id, message_id: msg.message_id,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ù–µ—Ç —Ç—Ä–∞–≤–º', callback_data: 'workout_injury_none' }],
                                [{ text: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π', callback_data: 'workout_injury_back' }],
                                [{ text: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–µ–Ω—è–º–∏', callback_data: 'workout_injury_knees' }],
                                [{ text: '–î—Ä—É–≥–∏–µ —Ç—Ä–∞–≤–º—ã (–Ω–∞–ø–∏—à—É)', callback_data: 'workout_injury_custom' }]
                            ]
                        }
                    });
                } else if (value === 'none') {
                    state.data.priority_zones = ['none'];
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–Ω–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"
                    state.step = 'ask_injuries';
                    await bot.editMessageText('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç—Ä–∞–≤–º—ã –∏–ª–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?', {
                        chat_id, message_id: msg.message_id,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ù–µ—Ç —Ç—Ä–∞–≤–º', callback_data: 'workout_injury_none' }],
                                [{ text: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π', callback_data: 'workout_injury_back' }],
                                [{ text: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–µ–Ω—è–º–∏', callback_data: 'workout_injury_knees' }],
                                [{ text: '–î—Ä—É–≥–∏–µ —Ç—Ä–∞–≤–º—ã (–Ω–∞–ø–∏—à—É)', callback_data: 'workout_injury_custom' }]
                            ]
                        }
                    });
                } else {
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–æ–Ω—É
                    if (state.data.priority_zones.includes(value)) {
                        // –£–±–∏—Ä–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
                        state.data.priority_zones = state.data.priority_zones.filter(zone => zone !== value);
                    } else {
                        // –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–æ–Ω—É, —É–±–∏—Ä–∞–µ–º "none"
                        if (value !== 'none' && state.data.priority_zones.includes('none')) {
                            state.data.priority_zones = state.data.priority_zones.filter(zone => zone !== 'none');
                        }
                        // –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º "none", –æ—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                        if (value === 'none') {
                            state.data.priority_zones = [];
                        }
                        // –î–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
                        state.data.priority_zones.push(value);
                    }

                    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–æ–Ω
                    const createZoneButton = (zoneName, zoneValue) => {
                        const isSelected = state.data.priority_zones.includes(zoneValue);
                        return { 
                            text: isSelected ? `‚úÖ ${zoneName}` : zoneName, 
                            callback_data: `workout_zone_${zoneValue}` 
                        };
                    };

                    await bot.editMessageText('–ï—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)', {
                        chat_id, message_id: msg.message_id,
                        reply_markup: {
                            inline_keyboard: [
                                [createZoneButton('–°–ø–∏–Ω–∞', 'back'), createZoneButton('–ì—Ä—É–¥—å', 'chest')],
                                [createZoneButton('–ù–æ–≥–∏', 'legs'), createZoneButton('–ü–ª–µ—á–∏', 'shoulders')],
                                [createZoneButton('–ö–æ—Ä/–ü—Ä–µ—Å—Å', 'core'), createZoneButton('–†—É–∫–∏', 'arms')],
                                [createZoneButton('–ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤', 'none')],
                                [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'workout_zones_done' }]
                            ]
                        }
                    });
                }
            } else if (action === 'workout' && subAction === 'zones' && value === 'done') {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–æ–Ω
                await bot.answerCallbackQuery(callbackQuery.id);
                const state = workoutPlanState[telegram_id];
                if (!state || state.step !== 'ask_priority_zones') {
                    await bot.editMessageText('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', {
                        chat_id, message_id: msg.message_id
                    });
                    return;
                }

                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "none"
                if (state.data.priority_zones.length === 0) {
                    state.data.priority_zones = ['none'];
                }
                
                state.step = 'ask_injuries';
                await bot.editMessageText('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç—Ä–∞–≤–º—ã –∏–ª–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ù–µ—Ç —Ç—Ä–∞–≤–º', callback_data: 'workout_injury_none' }],
                            [{ text: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π', callback_data: 'workout_injury_back' }],
                            [{ text: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–µ–Ω—è–º–∏', callback_data: 'workout_injury_knees' }],
                            [{ text: '–î—Ä—É–≥–∏–µ —Ç—Ä–∞–≤–º—ã (–Ω–∞–ø–∏—à—É)', callback_data: 'workout_injury_custom' }]
                        ]
                    }
                });
            } else if (state.step === 'ask_injuries' && subAction === 'injury') {
                 state.data = { ...state.data, injuries: value };
                 state.step = 'ask_location';

                 await bot.editMessageText('–ì–¥–µ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?', {
                     chat_id, message_id: msg.message_id,
                     reply_markup: {
                         inline_keyboard: [
                             [{ text: 'üè† –î–æ–º–∞', callback_data: 'workout_location_home' }],
                             [{ text: 'üèãÔ∏è –í —Å–ø–æ—Ä—Ç–∑–∞–ª–µ', callback_data: 'workout_location_gym' }],
                             [{ text: 'üå≥ –ù–∞ —É–ª–∏—Ü–µ', callback_data: 'workout_location_outdoor' }]
                         ]
                     }
                 });
             } else if (state.step === 'ask_location' && subAction === 'location') {
                 state.data = { ...state.data, location: value };
                 state.step = 'ask_frequency';

                 await bot.editMessageText('–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã –¥–µ–ª–∞—Ç—å?', {
                     chat_id, message_id: msg.message_id,
                     reply_markup: {
                         inline_keyboard: [
                             [{ text: '2 —Ä–∞–∑–∞', callback_data: 'workout_freq_2' }],
                             [{ text: '3 —Ä–∞–∑–∞', callback_data: 'workout_freq_3' }],
                             [{ text: '4 —Ä–∞–∑–∞', callback_data: 'workout_freq_4' }],
                             [{ text: '5+ —Ä–∞–∑', callback_data: 'workout_freq_5' }]
                         ]
                     }
                 });
             } else if (state.step === 'ask_frequency' && subAction === 'freq') {
                 state.data = { ...state.data, frequency: parseInt(value) };
                 state.step = 'ask_duration';

                 await bot.editMessageText('–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–µ–ª—è—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ?', {
                     chat_id, message_id: msg.message_id,
                     reply_markup: {
                         inline_keyboard: [
                             [{ text: '20-30 –º–∏–Ω—É—Ç', callback_data: 'workout_duration_30' }],
                             [{ text: '45-60 –º–∏–Ω—É—Ç', callback_data: 'workout_duration_60' }],
                             [{ text: '60-90 –º–∏–Ω—É—Ç', callback_data: 'workout_duration_90' }]
                         ]
                     }
                 });
             } else if (state.step === 'ask_duration' && subAction === 'duration') {
                 state.data = { ...state.data, duration: parseInt(value) };
                 state.step = 'generate_plan';

                 // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                 const loadingMessage = await bot.editMessageText('ü§ñ –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.', {
                     chat_id, message_id: msg.message_id,
                    reply_markup: null
                });

                 try {
                     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
                     const { data: profile } = await supabase
                         .from('profiles')
                         .select('id')
                         .eq('telegram_id', telegram_id)
                         .single();

                     const workoutData = {
                         user_id: profile.id,
                         experience: state.data.experience,
                         goal: state.data.goal,
                         priority_zones: state.data.priority_zones || ['none'],
                         injuries: state.data.injuries || 'none',
                         location: state.data.location,
                         frequency_per_week: state.data.frequency,
                         duration_minutes: state.data.duration,
                         preferred_types: ['mixed'] // –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                     };

                     // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                     const { data: existingData } = await supabase
                         .from('workout_plan_data')
                         .select('user_id')
                         .eq('user_id', profile.id)
                         .single();

                     let saveError;
                     if (existingData) {
                         // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                         const { error } = await supabase
                             .from('workout_plan_data')
                             .update(workoutData)
                             .eq('user_id', profile.id);
                         saveError = error;
                     } else {
                         // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                         const { error } = await supabase
                             .from('workout_plan_data')
                             .insert(workoutData);
                         saveError = error;
                     }

                     if (saveError) throw saveError;

                     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                     await bot.sendChatAction(chat_id, 'typing');
                     showTyping(chat_id, 25000);
                     
                     // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                     setTimeout(async () => {
                         try {
                             await bot.editMessageText(`ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...`, {
                                 chat_id, message_id: msg.message_id
                             });
                         } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                     }, 2000);
                     
                     setTimeout(async () => {
                         try {
                             await bot.editMessageText(`ü§ñ –§–æ—Ä–º–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...`, {
                                 chat_id, message_id: msg.message_id
                             });
                         } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                     }, 8000);
                     
                     setTimeout(async () => {
                         try {
                             await bot.editMessageText(`ü§ñ –î–æ–±–∞–≤–ª—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏... –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!`, {
                                 chat_id, message_id: msg.message_id
                             });
                         } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                     }, 15000);

                     // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å OpenAI
                     const planResult = await generateWorkoutPlan(state.profileData, state.data);

                     if (planResult.success) {
                         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML-–¥–æ–∫—É–º–µ–Ω—Ç
                         const currentDate = new Date().toLocaleDateString('ru-RU').replace(/\./g, '_');
                         const htmlContent = generateWorkoutPlanHTML(planResult.plan, state.profileData, state.data);
                         const filename = `–ü–ª–∞–Ω_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫_${state.profileData.first_name}_${currentDate}.html`;
                         
                         await bot.deleteMessage(chat_id, msg.message_id);
                         await sendPlanAsDocument(chat_id, 'workout', htmlContent, filename);
                     } else {
                         await bot.editMessageText(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: ${planResult.error}`, {
                             chat_id, message_id: msg.message_id
                         });
                     }

                 } catch (error) {
                     console.error('Error generating workout plan:', error);
                     await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                         chat_id, message_id: msg.message_id
                     });
                 }

                 // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                 delete workoutPlanState[telegram_id];
            }
             return;
        }

        // --- Nutrition Plan Callbacks ---
        if (action === 'nutrition') {
            const subAction = params[0];
            const value = params[1];
            await bot.answerCallbackQuery(callbackQuery.id);

            const state = nutritionPlanState[telegram_id];
            if (!state) {
                await bot.editMessageText('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', {
                    chat_id, message_id: msg.message_id
                });
                return;
            }

            if (state.step === 'ask_preferences' && subAction === 'pref') {
                state.data = { ...state.data, preferences: value };
                state.step = 'ask_activity';

                await bot.editMessageText('–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?', {
                    chat_id, message_id: msg.message_id,
            reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üí∫ –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', callback_data: 'nutrition_activity_sedentary' }],
                            [{ text: 'üö∂ –õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'nutrition_activity_light' }],
                            [{ text: 'üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', callback_data: 'nutrition_activity_active' }],
                            [{ text: 'üèãÔ∏è –¢—è–∂—ë–ª–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞', callback_data: 'nutrition_activity_heavy' }]
                        ]
                    }
                });
            } else if (state.step === 'ask_activity' && subAction === 'activity') {
                state.data = { ...state.data, activity: value };
                state.step = 'ask_allergies';

                await bot.editMessageText('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–∏—â–µ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏?', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π', callback_data: 'nutrition_allergy_none' }],
                            [{ text: '–õ–∞–∫—Ç–æ–∑–∞', callback_data: 'nutrition_allergy_lactose' }],
                            [{ text: '–ì–ª—é—Ç–µ–Ω', callback_data: 'nutrition_allergy_gluten' }],
                            [{ text: '–û—Ä–µ—Ö–∏', callback_data: 'nutrition_allergy_nuts' }],
                            [{ text: '–î—Ä—É–≥–æ–µ (–Ω–∞–ø–∏—à—É —Å–∞–º)', callback_data: 'nutrition_allergy_custom' }]
                        ]
                    }
                });
            } else if (state.step === 'ask_allergies' && subAction === 'allergy') {
                state.data = { ...state.data, allergies: value };
                state.step = 'ask_meals_count';

                await bot.editMessageText('–°–∫–æ–ª—å–∫–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ?', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏—ë–º–∞', callback_data: 'nutrition_meals_three' }],
                            [{ text: '5-6 –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø—Ä–∏—ë–º–æ–≤', callback_data: 'nutrition_meals_five' }]
                        ]
                    }
                });
            } else if (state.step === 'ask_meals_count' && subAction === 'meals') {
                state.data = { ...state.data, mealsCount: value };
                state.step = 'generate_plan';

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
                await bot.sendChatAction(chat_id, 'typing');
                showTyping(chat_id, 25000);
                
                const loadingMessage = await bot.editMessageText('ü§ñ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...', {
                    chat_id, message_id: msg.message_id,
                    reply_markup: null
                });

                try {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
                    const { data: profile } = await supabase
                        .from('profiles')
                        .select('id')
                        .eq('telegram_id', telegram_id)
                        .single();

                    const nutritionData = {
                        user_id: profile.id,
                        activity_level: state.data.activity,
                        calorie_goal: state.profileData.goal, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                        allergies: [state.data.allergies],
                        diet_type: state.data.preferences,
                        meals_per_day: state.data.mealsCount,
                        product_limitations: 'none',
                        supplements_interest: 'no' // –ø–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    };

                    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    const { data: existingData } = await supabase
                        .from('nutrition_plan_data')
                        .select('user_id')
                        .eq('user_id', profile.id)
                        .single();

                    let saveError;
                    if (existingData) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                        const { error } = await supabase
                            .from('nutrition_plan_data')
                            .update(nutritionData)
                            .eq('user_id', profile.id);
                        saveError = error;
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        const { error } = await supabase
                            .from('nutrition_plan_data')
                            .insert(nutritionData);
                        saveError = error;
                    }

                    if (saveError) throw saveError;

                    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    setTimeout(async () => {
                        try {
                            await bot.editMessageText(`ü§ñ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã...`, {
                                chat_id, message_id: loadingMessage.message_id
                            });
                        } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                    }, 3000);
                    
                    setTimeout(async () => {
                        try {
                            await bot.editMessageText(`ü§ñ –ü–æ–¥–±–∏—Ä–∞—é –±–ª—é–¥–∞ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...`, {
                                chat_id, message_id: loadingMessage.message_id
                            });
                        } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                    }, 8000);
                    
                    setTimeout(async () => {
                        try {
                            await bot.editMessageText(`ü§ñ –°–æ—Å—Ç–∞–≤–ª—è—é –Ω–µ–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é... –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!`, {
                                chat_id, message_id: loadingMessage.message_id
                            });
                        } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */ }
                    }, 15000);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å OpenAI
                    const planResult = await generateNutritionPlan(state.profileData, state.data);

                    if (planResult.success) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML-–¥–æ–∫—É–º–µ–Ω—Ç
                        const currentDate = new Date().toLocaleDateString('ru-RU').replace(/\./g, '_');
                        const htmlContent = generateNutritionPlanHTML(planResult.plan, state.profileData, state.data);
                        const filename = `–ü–ª–∞–Ω_–ø–∏—Ç–∞–Ω–∏—è_${state.profileData.first_name}_${currentDate}.html`;
                        
                        await bot.deleteMessage(chat_id, msg.message_id);
                        await sendPlanAsDocument(chat_id, 'nutrition', htmlContent, filename);
                    } else {
                        await bot.editMessageText(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: ${planResult.error}`, {
                            chat_id, message_id: msg.message_id
                        });
                    }

                } catch (error) {
                    console.error('Error generating nutrition plan:', error);
                    await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                        chat_id, message_id: msg.message_id
                    });
                }

                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                delete nutritionPlanState[telegram_id];
            }
            return;
        }

        // --- Profile Edit Callbacks ---
        if (data.startsWith('profile_')) {
            await bot.answerCallbackQuery(callbackQuery.id);
            
            const parts = data.split('_');
            const action = parts[1];
            const field = parts.slice(2).join('_');
            
            if (action === 'edit') {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
                profileEditState[telegram_id] = { field: field };
                
                let fieldName = '';
                let question = '';
                let keyboard = null;
                
                switch (field) {
                    case 'name':
                        fieldName = '–∏–º—è';
                        question = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:';
                        break;
                    case 'age':
                        fieldName = '–≤–æ–∑—Ä–∞—Å—Ç';
                        question = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö):';
                        break;
                    case 'height':
                        fieldName = '—Ä–æ—Å—Ç';
                        question = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):';
                        break;
                    case 'weight':
                        fieldName = '–≤–µ—Å';
                        question = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):';
                        break;
                    case 'target_weight':
                        fieldName = '—Ü–µ–ª–µ–≤–æ–π –≤–µ—Å';
                        question = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥):';
                        break;
                    case 'timeframe':
                        fieldName = '—Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏';
                        question = '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–≤ –º–µ—Å—è—Ü–∞—Ö):';
                        break;
                    case 'goal':
                        fieldName = '—Ü–µ–ª—å';
                        question = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:';
                        keyboard = {
                            inline_keyboard: [
                                [{ text: 'üìâ –ü–æ—Ö—É–¥–µ—Ç—å', callback_data: 'profile_update_goal_lose_weight' }],
                                [{ text: 'üìà –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É', callback_data: 'profile_update_goal_gain_mass' }],
                                [{ text: '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å', callback_data: 'profile_update_goal_maintain' }]
                            ]
                        };
                        break;
                    case 'gender':
                        fieldName = '–ø–æ–ª';
                        question = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:';
                        keyboard = {
                            inline_keyboard: [
                                [{ text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: 'profile_update_gender_male' }],
                                [{ text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: 'profile_update_gender_female' }]
                            ]
                        };
                        break;
                }
                
                await bot.editMessageText(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${fieldName}\n\n${question}`, {
                    chat_id, message_id: msg.message_id,
                    reply_markup: keyboard
                });
                
            } else if (action === 'update') {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–ü–æ–ª, –¶–µ–ª—å)
                const fieldToUpdate = parts[2]; // e.g., 'goal'
                const valueToSave = parts.slice(3).join('_'); // e.g., 'lose_weight'

                let updatePayload = {};
                let fieldNameForMessage = '';
                let displayValue = '';

                if (fieldToUpdate === 'goal') {
                    updatePayload.goal = valueToSave;
                    fieldNameForMessage = '–¶–µ–ª—å';
                    displayValue = valueToSave === 'lose_weight' ? '–ü–æ—Ö—É–¥–µ—Ç—å' :
                                 valueToSave === 'gain_mass' ? '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã' : '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å';
                } else if (fieldToUpdate === 'gender') {
                    updatePayload.gender = valueToSave;
                    fieldNameForMessage = '–ü–æ–ª';
                    displayValue = valueToSave === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π';
                } else {
                    await bot.editMessageText('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                        chat_id, message_id: msg.message_id
                    });
                    return;
                }
                
                try {
                    const { error } = await supabase
                        .from('profiles')
                        .update(updatePayload)
                        .eq('telegram_id', telegram_id);
                    
                    if (error) throw error;
                    
                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—ã, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    const { data: profile } = await supabase
                        .from('profiles')
                        .select('*')
                        .eq('telegram_id', telegram_id)
                        .single();
                    
                    if (profile) {
                        await calculateAndSaveNorms(profile);
                    }
                    
                    await bot.editMessageText(`‚úÖ ${fieldNameForMessage} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${displayValue}\n\n–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å...`, {
                        chat_id, message_id: msg.message_id,
                    });
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        showProfileMenu(chat_id, telegram_id);
                    }, 2000);
                    
                } catch (error) {
                    console.error('Error updating profile:', error);
                    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                        chat_id, message_id: msg.message_id
                    });
                }
                
            } else if (action === 'recalculate') {
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—ã
                try {
                    const { data: profile } = await supabase
                        .from('profiles')
                        .select('*')
                        .eq('telegram_id', telegram_id)
                        .single();
                    
                    if (profile) {
                        await calculateAndSaveNorms(profile);
                        await bot.editMessageText('‚úÖ –î–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã!\n\n–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å...', {
                            chat_id, message_id: msg.message_id
                        });
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                        setTimeout(() => {
                            showProfileMenu(chat_id, telegram_id);
                        }, 2000);
                    } else {
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.', {
                            chat_id, message_id: msg.message_id
                        });
                    }
                } catch (error) {
                    console.error('Error recalculating norms:', error);
                    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –Ω–æ—Ä–º.', {
                        chat_id, message_id: msg.message_id
                    });
                }
            }
            return;
        }

    });
    return bot;
};

// --- Daily Reports Cron Job ---
// –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
cron.schedule('0 9 * * *', () => {
    logEvent('info', 'Daily reports cron job started');
    sendDailyReports();
}, {
    scheduled: true,
    timezone: "Europe/Moscow"
});

// --- Health Check Cron Job ---
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
cron.schedule('*/30 * * * *', async () => {
    try {
        const healthStatus = await performHealthCheck();
        if (healthStatus.status !== 'healthy') {
            logEvent('warn', 'System health degraded', healthStatus);
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        }
    } catch (error) {
        logEvent('error', 'Health check failed', { error: error.toString() });
    }
}, {
    scheduled: true,
    timezone: "Europe/Moscow"
});

// --- Memory Cleanup Cron Job ---
// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ rate limiting –∫–∞–∂–¥—ã–π —á–∞—Å
cron.schedule('0 * * * *', () => {
    const now = Date.now();
    let cleanedUsers = 0;
    
    for (const [userId, requests] of userRateLimits.entries()) {
        const recentRequests = requests.filter(timestamp => now - timestamp < RATE_LIMIT_WINDOW);
        if (recentRequests.length === 0) {
            userRateLimits.delete(userId);
            cleanedUsers++;
        } else {
            userRateLimits.set(userId, recentRequests);
        }
    }
    
    logEvent('info', 'Memory cleanup completed', { 
        cleanedUsers, 
        activeUsers: userRateLimits.size 
    });
}, {
    scheduled: true,
    timezone: "Europe/Moscow"
});

// --- Weekly Challenge Cron Jobs ---
// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
cron.schedule('0 10 * * 1', async () => {
    logEvent('info', 'Weekly challenge creation cron job started');
    try {
        const result = await createWeeklyChallenge();
        if (result.success) {
            logEvent('info', 'New weekly challenge created successfully');
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ
            await sendWeeklyChallengeNotifications('new');
        } else {
            logEvent('error', 'Failed to create weekly challenge', result);
        }
    } catch (error) {
        logEvent('error', 'Error in weekly challenge creation cron job', { error: error.toString() });
    }
}, {
    scheduled: true,
    timezone: "Europe/Moscow"
});

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ –ø–æ —Å—Ä–µ–¥–∞–º –≤ 12:00
cron.schedule('0 12 * * 3', async () => {
    logEvent('info', 'Weekly challenge reminder (Wednesday) cron job started');
    try {
        await sendWeeklyChallengeNotifications('reminder');
    } catch (error) {
        logEvent('error', 'Error in Wednesday challenge reminder cron job', { error: error.toString() });
    }
}, {
    scheduled: true,
    timezone: "Europe/Moscow"
});

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º –≤ 18:00
cron.schedule('0 18 * * 5', async () => {
    logEvent('info', 'Weekly challenge reminder (Friday) cron job started');
    try {
        await sendWeeklyChallengeNotifications('reminder');
    } catch (error) {
        logEvent('error', 'Error in Friday challenge reminder cron job', { error: error.toString() });
    }
}, {
    scheduled: true,
    timezone: "Europe/Moscow"
});

logEvent('info', 'Cron jobs configured', {
    dailyReports: '9:00 daily',
    healthCheck: 'every 30 minutes',
    memoryCleanup: 'hourly',
    challengeCreation: 'Monday 10:00',
    challengeReminders: 'Wednesday 12:00, Friday 18:00'
});

module.exports = { setupBot }; 
