const TelegramBot = require('node-telegram-bot-api');
const supabase = require('./supabaseClient');
const OpenAI = require('openai');
const crypto = require('crypto');
const cron = require('node-cron');
const { USER_WORKOUT_PROGRAMS } = require('./user_workout_programs');

require('dotenv').config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
    throw new Error('Telegram Bot Token or OpenAI API Key is not defined in .env file');
}

// ü§ñ Telegram Bot —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const bot = new TelegramBot(token, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    logEvent('error', 'Telegram polling error', { 
        error: error.message,
        code: error.code 
    });
});

const openai = new OpenAI({ apiKey: openaiApiKey });

// === üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ú–û–î–£–õ–ò ===

// üö® 1. ERROR HANDLING & STABILITY
const withErrorHandling = async (apiCall, fallbackMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.') => {
    try {
        return await apiCall();
    } catch (error) {
        console.error('API Error:', error);
        return { success: false, error: fallbackMessage, details: error.message };
    }
};

const withTimeout = (promise, timeoutMs = 30000) => {
    return Promise.race([
        promise,
        new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Request timeout')), timeoutMs)
        )
    ]);
};

// üö´ 2. RATE LIMITING (Anti-spam protection)
const userRateLimits = new Map();
const RATE_LIMIT_WINDOW = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
const RATE_LIMIT_MAX_REQUESTS = 30; // 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

const checkRateLimit = (userId) => {
    const now = Date.now();
    const userRequests = userRateLimits.get(userId) || [];
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const recentRequests = userRequests.filter(timestamp => now - timestamp < RATE_LIMIT_WINDOW);
    
    if (recentRequests.length >= RATE_LIMIT_MAX_REQUESTS) {
        return false; // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    }
    
    recentRequests.push(now);
    userRateLimits.set(userId, recentRequests);
    return true; // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
};

// ‚úÖ 3. DATA VALIDATION
const validateUserInput = {
    weight: (value) => {
        const num = parseFloat(value);
        return !isNaN(num) && num > 0 && num < 300;
    },
    height: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 100 && num < 250;
    },
    age: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 120;
    },
    waterAmount: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 5000;
    },
    calories: (value) => {
        const num = parseInt(value);
        return !isNaN(num) && num > 0 && num < 10000;
    },
    name: (value) => {
        return typeof value === 'string' && value.length >= 2 && value.length <= 50 && /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/.test(value);
    }
};

// üìù 4. LOGGING SYSTEM
const logEvent = (level, message, meta = {}) => {
    const timestamp = new Date().toISOString();
    const logEntry = {
        timestamp,
        level,
        message,
        ...meta
    };
    
    console.log(`[${timestamp}] ${level.toUpperCase()}: ${message}`, meta);
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–∞–π–ª –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
};

// üóÑÔ∏è 5. DATABASE ERROR HANDLING
const withDatabaseErrorHandling = async (operation, fallbackMessage = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.') => {
    try {
        const result = await operation();
        if (result.error) {
            logEvent('error', 'Database operation failed', { 
                error: result.error.message, 
                code: result.error.code 
            });
            return { success: false, error: fallbackMessage, details: result.error };
        }
        return { success: true, data: result.data };
    } catch (error) {
        logEvent('error', 'Database exception', { error: error.toString() });
        return { success: false, error: fallbackMessage, details: error };
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    logEvent('error', 'Unhandled Rejection', { reason: reason.toString(), promise });
});

process.on('uncaughtException', (error) => {
    logEvent('error', 'Uncaught Exception', { error: error.toString(), stack: error.stack });
});

// üöÄ GRACEFUL SHUTDOWN –¥–ª—è Railway
process.on('SIGTERM', () => {
    logEvent('info', 'Received SIGTERM, shutting down gracefully');
    console.log('üîÑ Railway –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    setTimeout(() => {
        process.exit(0);
    }, 5000);
});

process.on('SIGINT', () => {
    logEvent('info', 'Received SIGINT, shutting down gracefully');
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    process.exit(0);
});

// üìä 6. HEALTH CHECK ENDPOINT
const performHealthCheck = async () => {
    const healthStatus = {
        timestamp: new Date().toISOString(),
        status: 'healthy',
        services: {}
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
    try {
        await withTimeout(openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [{ role: 'user', content: 'test' }],
            max_tokens: 1
        }), 5000);
        healthStatus.services.openai = 'healthy';
    } catch (error) {
        healthStatus.services.openai = 'unhealthy';
        healthStatus.status = 'degraded';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
    try {
        const { error } = await supabase.from('profiles').select('count').limit(1);
        healthStatus.services.database = error ? 'unhealthy' : 'healthy';
        if (error) healthStatus.status = 'degraded';
    } catch (error) {
        healthStatus.services.database = 'unhealthy';
        healthStatus.status = 'degraded';
    }

    logEvent('info', 'Health check completed', healthStatus);
    return healthStatus;
};

// In-memory states
const registrationState = {};
const manualAddState = {};
const mealConfirmationCache = {};
const workoutPlanState = {};
const nutritionPlanState = {};
const waterInputState = {};
const profileEditState = {};
const challengeStepsState = {};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const questionState = {};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const medicalAnalysisState = {};

// --- Typing Indicator and Streaming Functions ---
const showTyping = async (chat_id, duration = 3000) => {
    try {
        await bot.sendChatAction(chat_id, 'typing');
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ typing action –∏—Å—Ç–µ–∫–∞–µ—Ç
        const interval = setInterval(() => {
            bot.sendChatAction(chat_id, 'typing');
        }, 4000);
        
        setTimeout(() => {
            clearInterval(interval);
        }, duration);
    } catch (error) {
        console.error('Error showing typing indicator:', error);
    }
};

const streamMessage = async (chat_id, fullText, options = {}) => {
    try {
        const chars = fullText.trim().split('');
        if (chars.length <= 15) { // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            return await bot.sendMessage(chat_id, fullText, options);
        }

        // üöÄ –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î: –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è + —É–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        const UPDATE_INTERVAL_MS = 75; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 75–º—Å
        let lastUpdateTime = 0;
        let accumulatedText = '';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const sentMessage = await bot.sendMessage(chat_id, '‚úçÔ∏è', options);
        accumulatedText = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞

        for (let i = 0; i < chars.length; i++) {
            accumulatedText += chars[i];
            const now = Date.now();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
            if (now - lastUpdateTime > UPDATE_INTERVAL_MS || i === chars.length - 1) {
                try {
                    await bot.editMessageText(accumulatedText, {
                        chat_id: chat_id,
                        message_id: sentMessage.message_id,
                        ...options
                    });
                    lastUpdateTime = now; // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                } catch (editError) {
                    if (!editError.message.includes('message is not modified')) {
                        console.warn('Stream hybrid update error:', editError.message);
                    }
                }
            }
             // –ú–∏–∫—Ä–æ-–ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ –±—ã–ª —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –¥–ª—è CPU.
            await new Promise(resolve => setTimeout(resolve, 1));
        }

        return sentMessage;
    } catch (error) {
        console.error('Error in streamMessage:', error);
        return await bot.sendMessage(chat_id, fullText, options);
    }
};

// –£–±—Ä–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è streamLongMessage - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ streamMessage –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

const shouldUseStreaming = (text) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º streaming –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤ (–≥–∏–±—Ä–∏–¥–Ω—ã–π –≤—ã–≤–æ–¥)
    return text && typeof text === 'string' && text.trim().length > 15;
};

const smartSendMessage = async (chat_id, text, options = {}) => {
    if (shouldUseStreaming(text)) {
        return await streamMessage(chat_id, text, options);
    } else {
        return await bot.sendMessage(chat_id, text, options);
    }
};

// –§—É–Ω–∫—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
const formatAIResponse = (text) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let formatted = text;
    
    // –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    formatted = formatted.replace(/\n([–ê-–Ø])/g, '\n\n$1');
    
    // –í—ã–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    formatted = formatted.replace(/([0-9,]+\s*(–∫–∫–∞–ª|–∫–≥|–≥|–º–ª|–∫–º|–º–∏–Ω|—Ä–∞–∑|–ø–æ–¥—Ö–æ–¥|–¥–µ–Ω—å|–Ω–µ–¥–µ–ª—è|–º–µ—Å—è—Ü))/gi, '`$1`');
    formatted = formatted.replace(/(–∫–∞–ª–æ—Ä–∏—è|–∫–∞–ª–æ—Ä–∏–∏|–∫–∞–ª–æ—Ä–∏–π|–±–µ–ª–∫–∏|–∂–∏—Ä—ã|—É–≥–ª–µ–≤–æ–¥—ã|–ö–ë–ñ–£|–ë–ñ–£)/gi, '`$1`');
    formatted = formatted.replace(/(–∑–∞–≤—Ç—Ä–∞–∫|–æ–±–µ–¥|—É–∂–∏–Ω|–ø–µ—Ä–µ–∫—É—Å)/gi, '`$1`');
    
    // –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    formatted = formatted.replace(/^([–ê-–Ø][^:]*:)/gm, '**$1**');
    
    // –£–ª—É—á—à–∞–µ–º —Å–ø–∏—Å–∫–∏
    formatted = formatted.replace(/^- /gm, '‚Ä¢ ');
    formatted = formatted.replace(/^(\d+)\. /gm, '**$1.** ');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    formatted = formatted.replace(/\*\*(–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–°–æ–≤–µ—Ç—ã|–í–∞–∂–Ω–æ|–í–Ω–∏–º–∞–Ω–∏–µ)\*\*/gi, 'üí° **$1**');
    formatted = formatted.replace(/\*\*(–ü–∏—Ç–∞–Ω–∏–µ|–†–∞—Ü–∏–æ–Ω|–î–∏–µ—Ç–∞)\*\*/gi, 'üçΩÔ∏è **$1**');
    formatted = formatted.replace(/\*\*(–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏|–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è|–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)\*\*/gi, 'üí™ **$1**');
    formatted = formatted.replace(/\*\*(–ó–¥–æ—Ä–æ–≤—å–µ|–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)\*\*/gi, 'üè• **$1**');
    formatted = formatted.replace(/\*\*(–†–µ–∑—É–ª—å—Ç–∞—Ç|–ò—Ç–æ–≥|–ó–∞–∫–ª—é—á–µ–Ω–∏–µ)\*\*/gi, 'üéØ **$1**');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ä–∞–º–∫—É –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
    if (formatted.length > 200) {
        formatted = `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  ü§ñ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢**  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${formatted}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüí¨ *–ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã? –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!*`;
    }
    
    return formatted;
};

const getUserProfile = async (userId) => {
    const { data, error } = await withDatabaseErrorHandling(() => 
        supabase.from('profiles').select('*').eq('id', userId).single()
    );
    return data;
};

const formatUserProgramToMarkdown = (program) => {
    let markdown = `*${program.title}*\n\n`;
    markdown += `_${program.description}_\n\n`;

    if (program.weeks) {
        program.weeks.forEach(weekData => {
            markdown += `*–ù–µ–¥–µ–ª—è ${weekData.week}*\n`;
            weekData.days.forEach(day => {
                markdown += `*${day.title}*\n`;
                day.exercises.forEach(ex => {
                    markdown += `  - ${ex.name}: ${ex.sets_reps}${ex.weight ? ` (${ex.weight})` : ''}\n`;
                });
            });
            markdown += '\n';
        });
    }

    if (program.blocks) {
        program.blocks.forEach(blockData => {
            markdown += `*–ë–ª–æ–∫ ${blockData.block}*\n`;
            blockData.trainings.forEach(training => {
                markdown += `*${training.title}*\n`;
                training.exercises.forEach(ex => {
                    markdown += `  - ${ex.name}: ${ex.sets_reps} (${ex.intensity})\n`;
                });
            });
            markdown += '\n';
        });
    }
    
    if (program.week_7) {
        markdown += `*${program.week_7.title}*\n`;
        program.week_7.days.forEach(day => {
            markdown += `*${day.title}*\n`;
            day.exercises.forEach(ex => {
                markdown += `  - ${ex.name}: ${ex.sets_reps} (${ex.weight})\n`;
            });
        });
        markdown += '\n';
    }

    return markdown;
};

const generatePersonalizedWorkoutPlan = async (userProfile, goal, experience) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        const allExercises = [];
        
        Object.values(USER_WORKOUT_PROGRAMS).forEach(category => {
            Object.values(category).forEach(gender => {
                Object.values(gender).forEach(program => {
                    if (program.weeks) {
                        program.weeks.forEach(week => {
                            week.days.forEach(day => {
                                allExercises.push(...day.exercises);
                            });
                        });
                    }
                    if (program.blocks) {
                        program.blocks.forEach(block => {
                            block.trainings.forEach(training => {
                                allExercises.push(...training.exercises);
                            });
                        });
                    }
                });
            });
        });

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        const uniqueExercises = allExercises.filter((exercise, index, self) => 
            index === self.findIndex(e => e.name === exercise.name)
        );

        const prompt = `
–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä. –°–æ—Å—Ç–∞–≤—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ:

–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ò–º—è: ${userProfile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ü–æ–ª: ${userProfile?.gender || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –í–æ–∑—Ä–∞—Å—Ç: ${userProfile?.age || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –í–µ—Å: ${userProfile?.weight || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–≥
- –†–æ—Å—Ç: ${userProfile?.height || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —Å–º
- –¶–µ–ª—å: ${goal}
- –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: ${experience}

–î–û–°–¢–£–ü–ù–´–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø (–≤—ã–±–µ—Ä–∏ —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ):
${uniqueExercises.slice(0, 50).map(ex => `- ${ex.name}: ${ex.sets_reps || ''} ${ex.intensity ? `(${ex.intensity})` : ''}`).join('\n')}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ—Å—Ç–∞–≤—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ 3-4 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é
2. –£—á—Ç–∏ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
4. –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
5. –î–æ–±–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–¥—ã—Ö—É –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏
6. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
**–ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –¢–†–ï–ù–ò–†–û–í–û–ö**

**–î–µ–Ω—å 1 - [–ù–∞–∑–≤–∞–Ω–∏–µ]**
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –ø–æ–¥—Ö–æ–¥—ã x –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–æ—Ç–¥—ã—Ö)
- ...

**–î–µ–Ω—å 2 - –û—Ç–¥—ã—Ö**

**–î–µ–Ω—å 3 - [–ù–∞–∑–≤–∞–Ω–∏–µ]**
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –ø–æ–¥—Ö–æ–¥—ã x –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–æ—Ç–¥—ã—Ö)
- ...

**–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
- –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
- –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
- –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ç–µ—Ö–Ω–∏–∫–∏
`;

        const response = await withTimeout(
            openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [
                    {
                        role: 'system',
                        content: '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–µ—à—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                max_tokens: 1500,
                temperature: 0.7
            }),
            15000
        );

        return response.choices[0].message.content;
    } catch (error) {
        logEvent('error', 'Error generating personalized workout plan', { error: error.toString() });
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
};

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    try {
        if (text === '/start') {
            // ... existing code ...
        } else if (msg.entities && msg.entities[0].type === 'bot_command') {
            // ... existing code ...
        } else if (msg.text && msg.text.startsWith('/')) {
            // ... existing code ...
        } else if (msg.text) {
            // ... existing code ...
        } else if (msg.callback_query) {
            const callbackQuery = msg.callback_query;
            if (callbackQuery.data.startsWith('get_workout_plan_')) {
                const [_, goal, gender, experience] = callbackQuery.data.split('_');
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userProfile = await getUserProfile(chatId);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                await showTyping(chatId, 8000);
                await bot.sendMessage(chatId, 'ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –ø–æ–º–æ—â—å—é –ò–ò
                const personalizedPlan = await generatePersonalizedWorkoutPlan(userProfile, goal, experience);
                
                await smartSendMessage(chatId, personalizedPlan, { parse_mode: 'Markdown' });
            }
        }
    } catch (error) {
        logEvent('error', `Callback query processing error for data: ${callbackQuery.data}`, {
            error: error.toString(),
            stack: error.stack
        });
    }
});
